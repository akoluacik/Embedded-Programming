/*
 * BME_280.h
 *
 *  Created on: Apr 16, 2023
 *      Author: anil
 */

#ifndef INC_BME_280_H_
#define INC_BME_280_H_

#include "stm32f4xx_hal.h"

#define		SOFT_RESET		0xB6

#define		SLEEP_MODE		0x00
#define		FORCED_MODE 	0x01
#define		NORMAL_MODE		0x3

#define		SKIP_MEAS		0x00
#define		OSRS_1			0x01
#define		OSRS_2			0x02
#define		OSRS_4			0x03
#define		OSRS_8			0x04
#define		OSRS_16			0x05

#define		SB_0p5_MS		0x00
#define		SB_62p5_MS		0x01
#define		SB_125_MS		0x02
#define		SB_250_MS		0x03
#define		SB_500_MS		0x04
#define		SB_1000_MS		0x05
#define		SB_10_MS		0x06
#define		SB_20_MS		0x07

#define		FLT_COEFF_0		0x00
#define		FLT_COEFF_2		0x01
#define		FLT_COEFF_4		0x02
#define		FLT_COEFF_8		0x03
#define		FLT_COEFF_16	0x04

#define		DEVICE_ID	0x60
#define		DEVICE_ADD	(0x76 << 1)
#define		RESET		0xE0
#define		CTRL_HUM	0xF2
#define		STATUS		0xF3
#define		CTRL_MEAS	0xF4		// CONTROL TEMP REGISTER
#define		CONFIG		0xF5
#define		PRESS_MSB_REG   0xF7


typedef enum {
	BME_280_OK 	  = 0,
	BME_280_ERROR = 1
} BME_280_Response;

BME_280_Response	BME_280_softReset(void);
BME_280_Response				BME_280_trimmingParameter(void);
BME_280_Response	BME_280_config(uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter);
BME_280_Response	BME_280_readRegister(void);
BME_280_Response	BME_280_measure(void);



#endif /* INC_BME_280_H_ */
