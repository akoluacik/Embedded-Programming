
1.KY017_LED_MODULE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000894  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000a2c  08000a2c  00010a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000a48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000a48  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a5b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aeb  00000000  00000000  00022a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000310  00000000  00000000  00023588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  00023898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d7b  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ce2  00000000  00000000  000388bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c50  00000000  00000000  0003c59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c41ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  000c4240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a14 	.word	0x08000a14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000a14 	.word	0x08000a14

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <SystemInit+0x28>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <SystemInit+0x28>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <SystemInit+0x28>)
 80001ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001f2:	609a      	str	r2, [r3, #8]
#endif
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <HAL_Init+0x40>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <HAL_Init+0x40>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x40>)
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f939 	bl	80004a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	200f      	movs	r0, #15
 8000234:	f000 f810 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000238:	f000 f806 	bl	8000248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023c00 	.word	0x40023c00

08000248 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
	...

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <HAL_InitTick+0x54>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <HAL_InitTick+0x58>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000272:	fbb2 f3f3 	udiv	r3, r2, r3
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f93b 	bl	80004f2 <HAL_SYSTICK_Config>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	e00e      	b.n	80002a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b0f      	cmp	r3, #15
 800028a:	d80a      	bhi.n	80002a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800028c:	2200      	movs	r2, #0
 800028e:	6879      	ldr	r1, [r7, #4]
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	f000 f911 	bl	80004ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_InitTick+0x5c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800029e:	2300      	movs	r3, #0
 80002a0:	e000      	b.n	80002a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000008 	.word	0x20000008
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_IncTick+0x20>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_IncTick+0x24>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <HAL_IncTick+0x24>)
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000008 	.word	0x20000008
 80002dc:	20000028 	.word	0x20000028

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d005      	beq.n	800031e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <HAL_Delay+0x44>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4413      	add	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800031e:	bf00      	nop
 8000320:	f7ff ffde 	bl	80002e0 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	429a      	cmp	r2, r3
 800032e:	d8f7      	bhi.n	8000320 <HAL_Delay+0x28>
  {
  }
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000008 	.word	0x20000008

08000340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800035c:	4013      	ands	r3, r2
 800035e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <__NVIC_SetPriorityGrouping+0x44>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	60d3      	str	r3, [r2, #12]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__NVIC_GetPriorityGrouping+0x18>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	0a1b      	lsrs	r3, r3, #8
 8000392:	f003 0307 	and.w	r3, r3, #7
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	db0a      	blt.n	80003ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	490c      	ldr	r1, [pc, #48]	; (80003f0 <__NVIC_SetPriority+0x4c>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	0112      	lsls	r2, r2, #4
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	440b      	add	r3, r1
 80003c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003cc:	e00a      	b.n	80003e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <__NVIC_SetPriority+0x50>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 030f 	and.w	r3, r3, #15
 80003da:	3b04      	subs	r3, #4
 80003dc:	0112      	lsls	r2, r2, #4
 80003de:	b2d2      	uxtb	r2, r2
 80003e0:	440b      	add	r3, r1
 80003e2:	761a      	strb	r2, [r3, #24]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000e100 	.word	0xe000e100
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b089      	sub	sp, #36	; 0x24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60f8      	str	r0, [r7, #12]
 8000400:	60b9      	str	r1, [r7, #8]
 8000402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f003 0307 	and.w	r3, r3, #7
 800040a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	f1c3 0307 	rsb	r3, r3, #7
 8000412:	2b04      	cmp	r3, #4
 8000414:	bf28      	it	cs
 8000416:	2304      	movcs	r3, #4
 8000418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	3304      	adds	r3, #4
 800041e:	2b06      	cmp	r3, #6
 8000420:	d902      	bls.n	8000428 <NVIC_EncodePriority+0x30>
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3b03      	subs	r3, #3
 8000426:	e000      	b.n	800042a <NVIC_EncodePriority+0x32>
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	f04f 32ff 	mov.w	r2, #4294967295
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	43da      	mvns	r2, r3
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	401a      	ands	r2, r3
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000440:	f04f 31ff 	mov.w	r1, #4294967295
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43d9      	mvns	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	4313      	orrs	r3, r2
         );
}
 8000452:	4618      	mov	r0, r3
 8000454:	3724      	adds	r7, #36	; 0x24
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
	...

08000460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3b01      	subs	r3, #1
 800046c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000470:	d301      	bcc.n	8000476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000472:	2301      	movs	r3, #1
 8000474:	e00f      	b.n	8000496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <SysTick_Config+0x40>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3b01      	subs	r3, #1
 800047c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800047e:	210f      	movs	r1, #15
 8000480:	f04f 30ff 	mov.w	r0, #4294967295
 8000484:	f7ff ff8e 	bl	80003a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <SysTick_Config+0x40>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <SysTick_Config+0x40>)
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	e000e010 	.word	0xe000e010

080004a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f7ff ff47 	bl	8000340 <__NVIC_SetPriorityGrouping>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	4603      	mov	r3, r0
 80004c2:	60b9      	str	r1, [r7, #8]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004cc:	f7ff ff5c 	bl	8000388 <__NVIC_GetPriorityGrouping>
 80004d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	6978      	ldr	r0, [r7, #20]
 80004d8:	f7ff ff8e 	bl	80003f8 <NVIC_EncodePriority>
 80004dc:	4602      	mov	r2, r0
 80004de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff5d 	bl	80003a4 <__NVIC_SetPriority>
}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f7ff ffb0 	bl	8000460 <SysTick_Config>
 8000500:	4603      	mov	r3, r0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800050c:	b480      	push	{r7}
 800050e:	b089      	sub	sp, #36	; 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
 8000526:	e159      	b.n	80007dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000528:	2201      	movs	r2, #1
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	429a      	cmp	r2, r3
 8000542:	f040 8148 	bne.w	80007d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d00b      	beq.n	8000566 <HAL_GPIO_Init+0x5a>
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d007      	beq.n	8000566 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055a:	2b11      	cmp	r3, #17
 800055c:	d003      	beq.n	8000566 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	2b12      	cmp	r3, #18
 8000564:	d130      	bne.n	80005c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2203      	movs	r2, #3
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	69ba      	ldr	r2, [r7, #24]
 800057a:	4013      	ands	r3, r2
 800057c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	4313      	orrs	r3, r2
 800058e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800059c:	2201      	movs	r2, #1
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	4013      	ands	r3, r2
 80005aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	f003 0201 	and.w	r2, r3, #1
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	69ba      	ldr	r2, [r7, #24]
 80005be:	4313      	orrs	r3, r2
 80005c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	69ba      	ldr	r2, [r7, #24]
 80005c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2203      	movs	r2, #3
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	4013      	ands	r3, r2
 80005de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d003      	beq.n	8000608 <HAL_GPIO_Init+0xfc>
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	2b12      	cmp	r3, #18
 8000606:	d123      	bne.n	8000650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	08da      	lsrs	r2, r3, #3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3208      	adds	r2, #8
 8000610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	f003 0307 	and.w	r3, r3, #7
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	220f      	movs	r2, #15
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	691a      	ldr	r2, [r3, #16]
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	08da      	lsrs	r2, r3, #3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3208      	adds	r2, #8
 800064a:	69b9      	ldr	r1, [r7, #24]
 800064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	2203      	movs	r2, #3
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	69ba      	ldr	r2, [r7, #24]
 8000664:	4013      	ands	r3, r2
 8000666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 0203 	and.w	r2, r3, #3
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	4313      	orrs	r3, r2
 800067c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 80a2 	beq.w	80007d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <HAL_GPIO_Init+0x2e8>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a56      	ldr	r2, [pc, #344]	; (80007f4 <HAL_GPIO_Init+0x2e8>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <HAL_GPIO_Init+0x2e8>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80006ae:	4a52      	ldr	r2, [pc, #328]	; (80007f8 <HAL_GPIO_Init+0x2ec>)
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	089b      	lsrs	r3, r3, #2
 80006b4:	3302      	adds	r3, #2
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f003 0303 	and.w	r3, r3, #3
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	220f      	movs	r2, #15
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	69ba      	ldr	r2, [r7, #24]
 80006ce:	4013      	ands	r3, r2
 80006d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a49      	ldr	r2, [pc, #292]	; (80007fc <HAL_GPIO_Init+0x2f0>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d019      	beq.n	800070e <HAL_GPIO_Init+0x202>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a48      	ldr	r2, [pc, #288]	; (8000800 <HAL_GPIO_Init+0x2f4>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d013      	beq.n	800070a <HAL_GPIO_Init+0x1fe>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a47      	ldr	r2, [pc, #284]	; (8000804 <HAL_GPIO_Init+0x2f8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d00d      	beq.n	8000706 <HAL_GPIO_Init+0x1fa>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a46      	ldr	r2, [pc, #280]	; (8000808 <HAL_GPIO_Init+0x2fc>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d007      	beq.n	8000702 <HAL_GPIO_Init+0x1f6>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a45      	ldr	r2, [pc, #276]	; (800080c <HAL_GPIO_Init+0x300>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d101      	bne.n	80006fe <HAL_GPIO_Init+0x1f2>
 80006fa:	2304      	movs	r3, #4
 80006fc:	e008      	b.n	8000710 <HAL_GPIO_Init+0x204>
 80006fe:	2307      	movs	r3, #7
 8000700:	e006      	b.n	8000710 <HAL_GPIO_Init+0x204>
 8000702:	2303      	movs	r3, #3
 8000704:	e004      	b.n	8000710 <HAL_GPIO_Init+0x204>
 8000706:	2302      	movs	r3, #2
 8000708:	e002      	b.n	8000710 <HAL_GPIO_Init+0x204>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <HAL_GPIO_Init+0x204>
 800070e:	2300      	movs	r3, #0
 8000710:	69fa      	ldr	r2, [r7, #28]
 8000712:	f002 0203 	and.w	r2, r2, #3
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	4093      	lsls	r3, r2
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	4313      	orrs	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000720:	4935      	ldr	r1, [pc, #212]	; (80007f8 <HAL_GPIO_Init+0x2ec>)
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	3302      	adds	r3, #2
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <HAL_GPIO_Init+0x304>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	43db      	mvns	r3, r3
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4013      	ands	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <HAL_GPIO_Init+0x304>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <HAL_GPIO_Init+0x304>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	43db      	mvns	r3, r3
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800077c:	4a24      	ldr	r2, [pc, #144]	; (8000810 <HAL_GPIO_Init+0x304>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <HAL_GPIO_Init+0x304>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	43db      	mvns	r3, r3
 800078c:	69ba      	ldr	r2, [r7, #24]
 800078e:	4013      	ands	r3, r2
 8000790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <HAL_GPIO_Init+0x304>)
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_GPIO_Init+0x304>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_GPIO_Init+0x304>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3301      	adds	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2b0f      	cmp	r3, #15
 80007e0:	f67f aea2 	bls.w	8000528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40021000 	.word	0x40021000
 8000810:	40013c00 	.word	0x40013c00

08000814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
 8000820:	4613      	mov	r3, r2
 8000822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000824:	787b      	ldrb	r3, [r7, #1]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800082a:	887a      	ldrh	r2, [r7, #2]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000830:	e003      	b.n	800083a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	041a      	lsls	r2, r3, #16
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	619a      	str	r2, [r3, #24]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <KY017_Module_Init>:
#include "ky017ledmodule_config.h"

const uint16_t KY017_LED_PINS[] = {RED_LED,GREEN_LED,BLUE_LED};

void KY017_Module_Init(uint16_t Pin)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <KY017_Module_Init+0x5c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <KY017_Module_Init+0x5c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <KY017_Module_Init+0x5c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = Pin;
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4619      	mov	r1, r3
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <KY017_Module_Init+0x60>)
 8000896:	f7ff fe39 	bl	800050c <HAL_GPIO_Init>
}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <KY017_LED_HIGH>:

void KY017_LED_HIGH(uint16_t Pin)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_SET);
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <KY017_LED_HIGH+0x20>)
 80008be:	f7ff ffa9 	bl	8000814 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020000 	.word	0x40020000

080008d0 <KY017_LED_LOW>:

void KY017_LED_LOW(uint16_t Pin)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_RESET);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <KY017_LED_LOW+0x20>)
 80008e2:	f7ff ff97 	bl	8000814 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020000 	.word	0x40020000

080008f4 <main>:
#include "ky017ledmodule_config.h"

extern const uint16_t KY017_LED_PINS[3];

int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

	uint8_t var = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]

	// HAL Initialization
	HAL_Init();
 80008fe:	f7ff fc81 	bl	8000204 <HAL_Init>

	// Init KY017 Module
	KY017_Module_Init(RED_LED|GREEN_LED|BLUE_LED);
 8000902:	2013      	movs	r0, #19
 8000904:	f7ff ffa0 	bl	8000848 <KY017_Module_Init>

	while(1)
	{
		KY017_LED_HIGH(KY017_LED_PINS[var%3]);
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x70>)
 800090c:	fba3 1302 	umull	r1, r3, r3, r2
 8000910:	0859      	lsrs	r1, r3, #1
 8000912:	460b      	mov	r3, r1
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	440b      	add	r3, r1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0x74>)
 8000920:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffc1 	bl	80008ac <KY017_LED_HIGH>
		HAL_Delay(500);
 800092a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092e:	f7ff fce3 	bl	80002f8 <HAL_Delay>
		KY017_LED_LOW(KY017_LED_PINS[var%3]);
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <main+0x70>)
 8000936:	fba3 1302 	umull	r1, r3, r3, r2
 800093a:	0859      	lsrs	r1, r3, #1
 800093c:	460b      	mov	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <main+0x74>)
 800094a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffbe 	bl	80008d0 <KY017_LED_LOW>
		var++;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3301      	adds	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800095a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095e:	f7ff fccb 	bl	80002f8 <HAL_Delay>
		KY017_LED_HIGH(KY017_LED_PINS[var%3]);
 8000962:	e7d1      	b.n	8000908 <main+0x14>
 8000964:	aaaaaaab 	.word	0xaaaaaaab
 8000968:	08000a2c 	.word	0x08000a2c

0800096c <SysTick_Handler>:
	}

}

void  SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000970:	f7ff fca2 	bl	80002b8 <HAL_IncTick>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f7ff fc2c 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f000 f811 	bl	80009cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff ffa3 	bl	80008f4 <main>

080009ae <LoopForever>:

LoopForever:
  b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009bc:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 80009c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c4:	2000002c 	.word	0x2000002c

080009c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <__libc_init_array>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4d0d      	ldr	r5, [pc, #52]	; (8000a04 <__libc_init_array+0x38>)
 80009d0:	4c0d      	ldr	r4, [pc, #52]	; (8000a08 <__libc_init_array+0x3c>)
 80009d2:	1b64      	subs	r4, r4, r5
 80009d4:	10a4      	asrs	r4, r4, #2
 80009d6:	2600      	movs	r6, #0
 80009d8:	42a6      	cmp	r6, r4
 80009da:	d109      	bne.n	80009f0 <__libc_init_array+0x24>
 80009dc:	4d0b      	ldr	r5, [pc, #44]	; (8000a0c <__libc_init_array+0x40>)
 80009de:	4c0c      	ldr	r4, [pc, #48]	; (8000a10 <__libc_init_array+0x44>)
 80009e0:	f000 f818 	bl	8000a14 <_init>
 80009e4:	1b64      	subs	r4, r4, r5
 80009e6:	10a4      	asrs	r4, r4, #2
 80009e8:	2600      	movs	r6, #0
 80009ea:	42a6      	cmp	r6, r4
 80009ec:	d105      	bne.n	80009fa <__libc_init_array+0x2e>
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	3601      	adds	r6, #1
 80009f8:	e7ee      	b.n	80009d8 <__libc_init_array+0xc>
 80009fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fe:	4798      	blx	r3
 8000a00:	3601      	adds	r6, #1
 8000a02:	e7f2      	b.n	80009ea <__libc_init_array+0x1e>
 8000a04:	08000a34 	.word	0x08000a34
 8000a08:	08000a34 	.word	0x08000a34
 8000a0c:	08000a34 	.word	0x08000a34
 8000a10:	08000a38 	.word	0x08000a38

08000a14 <_init>:
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	bf00      	nop
 8000a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1a:	bc08      	pop	{r3}
 8000a1c:	469e      	mov	lr, r3
 8000a1e:	4770      	bx	lr

08000a20 <_fini>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	bf00      	nop
 8000a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a26:	bc08      	pop	{r3}
 8000a28:	469e      	mov	lr, r3
 8000a2a:	4770      	bx	lr
