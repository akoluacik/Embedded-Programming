
2.KY017_LED_MODULE_BASIC_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c18  08000c18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c18  08000c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c18  08000c18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c18  08000c18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08000c2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000c2c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000591f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efc  00000000  00000000  0002595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00026858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00026f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015185  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f3f  00000000  00000000  0003c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e82  00000000  00000000  00043664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc4e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  000cc538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c00 	.word	0x08000c00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000c00 	.word	0x08000c00

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <SystemInit+0x28>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <SystemInit+0x28>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <SystemInit+0x28>)
 80001ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001f2:	609a      	str	r2, [r3, #8]
#endif
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_Init+0x40>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <HAL_Init+0x40>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <HAL_Init+0x40>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <HAL_Init+0x40>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_Init+0x40>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x40>)
 8000226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800022a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022c:	2003      	movs	r0, #3
 800022e:	f000 f909 	bl	8000444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000232:	200f      	movs	r0, #15
 8000234:	f000 f810 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000238:	f000 f806 	bl	8000248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40023c00 	.word	0x40023c00

08000248 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
	...

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <HAL_InitTick+0x54>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <HAL_InitTick+0x58>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000272:	fbb2 f3f3 	udiv	r3, r2, r3
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f90b 	bl	8000492 <HAL_SYSTICK_Config>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	e00e      	b.n	80002a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b0f      	cmp	r3, #15
 800028a:	d80a      	bhi.n	80002a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800028c:	2200      	movs	r2, #0
 800028e:	6879      	ldr	r1, [r7, #4]
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	f000 f8e1 	bl	800045a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_InitTick+0x5c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800029e:	2300      	movs	r3, #0
 80002a0:	e000      	b.n	80002a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000008 	.word	0x20000008
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_IncTick+0x20>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_IncTick+0x24>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <HAL_IncTick+0x24>)
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000008 	.word	0x20000008
 80002dc:	20000028 	.word	0x20000028

080002e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f003 0307 	and.w	r3, r3, #7
 80002ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <__NVIC_SetPriorityGrouping+0x44>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002fc:	4013      	ands	r3, r2
 80002fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800030c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000312:	4a04      	ldr	r2, [pc, #16]	; (8000324 <__NVIC_SetPriorityGrouping+0x44>)
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	60d3      	str	r3, [r2, #12]
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <__NVIC_GetPriorityGrouping+0x18>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	0a1b      	lsrs	r3, r3, #8
 8000332:	f003 0307 	and.w	r3, r3, #7
}
 8000336:	4618      	mov	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	401a      	ands	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43d9      	mvns	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000410:	d301      	bcc.n	8000416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000412:	2301      	movs	r3, #1
 8000414:	e00f      	b.n	8000436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <SysTick_Config+0x40>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3b01      	subs	r3, #1
 800041c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041e:	210f      	movs	r1, #15
 8000420:	f04f 30ff 	mov.w	r0, #4294967295
 8000424:	f7ff ff8e 	bl	8000344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <SysTick_Config+0x40>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <SysTick_Config+0x40>)
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	e000e010 	.word	0xe000e010

08000444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ff47 	bl	80002e0 <__NVIC_SetPriorityGrouping>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045a:	b580      	push	{r7, lr}
 800045c:	b086      	sub	sp, #24
 800045e:	af00      	add	r7, sp, #0
 8000460:	4603      	mov	r3, r0
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800046c:	f7ff ff5c 	bl	8000328 <__NVIC_GetPriorityGrouping>
 8000470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	68b9      	ldr	r1, [r7, #8]
 8000476:	6978      	ldr	r0, [r7, #20]
 8000478:	f7ff ff8e 	bl	8000398 <NVIC_EncodePriority>
 800047c:	4602      	mov	r2, r0
 800047e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff5d 	bl	8000344 <__NVIC_SetPriority>
}
 800048a:	bf00      	nop
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ffb0 	bl	8000400 <SysTick_Config>
 80004a0:	4603      	mov	r3, r0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b089      	sub	sp, #36	; 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
 80004c6:	e159      	b.n	800077c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004c8:	2201      	movs	r2, #1
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	697a      	ldr	r2, [r7, #20]
 80004d8:	4013      	ands	r3, r2
 80004da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004dc:	693a      	ldr	r2, [r7, #16]
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	f040 8148 	bne.w	8000776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d00b      	beq.n	8000506 <HAL_GPIO_Init+0x5a>
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d007      	beq.n	8000506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004fa:	2b11      	cmp	r3, #17
 80004fc:	d003      	beq.n	8000506 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	2b12      	cmp	r3, #18
 8000504:	d130      	bne.n	8000568 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2203      	movs	r2, #3
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4013      	ands	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	68da      	ldr	r2, [r3, #12]
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	69ba      	ldr	r2, [r7, #24]
 800052c:	4313      	orrs	r3, r2
 800052e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	69ba      	ldr	r2, [r7, #24]
 8000534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800053c:	2201      	movs	r2, #1
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	43db      	mvns	r3, r3
 8000546:	69ba      	ldr	r2, [r7, #24]
 8000548:	4013      	ands	r3, r2
 800054a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	091b      	lsrs	r3, r3, #4
 8000552:	f003 0201 	and.w	r2, r3, #1
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4313      	orrs	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2203      	movs	r2, #3
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	43db      	mvns	r3, r3
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	4013      	ands	r3, r2
 800057e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	4313      	orrs	r3, r2
 8000590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	69ba      	ldr	r2, [r7, #24]
 8000596:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d003      	beq.n	80005a8 <HAL_GPIO_Init+0xfc>
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2b12      	cmp	r3, #18
 80005a6:	d123      	bne.n	80005f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	08da      	lsrs	r2, r3, #3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3208      	adds	r2, #8
 80005b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	f003 0307 	and.w	r3, r3, #7
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	220f      	movs	r2, #15
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	69ba      	ldr	r2, [r7, #24]
 80005c8:	4013      	ands	r3, r2
 80005ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	691a      	ldr	r2, [r3, #16]
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	69ba      	ldr	r2, [r7, #24]
 80005de:	4313      	orrs	r3, r2
 80005e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	08da      	lsrs	r2, r3, #3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3208      	adds	r2, #8
 80005ea:	69b9      	ldr	r1, [r7, #24]
 80005ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	2203      	movs	r2, #3
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	4013      	ands	r3, r2
 8000606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f003 0203 	and.w	r2, r3, #3
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	69ba      	ldr	r2, [r7, #24]
 800061a:	4313      	orrs	r3, r2
 800061c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	69ba      	ldr	r2, [r7, #24]
 8000622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	2b00      	cmp	r3, #0
 800062e:	f000 80a2 	beq.w	8000776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b57      	ldr	r3, [pc, #348]	; (8000794 <HAL_GPIO_Init+0x2e8>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	4a56      	ldr	r2, [pc, #344]	; (8000794 <HAL_GPIO_Init+0x2e8>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6453      	str	r3, [r2, #68]	; 0x44
 8000642:	4b54      	ldr	r3, [pc, #336]	; (8000794 <HAL_GPIO_Init+0x2e8>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800064e:	4a52      	ldr	r2, [pc, #328]	; (8000798 <HAL_GPIO_Init+0x2ec>)
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	3302      	adds	r3, #2
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	220f      	movs	r2, #15
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	4013      	ands	r3, r2
 8000670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a49      	ldr	r2, [pc, #292]	; (800079c <HAL_GPIO_Init+0x2f0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d019      	beq.n	80006ae <HAL_GPIO_Init+0x202>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a48      	ldr	r2, [pc, #288]	; (80007a0 <HAL_GPIO_Init+0x2f4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d013      	beq.n	80006aa <HAL_GPIO_Init+0x1fe>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a47      	ldr	r2, [pc, #284]	; (80007a4 <HAL_GPIO_Init+0x2f8>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d00d      	beq.n	80006a6 <HAL_GPIO_Init+0x1fa>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a46      	ldr	r2, [pc, #280]	; (80007a8 <HAL_GPIO_Init+0x2fc>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d007      	beq.n	80006a2 <HAL_GPIO_Init+0x1f6>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a45      	ldr	r2, [pc, #276]	; (80007ac <HAL_GPIO_Init+0x300>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <HAL_GPIO_Init+0x1f2>
 800069a:	2304      	movs	r3, #4
 800069c:	e008      	b.n	80006b0 <HAL_GPIO_Init+0x204>
 800069e:	2307      	movs	r3, #7
 80006a0:	e006      	b.n	80006b0 <HAL_GPIO_Init+0x204>
 80006a2:	2303      	movs	r3, #3
 80006a4:	e004      	b.n	80006b0 <HAL_GPIO_Init+0x204>
 80006a6:	2302      	movs	r3, #2
 80006a8:	e002      	b.n	80006b0 <HAL_GPIO_Init+0x204>
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <HAL_GPIO_Init+0x204>
 80006ae:	2300      	movs	r3, #0
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	f002 0203 	and.w	r2, r2, #3
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	4093      	lsls	r3, r2
 80006ba:	69ba      	ldr	r2, [r7, #24]
 80006bc:	4313      	orrs	r3, r2
 80006be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006c0:	4935      	ldr	r1, [pc, #212]	; (8000798 <HAL_GPIO_Init+0x2ec>)
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	3302      	adds	r3, #2
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <HAL_GPIO_Init+0x304>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	43db      	mvns	r3, r3
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	4013      	ands	r3, r2
 80006dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006f2:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <HAL_GPIO_Init+0x304>)
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <HAL_GPIO_Init+0x304>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	43db      	mvns	r3, r3
 8000702:	69ba      	ldr	r2, [r7, #24]
 8000704:	4013      	ands	r3, r2
 8000706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4313      	orrs	r3, r2
 800071a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800071c:	4a24      	ldr	r2, [pc, #144]	; (80007b0 <HAL_GPIO_Init+0x304>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <HAL_GPIO_Init+0x304>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	43db      	mvns	r3, r3
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	4013      	ands	r3, r2
 8000730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800073e:	69ba      	ldr	r2, [r7, #24]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	4313      	orrs	r3, r2
 8000744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000746:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <HAL_GPIO_Init+0x304>)
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_GPIO_Init+0x304>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	43db      	mvns	r3, r3
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	4013      	ands	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	4313      	orrs	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <HAL_GPIO_Init+0x304>)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3301      	adds	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	f67f aea2 	bls.w	80004c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40013800 	.word	0x40013800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
 80007c0:	4613      	mov	r3, r2
 80007c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c4:	787b      	ldrb	r3, [r7, #1]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ca:	887a      	ldrh	r2, [r7, #2]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007d0:	e003      	b.n	80007da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	041a      	lsls	r2, r3, #16
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	619a      	str	r2, [r3, #24]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e01d      	b.n	8000834 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d106      	bne.n	8000812 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f815 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2202      	movs	r2, #2
 8000816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3304      	adds	r3, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4610      	mov	r0, r2
 8000826:	f000 f837 	bl	8000898 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b06      	cmp	r3, #6
 8000870:	d007      	beq.n	8000882 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f042 0201 	orr.w	r2, r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <TIM_Base_SetConfig+0xe4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d00f      	beq.n	80008d0 <TIM_Base_SetConfig+0x38>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b6:	d00b      	beq.n	80008d0 <TIM_Base_SetConfig+0x38>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <TIM_Base_SetConfig+0xe8>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d007      	beq.n	80008d0 <TIM_Base_SetConfig+0x38>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a30      	ldr	r2, [pc, #192]	; (8000984 <TIM_Base_SetConfig+0xec>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d003      	beq.n	80008d0 <TIM_Base_SetConfig+0x38>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <TIM_Base_SetConfig+0xf0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d108      	bne.n	80008e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4313      	orrs	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a25      	ldr	r2, [pc, #148]	; (800097c <TIM_Base_SetConfig+0xe4>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d01b      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f0:	d017      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <TIM_Base_SetConfig+0xe8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d013      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <TIM_Base_SetConfig+0xec>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d00f      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a20      	ldr	r2, [pc, #128]	; (8000988 <TIM_Base_SetConfig+0xf0>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d00b      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a1f      	ldr	r2, [pc, #124]	; (800098c <TIM_Base_SetConfig+0xf4>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d007      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <TIM_Base_SetConfig+0xf8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d003      	beq.n	8000922 <TIM_Base_SetConfig+0x8a>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <TIM_Base_SetConfig+0xfc>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d108      	bne.n	8000934 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4313      	orrs	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <TIM_Base_SetConfig+0xe4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d103      	bne.n	8000968 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	615a      	str	r2, [r3, #20]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000
 8000980:	40000400 	.word	0x40000400
 8000984:	40000800 	.word	0x40000800
 8000988:	40000c00 	.word	0x40000c00
 800098c:	40014000 	.word	0x40014000
 8000990:	40014400 	.word	0x40014400
 8000994:	40014800 	.word	0x40014800

08000998 <TIMx_Init>:
#include "ky017ledmodule_config.h"

TIM_HandleTypeDef htimx;

void TIMx_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	TIMx_CLK_ENABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <TIMx_Init+0x60>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <TIMx_Init+0x60>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <TIMx_Init+0x60>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
	htimx.Instance = TIMx;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <TIMx_Init+0x64>)
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <TIMx_Init+0x68>)
 80009be:	601a      	str	r2, [r3, #0]
	htimx.Init.Prescaler = 16000 - 1;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <TIMx_Init+0x64>)
 80009c2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009c6:	605a      	str	r2, [r3, #4]
	htimx.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <TIMx_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	htimx.Init.Period = 750 - 1;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <TIMx_Init+0x64>)
 80009d0:	f240 22ed 	movw	r2, #749	; 0x2ed
 80009d4:	60da      	str	r2, [r3, #12]
	htimx.Init.ClockDivision = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <TIMx_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	htimx.Channel = TIM_CHANNEL_3; // TIM3 CHANNEL 3 is active. -> pin pa6
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <TIMx_Init+0x64>)
 80009de:	2208      	movs	r2, #8
 80009e0:	771a      	strb	r2, [r3, #28]
	htimx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <TIMx_Init+0x64>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htimx);
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <TIMx_Init+0x64>)
 80009ea:	f7ff fefc 	bl	80007e6 <HAL_TIM_Base_Init>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	2000002c 	.word	0x2000002c
 8000a00:	40000400 	.word	0x40000400

08000a04 <TIMx_Start>:

void TIMx_Start(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htimx);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIMx_Start+0x10>)
 8000a0a:	f7ff ff21 	bl	8000850 <HAL_TIM_Base_Start>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000002c 	.word	0x2000002c

08000a18 <TIMx_GetCounterValue>:

uint32_t TIMx_GetCounterValue(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htimx);
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <TIMx_GetCounterValue+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	2000002c 	.word	0x2000002c

08000a30 <KY017_Module_Init>:
#include "ky017ledmodule_config.h"

const uint16_t KY017_LED_PINS[] = {RED_LED,GREEN_LED,BLUE_LED};

void KY017_Module_Init(uint16_t Pin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <KY017_Module_Init+0x5c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <KY017_Module_Init+0x5c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <KY017_Module_Init+0x5c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = Pin;
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <KY017_Module_Init+0x60>)
 8000a7e:	f7ff fd15 	bl	80004ac <HAL_GPIO_Init>
}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <KY017_LED_HIGH>:

void KY017_LED_HIGH(uint16_t Pin)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_SET);
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <KY017_LED_HIGH+0x20>)
 8000aa6:	f7ff fe85 	bl	80007b4 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <KY017_LED_LOW>:

void KY017_LED_LOW(uint16_t Pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_RESET);
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <KY017_LED_LOW+0x20>)
 8000aca:	f7ff fe73 	bl	80007b4 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000

08000adc <main>:

extern const uint16_t KY017_LED_PINS[3];
uint32_t counter;
uint8_t var;
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

	// HAL Initialization
	HAL_Init();
 8000ae0:	f7ff fb90 	bl	8000204 <HAL_Init>

	// Init KY017 Module
	KY017_Module_Init(RED_LED|GREEN_LED|BLUE_LED);
 8000ae4:	2013      	movs	r0, #19
 8000ae6:	f7ff ffa3 	bl	8000a30 <KY017_Module_Init>

	// TIMx Init
	TIMx_Init();
 8000aea:	f7ff ff55 	bl	8000998 <TIMx_Init>

	// TIMx Start
	TIMx_Start();
 8000aee:	f7ff ff89 	bl	8000a04 <TIMx_Start>

	while(1)
	{
		counter = TIMx_GetCounterValue();
 8000af2:	f7ff ff91 	bl	8000a18 <TIMx_GetCounterValue>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <main+0x78>)
 8000afa:	6013      	str	r3, [r2, #0]

		if( counter <= 250 )
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <main+0x78>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2bfa      	cmp	r3, #250	; 0xfa
 8000b02:	d809      	bhi.n	8000b18 <main+0x3c>
		{
			KY017_LED_LOW(GREEN_LED);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff ffd7 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_LOW(BLUE_LED);
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f7ff ffd4 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_HIGH(RED_LED);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff ffbf 	bl	8000a94 <KY017_LED_HIGH>
 8000b16:	e7ec      	b.n	8000af2 <main+0x16>
		}

		else if (  counter >= 250 && counter <= 500 )
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <main+0x78>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b1e:	d90e      	bls.n	8000b3e <main+0x62>
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main+0x78>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b28:	d809      	bhi.n	8000b3e <main+0x62>
		{
			KY017_LED_LOW(RED_LED);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff ffc4 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_LOW(BLUE_LED);
 8000b30:	2010      	movs	r0, #16
 8000b32:	f7ff ffc1 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_HIGH(GREEN_LED);
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff ffac 	bl	8000a94 <KY017_LED_HIGH>
 8000b3c:	e008      	b.n	8000b50 <main+0x74>
		}

		else
		{
			KY017_LED_LOW(RED_LED);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ffba 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_LOW(GREEN_LED);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff ffb7 	bl	8000ab8 <KY017_LED_LOW>
			KY017_LED_HIGH(BLUE_LED);
 8000b4a:	2010      	movs	r0, #16
 8000b4c:	f7ff ffa2 	bl	8000a94 <KY017_LED_HIGH>
		counter = TIMx_GetCounterValue();
 8000b50:	e7cf      	b.n	8000af2 <main+0x16>
 8000b52:	bf00      	nop
 8000b54:	2000006c 	.word	0x2000006c

08000b58 <SysTick_Handler>:
	}

}

void  SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000b5c:	f7ff fbac 	bl	80002b8 <HAL_IncTick>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f7ff fb36 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b92:	f000 f811 	bl	8000bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b96:	f7ff ffa1 	bl	8000adc <main>

08000b9a <LoopForever>:

LoopForever:
  b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   r0, =_estack
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba8:	08000c20 	.word	0x08000c20
  ldr r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb0:	20000070 	.word	0x20000070

08000bb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <__libc_init_array>:
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	4d0d      	ldr	r5, [pc, #52]	; (8000bf0 <__libc_init_array+0x38>)
 8000bbc:	4c0d      	ldr	r4, [pc, #52]	; (8000bf4 <__libc_init_array+0x3c>)
 8000bbe:	1b64      	subs	r4, r4, r5
 8000bc0:	10a4      	asrs	r4, r4, #2
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	42a6      	cmp	r6, r4
 8000bc6:	d109      	bne.n	8000bdc <__libc_init_array+0x24>
 8000bc8:	4d0b      	ldr	r5, [pc, #44]	; (8000bf8 <__libc_init_array+0x40>)
 8000bca:	4c0c      	ldr	r4, [pc, #48]	; (8000bfc <__libc_init_array+0x44>)
 8000bcc:	f000 f818 	bl	8000c00 <_init>
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	10a4      	asrs	r4, r4, #2
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	42a6      	cmp	r6, r4
 8000bd8:	d105      	bne.n	8000be6 <__libc_init_array+0x2e>
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000be0:	4798      	blx	r3
 8000be2:	3601      	adds	r6, #1
 8000be4:	e7ee      	b.n	8000bc4 <__libc_init_array+0xc>
 8000be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bea:	4798      	blx	r3
 8000bec:	3601      	adds	r6, #1
 8000bee:	e7f2      	b.n	8000bd6 <__libc_init_array+0x1e>
 8000bf0:	08000c18 	.word	0x08000c18
 8000bf4:	08000c18 	.word	0x08000c18
 8000bf8:	08000c18 	.word	0x08000c18
 8000bfc:	08000c1c 	.word	0x08000c1c

08000c00 <_init>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr

08000c0c <_fini>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr
