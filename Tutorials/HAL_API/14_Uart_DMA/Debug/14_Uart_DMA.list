
14_Uart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002260  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002448  08002448  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002450  08002450  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002454  08002454  00012454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000018  08002470  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002470  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ffb  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e2  00000000  00000000  00026043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00027428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00027a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149d9  00000000  00000000  00027f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000076f7  00000000  00000000  0003c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082639  00000000  00000000  00044048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001768  00000000  00000000  000c66d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080023e0 	.word	0x080023e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080023e0 	.word	0x080023e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_Init+0x40>)
 80004e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_Init+0x40>)
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_Init+0x40>)
 80004fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f933 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	200f      	movs	r0, #15
 800050c:	f000 f810 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f000 f806 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40023c00 	.word	0x40023c00

08000520 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f943 	bl	80007da <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f90b 	bl	8000786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000014 	.word	0x20000014
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000034 	.word	0x20000034

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000034 	.word	0x20000034

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <__NVIC_EnableIRQ+0x38>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e100 	.word	0xe000e100

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	; (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f7ff ff8e 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff29 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff3e 	bl	8000618 <__NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff8e 	bl	80006c4 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5d 	bl	8000670 <__NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff31 	bl	8000634 <__NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff feda 	bl	80005b8 <HAL_GetTick>
 8000804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e099      	b.n	8000944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2202      	movs	r2, #2
 800081c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f022 0201 	bic.w	r2, r2, #1
 800082e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000830:	e00f      	b.n	8000852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000832:	f7ff fec1 	bl	80005b8 <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b05      	cmp	r3, #5
 800083e:	d908      	bls.n	8000852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2220      	movs	r2, #32
 8000844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2203      	movs	r2, #3
 800084a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800084e:	2303      	movs	r3, #3
 8000850:	e078      	b.n	8000944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e8      	bne.n	8000832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <HAL_DMA_Init+0x158>)
 800086c:	4013      	ands	r3, r2
 800086e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a1b      	ldr	r3, [r3, #32]
 800089c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d107      	bne.n	80008bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4313      	orrs	r3, r2
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f023 0307 	bic.w	r3, r3, #7
 80008d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	4313      	orrs	r3, r2
 80008dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d117      	bne.n	8000916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00e      	beq.n	8000916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fa6f 	bl	8000ddc <DMA_CheckFifoParam>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d008      	beq.n	8000916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000912:	2301      	movs	r3, #1
 8000914:	e016      	b.n	8000944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fa26 	bl	8000d70 <DMA_CalcBaseAndBitshift>
 8000924:	4603      	mov	r3, r0
 8000926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800092c:	223f      	movs	r2, #63	; 0x3f
 800092e:	409a      	lsls	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	f010803f 	.word	0xf010803f

08000950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <HAL_DMA_Start_IT+0x26>
 8000972:	2302      	movs	r3, #2
 8000974:	e040      	b.n	80009f8 <HAL_DMA_Start_IT+0xa8>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b01      	cmp	r3, #1
 8000988:	d12f      	bne.n	80009ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2202      	movs	r2, #2
 800098e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2200      	movs	r2, #0
 8000996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f000 f9b8 	bl	8000d14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a8:	223f      	movs	r2, #63	; 0x3f
 80009aa:	409a      	lsls	r2, r3
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0216 	orr.w	r2, r2, #22
 80009be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d007      	beq.n	80009d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f042 0208 	orr.w	r2, r2, #8
 80009d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0201 	orr.w	r2, r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e005      	b.n	80009f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009f2:	2302      	movs	r3, #2
 80009f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a0c:	4b8e      	ldr	r3, [pc, #568]	; (8000c48 <HAL_DMA_IRQHandler+0x248>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a8e      	ldr	r2, [pc, #568]	; (8000c4c <HAL_DMA_IRQHandler+0x24c>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0a9b      	lsrs	r3, r3, #10
 8000a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d01a      	beq.n	8000a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d013      	beq.n	8000a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0204 	bic.w	r2, r2, #4
 8000a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	2208      	movs	r2, #8
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a64:	f043 0201 	orr.w	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	2201      	movs	r2, #1
 8000a72:	409a      	lsls	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d012      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00b      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	2201      	movs	r2, #1
 8000a90:	409a      	lsls	r2, r3
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9a:	f043 0202 	orr.w	r2, r3, #2
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d012      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad0:	f043 0204 	orr.w	r2, r3, #4
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	2210      	movs	r2, #16
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d043      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d03c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afa:	2210      	movs	r2, #16
 8000afc:	409a      	lsls	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d018      	beq.n	8000b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d108      	bne.n	8000b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d024      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
 8000b2e:	e01f      	b.n	8000b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01b      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	4798      	blx	r3
 8000b40:	e016      	b.n	8000b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d107      	bne.n	8000b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0208 	bic.w	r2, r2, #8
 8000b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b74:	2220      	movs	r2, #32
 8000b76:	409a      	lsls	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 808f 	beq.w	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 8087 	beq.w	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b96:	2220      	movs	r2, #32
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d136      	bne.n	8000c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0216 	bic.w	r2, r2, #22
 8000bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <HAL_DMA_IRQHandler+0x1da>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0208 	bic.w	r2, r2, #8
 8000be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bee:	223f      	movs	r2, #63	; 0x3f
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d07e      	beq.n	8000d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
        }
        return;
 8000c16:	e079      	b.n	8000d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d01d      	beq.n	8000c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10d      	bne.n	8000c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d031      	beq.n	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4798      	blx	r3
 8000c44:	e02c      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
 8000c46:	bf00      	nop
 8000c48:	20000014 	.word	0x20000014
 8000c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4798      	blx	r3
 8000c60:	e01e      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10f      	bne.n	8000c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0210 	bic.w	r2, r2, #16
 8000c7e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d032      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d022      	beq.n	8000cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2205      	movs	r2, #5
 8000cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d307      	bcc.n	8000ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f2      	bne.n	8000ccc <HAL_DMA_IRQHandler+0x2cc>
 8000ce6:	e000      	b.n	8000cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000ce8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	4798      	blx	r3
 8000d0a:	e000      	b.n	8000d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8000d0c:	bf00      	nop
    }
  }
}
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b40      	cmp	r3, #64	; 0x40
 8000d40:	d108      	bne.n	8000d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d52:	e007      	b.n	8000d64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	60da      	str	r2, [r3, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3b10      	subs	r3, #16
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d909      	bls.n	8000db2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	1d1a      	adds	r2, r3, #4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
 8000db0:	e007      	b.n	8000dc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	aaaaaaab 	.word	0xaaaaaaab
 8000dd8:	08002438 	.word	0x08002438

08000ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d11f      	bne.n	8000e36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d856      	bhi.n	8000eaa <DMA_CheckFifoParam+0xce>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <DMA_CheckFifoParam+0x28>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e27 	.word	0x08000e27
 8000e0c:	08000e15 	.word	0x08000e15
 8000e10:	08000eab 	.word	0x08000eab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d046      	beq.n	8000eae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e24:	e043      	b.n	8000eae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e2e:	d140      	bne.n	8000eb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e34:	e03d      	b.n	8000eb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e3e:	d121      	bne.n	8000e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d837      	bhi.n	8000eb6 <DMA_CheckFifoParam+0xda>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <DMA_CheckFifoParam+0x70>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e5d 	.word	0x08000e5d
 8000e50:	08000e63 	.word	0x08000e63
 8000e54:	08000e5d 	.word	0x08000e5d
 8000e58:	08000e75 	.word	0x08000e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e60:	e030      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d025      	beq.n	8000eba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e72:	e022      	b.n	8000eba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e7c:	d11f      	bne.n	8000ebe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e82:	e01c      	b.n	8000ebe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d903      	bls.n	8000e92 <DMA_CheckFifoParam+0xb6>
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d003      	beq.n	8000e98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e90:	e018      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
      break;
 8000e96:	e015      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00e      	beq.n	8000ec2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8000ea8:	e00b      	b.n	8000ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e00a      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eae:	bf00      	nop
 8000eb0:	e008      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eb2:	bf00      	nop
 8000eb4:	e006      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e004      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8000eba:	bf00      	nop
 8000ebc:	e002      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;   
 8000ebe:	bf00      	nop
 8000ec0:	e000      	b.n	8000ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8000ec2:	bf00      	nop
    }
  } 
  
  return status; 
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e159      	b.n	80011a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8148 	bne.w	800119e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d00b      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f22:	2b11      	cmp	r3, #17
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0xfc>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a2 	beq.w	800119e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x202>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1fe>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_GPIO_Init+0x300>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1f2>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f aea2 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000014 	.word	0x20000014

080011f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f8:	f7ff fff0 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	0a9b      	lsrs	r3, r3, #10
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	4903      	ldr	r1, [pc, #12]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800120a:	5ccb      	ldrb	r3, [r1, r3]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	08002440 	.word	0x08002440

0800121c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001220:	f7ff ffdc 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 8001224:	4602      	mov	r2, r0
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	0b5b      	lsrs	r3, r3, #13
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	4903      	ldr	r1, [pc, #12]	; (8001240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	08002440 	.word	0x08002440

08001244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e03f      	b.n	80012d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f837 	bl	80012de <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2224      	movs	r2, #36	; 0x24
 8001274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fa49 	bl	8001720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800129c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2220      	movs	r2, #32
 80012c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2220      	movs	r2, #32
 80012d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b20      	cmp	r3, #32
 800130c:	d153      	bne.n	80013b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_UART_Transmit_DMA+0x26>
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e04c      	b.n	80013b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_UART_Transmit_DMA+0x38>
 8001328:	2302      	movs	r3, #2
 800132a:	e045      	b.n	80013b8 <HAL_UART_Transmit_DMA+0xc4>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2221      	movs	r2, #33	; 0x21
 8001350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_Transmit_DMA+0xcc>)
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_UART_Transmit_DMA+0xd0>)
 8001362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_UART_Transmit_DMA+0xd4>)
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	2200      	movs	r2, #0
 8001372:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	6819      	ldr	r1, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3304      	adds	r3, #4
 8001388:	461a      	mov	r2, r3
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	f7ff fae0 	bl	8000950 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001398:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
  }
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	08001531 	.word	0x08001531
 80013c4:	08001583 	.word	0x08001583
 80013c8:	08001623 	.word	0x08001623

080013cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d166      	bne.n	80014b4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_UART_Receive_DMA+0x26>
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e05f      	b.n	80014b6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_UART_Receive_DMA+0x38>
 8001400:	2302      	movs	r3, #2
 8001402:	e058      	b.n	80014b6 <HAL_UART_Receive_DMA+0xea>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2222      	movs	r2, #34	; 0x22
 8001422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <HAL_UART_Receive_DMA+0xf4>)
 800142c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_UART_Receive_DMA+0xf8>)
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_UART_Receive_DMA+0xfc>)
 800143c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2200      	movs	r2, #0
 8001444:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3304      	adds	r3, #4
 8001456:	4619      	mov	r1, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	f7ff fa77 	bl	8000950 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e000      	b.n	80014b6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80014b4:	2302      	movs	r3, #2
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800159f 	.word	0x0800159f
 80014c4:	08001607 	.word	0x08001607
 80014c8:	08001623 	.word	0x08001623

080014cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d113      	bne.n	8001574 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001560:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001570:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001572:	e002      	b.n	800157a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff ffa9 	bl	80014cc <HAL_UART_TxCpltCallback>
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff ffa5 	bl	80014e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11e      	bne.n	80015f8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ce:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ee:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff ff7b 	bl	80014f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff77 	bl	8001508 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	2b80      	cmp	r3, #128	; 0x80
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b21      	cmp	r3, #33	; 0x21
 8001654:	d108      	bne.n	8001668 <UART_DMAError+0x46>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2200      	movs	r2, #0
 8001660:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f000 f827 	bl	80016b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001672:	2b40      	cmp	r3, #64	; 0x40
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b22      	cmp	r3, #34	; 0x22
 8001688:	d108      	bne.n	800169c <UART_DMAError+0x7a>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2200      	movs	r2, #0
 8001694:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f000 f823 	bl	80016e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80016a8:	68b8      	ldr	r0, [r7, #8]
 80016aa:	f7ff ff37 	bl	800151c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80016cc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001724:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001728:	af00      	add	r7, sp, #0
 800172a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800172e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800173a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800173e:	68d9      	ldr	r1, [r3, #12]
 8001740:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	ea40 0301 	orr.w	r3, r0, r1
 800174a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800174c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	431a      	orrs	r2, r3
 800175a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	431a      	orrs	r2, r3
 8001762:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800176e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800177a:	f021 010c 	bic.w	r1, r1, #12
 800177e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001788:	430b      	orrs	r3, r1
 800178a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800178c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001798:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800179c:	6999      	ldr	r1, [r3, #24]
 800179e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	ea40 0301 	orr.w	r3, r0, r1
 80017a8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b4:	f040 824a 	bne.w	8001c4c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <UART_SetConfig+0x2f8>)
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d006      	beq.n	80017d2 <UART_SetConfig+0xb2>
 80017c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <UART_SetConfig+0x2fc>)
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8129 	bne.w	8001a24 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80017d2:	f7ff fd23 	bl	800121c <HAL_RCC_GetPCLK2Freq>
 80017d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80017da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017de:	2200      	movs	r2, #0
 80017e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80017e4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80017e8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80017ec:	4622      	mov	r2, r4
 80017ee:	462b      	mov	r3, r5
 80017f0:	1891      	adds	r1, r2, r2
 80017f2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80017f6:	415b      	adcs	r3, r3
 80017f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017fc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001800:	4621      	mov	r1, r4
 8001802:	1851      	adds	r1, r2, r1
 8001804:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001808:	4629      	mov	r1, r5
 800180a:	414b      	adcs	r3, r1
 800180c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800181c:	4649      	mov	r1, r9
 800181e:	00cb      	lsls	r3, r1, #3
 8001820:	4641      	mov	r1, r8
 8001822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001826:	4641      	mov	r1, r8
 8001828:	00ca      	lsls	r2, r1, #3
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	4603      	mov	r3, r0
 8001830:	4622      	mov	r2, r4
 8001832:	189b      	adds	r3, r3, r2
 8001834:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001838:	462b      	mov	r3, r5
 800183a:	460a      	mov	r2, r1
 800183c:	eb42 0303 	adc.w	r3, r2, r3
 8001840:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001850:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001854:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001858:	460b      	mov	r3, r1
 800185a:	18db      	adds	r3, r3, r3
 800185c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001860:	4613      	mov	r3, r2
 8001862:	eb42 0303 	adc.w	r3, r2, r3
 8001866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800186a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800186e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001872:	f7fe fcb1 	bl	80001d8 <__aeabi_uldivmod>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <UART_SetConfig+0x300>)
 800187c:	fba3 2302 	umull	r2, r3, r3, r2
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	011c      	lsls	r4, r3, #4
 8001884:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001888:	2200      	movs	r2, #0
 800188a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800188e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001892:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8001896:	4642      	mov	r2, r8
 8001898:	464b      	mov	r3, r9
 800189a:	1891      	adds	r1, r2, r2
 800189c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80018a0:	415b      	adcs	r3, r3
 80018a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80018a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80018aa:	4641      	mov	r1, r8
 80018ac:	1851      	adds	r1, r2, r1
 80018ae:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80018b2:	4649      	mov	r1, r9
 80018b4:	414b      	adcs	r3, r1
 80018b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80018c6:	4659      	mov	r1, fp
 80018c8:	00cb      	lsls	r3, r1, #3
 80018ca:	4651      	mov	r1, sl
 80018cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018d0:	4651      	mov	r1, sl
 80018d2:	00ca      	lsls	r2, r1, #3
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	4603      	mov	r3, r0
 80018da:	4642      	mov	r2, r8
 80018dc:	189b      	adds	r3, r3, r2
 80018de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80018e2:	464b      	mov	r3, r9
 80018e4:	460a      	mov	r2, r1
 80018e6:	eb42 0303 	adc.w	r3, r2, r3
 80018ea:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80018ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018fa:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80018fe:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001902:	460b      	mov	r3, r1
 8001904:	18db      	adds	r3, r3, r3
 8001906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800190a:	4613      	mov	r3, r2
 800190c:	eb42 0303 	adc.w	r3, r2, r3
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001914:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001918:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800191c:	f7fe fc5c 	bl	80001d8 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4611      	mov	r1, r2
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <UART_SetConfig+0x300>)
 8001928:	fba3 2301 	umull	r2, r3, r3, r1
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	2264      	movs	r2, #100	; 0x64
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	1acb      	subs	r3, r1, r3
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <UART_SetConfig+0x300>)
 800193e:	fba3 2302 	umull	r2, r3, r3, r2
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800194a:	441c      	add	r4, r3
 800194c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001950:	2200      	movs	r2, #0
 8001952:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001956:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800195a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800195e:	4642      	mov	r2, r8
 8001960:	464b      	mov	r3, r9
 8001962:	1891      	adds	r1, r2, r2
 8001964:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001968:	415b      	adcs	r3, r3
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800196e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001972:	4641      	mov	r1, r8
 8001974:	1851      	adds	r1, r2, r1
 8001976:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800197a:	4649      	mov	r1, r9
 800197c:	414b      	adcs	r3, r1
 800197e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800198e:	4659      	mov	r1, fp
 8001990:	00cb      	lsls	r3, r1, #3
 8001992:	4651      	mov	r1, sl
 8001994:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001998:	4651      	mov	r1, sl
 800199a:	00ca      	lsls	r2, r1, #3
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	4642      	mov	r2, r8
 80019a4:	189b      	adds	r3, r3, r2
 80019a6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80019aa:	464b      	mov	r3, r9
 80019ac:	460a      	mov	r2, r1
 80019ae:	eb42 0303 	adc.w	r3, r2, r3
 80019b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80019c2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80019c6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80019ca:	460b      	mov	r3, r1
 80019cc:	18db      	adds	r3, r3, r3
 80019ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019d2:	4613      	mov	r3, r2
 80019d4:	eb42 0303 	adc.w	r3, r2, r3
 80019d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019dc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019e0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80019e4:	f7fe fbf8 	bl	80001d8 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <UART_SetConfig+0x300>)
 80019ee:	fba3 1302 	umull	r1, r3, r3, r2
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2164      	movs	r1, #100	; 0x64
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	3332      	adds	r3, #50	; 0x32
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <UART_SetConfig+0x300>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	f003 0207 	and.w	r2, r3, #7
 8001a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4422      	add	r2, r4
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	e349      	b.n	80020ac <UART_SetConfig+0x98c>
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a24:	f7ff fbe6 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8001a28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001a2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a30:	2200      	movs	r2, #0
 8001a32:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a36:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001a3a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001a3e:	4622      	mov	r2, r4
 8001a40:	462b      	mov	r3, r5
 8001a42:	1891      	adds	r1, r2, r2
 8001a44:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001a48:	415b      	adcs	r3, r3
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a52:	4621      	mov	r1, r4
 8001a54:	eb12 0a01 	adds.w	sl, r2, r1
 8001a58:	4629      	mov	r1, r5
 8001a5a:	eb43 0b01 	adc.w	fp, r3, r1
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a72:	4692      	mov	sl, r2
 8001a74:	469b      	mov	fp, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	eb1a 0303 	adds.w	r3, sl, r3
 8001a7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a80:	462b      	mov	r3, r5
 8001a82:	eb4b 0303 	adc.w	r3, fp, r3
 8001a86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001a96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a9a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	18db      	adds	r3, r3, r3
 8001aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	eb42 0303 	adc.w	r3, r2, r3
 8001aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ab0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001ab4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001ab8:	f7fe fb8e 	bl	80001d8 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <UART_SetConfig+0x528>)
 8001ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	011c      	lsls	r4, r3, #4
 8001aca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ad4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001ad8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001adc:	4642      	mov	r2, r8
 8001ade:	464b      	mov	r3, r9
 8001ae0:	1891      	adds	r1, r2, r2
 8001ae2:	67b9      	str	r1, [r7, #120]	; 0x78
 8001ae4:	415b      	adcs	r3, r3
 8001ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ae8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001aec:	4641      	mov	r1, r8
 8001aee:	1851      	adds	r1, r2, r1
 8001af0:	6739      	str	r1, [r7, #112]	; 0x70
 8001af2:	4649      	mov	r1, r9
 8001af4:	414b      	adcs	r3, r1
 8001af6:	677b      	str	r3, [r7, #116]	; 0x74
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001b04:	4659      	mov	r1, fp
 8001b06:	00cb      	lsls	r3, r1, #3
 8001b08:	4651      	mov	r1, sl
 8001b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b0e:	4651      	mov	r1, sl
 8001b10:	00ca      	lsls	r2, r1, #3
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	4642      	mov	r2, r8
 8001b1a:	189b      	adds	r3, r3, r2
 8001b1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b20:	464b      	mov	r3, r9
 8001b22:	460a      	mov	r2, r1
 8001b24:	eb42 0303 	adc.w	r3, r2, r3
 8001b28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001b2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b38:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001b3c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001b40:	460b      	mov	r3, r1
 8001b42:	18db      	adds	r3, r3, r3
 8001b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b46:	4613      	mov	r3, r2
 8001b48:	eb42 0303 	adc.w	r3, r2, r3
 8001b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b4e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b52:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001b56:	f7fe fb3f 	bl	80001d8 <__aeabi_uldivmod>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <UART_SetConfig+0x528>)
 8001b62:	fba3 2301 	umull	r2, r3, r3, r1
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2264      	movs	r2, #100	; 0x64
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <UART_SetConfig+0x528>)
 8001b78:	fba3 2302 	umull	r2, r3, r3, r2
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b84:	441c      	add	r4, r3
 8001b86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001b90:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b94:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	1891      	adds	r1, r2, r2
 8001b9e:	6639      	str	r1, [r7, #96]	; 0x60
 8001ba0:	415b      	adcs	r3, r3
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ba4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ba8:	4641      	mov	r1, r8
 8001baa:	1851      	adds	r1, r2, r1
 8001bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bae:	4649      	mov	r1, r9
 8001bb0:	414b      	adcs	r3, r1
 8001bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001bc0:	4659      	mov	r1, fp
 8001bc2:	00cb      	lsls	r3, r1, #3
 8001bc4:	4651      	mov	r1, sl
 8001bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bca:	4651      	mov	r1, sl
 8001bcc:	00ca      	lsls	r2, r1, #3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4642      	mov	r2, r8
 8001bd6:	189b      	adds	r3, r3, r2
 8001bd8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bdc:	464b      	mov	r3, r9
 8001bde:	460a      	mov	r2, r1
 8001be0:	eb42 0303 	adc.w	r3, r2, r3
 8001be4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001be8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001bf4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001bf8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	18db      	adds	r3, r3, r3
 8001c00:	653b      	str	r3, [r7, #80]	; 0x50
 8001c02:	4613      	mov	r3, r2
 8001c04:	eb42 0303 	adc.w	r3, r2, r3
 8001c08:	657b      	str	r3, [r7, #84]	; 0x54
 8001c0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c0e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001c12:	f7fe fae1 	bl	80001d8 <__aeabi_uldivmod>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <UART_SetConfig+0x528>)
 8001c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	2164      	movs	r1, #100	; 0x64
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	3332      	adds	r3, #50	; 0x32
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <UART_SetConfig+0x528>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4422      	add	r2, r4
 8001c42:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001c44:	e232      	b.n	80020ac <UART_SetConfig+0x98c>
 8001c46:	bf00      	nop
 8001c48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b8d      	ldr	r3, [pc, #564]	; (8001e88 <UART_SetConfig+0x768>)
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d006      	beq.n	8001c66 <UART_SetConfig+0x546>
 8001c58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <UART_SetConfig+0x76c>)
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8117 	bne.w	8001e94 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c66:	f7ff fad9 	bl	800121c <HAL_RCC_GetPCLK2Freq>
 8001c6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001c78:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001c7c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001c80:	4622      	mov	r2, r4
 8001c82:	462b      	mov	r3, r5
 8001c84:	1891      	adds	r1, r2, r2
 8001c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c88:	415b      	adcs	r3, r3
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c90:	4621      	mov	r1, r4
 8001c92:	eb12 0801 	adds.w	r8, r2, r1
 8001c96:	4629      	mov	r1, r5
 8001c98:	eb43 0901 	adc.w	r9, r3, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb0:	4690      	mov	r8, r2
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	eb18 0303 	adds.w	r3, r8, r3
 8001cba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	eb49 0303 	adc.w	r3, r9, r3
 8001cc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001cc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cd4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	008b      	lsls	r3, r1, #2
 8001ce8:	4621      	mov	r1, r4
 8001cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cee:	4621      	mov	r1, r4
 8001cf0:	008a      	lsls	r2, r1, #2
 8001cf2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001cf6:	f7fe fa6f 	bl	80001d8 <__aeabi_uldivmod>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <UART_SetConfig+0x770>)
 8001d00:	fba3 2302 	umull	r2, r3, r3, r2
 8001d04:	095b      	lsrs	r3, r3, #5
 8001d06:	011c      	lsls	r4, r3, #4
 8001d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001d12:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d16:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001d1a:	4642      	mov	r2, r8
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	1891      	adds	r1, r2, r2
 8001d20:	6439      	str	r1, [r7, #64]	; 0x40
 8001d22:	415b      	adcs	r3, r3
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
 8001d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	1851      	adds	r1, r2, r1
 8001d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d30:	4649      	mov	r1, r9
 8001d32:	414b      	adcs	r3, r1
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001d42:	4659      	mov	r1, fp
 8001d44:	00cb      	lsls	r3, r1, #3
 8001d46:	4651      	mov	r1, sl
 8001d48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	00ca      	lsls	r2, r1, #3
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	4642      	mov	r2, r8
 8001d58:	189b      	adds	r3, r3, r2
 8001d5a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001d5e:	464b      	mov	r3, r9
 8001d60:	460a      	mov	r2, r1
 8001d62:	eb42 0303 	adc.w	r3, r2, r3
 8001d66:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001d6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d76:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001d86:	4649      	mov	r1, r9
 8001d88:	008b      	lsls	r3, r1, #2
 8001d8a:	4641      	mov	r1, r8
 8001d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d90:	4641      	mov	r1, r8
 8001d92:	008a      	lsls	r2, r1, #2
 8001d94:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001d98:	f7fe fa1e 	bl	80001d8 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <UART_SetConfig+0x770>)
 8001da2:	fba3 1302 	umull	r1, r3, r3, r2
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2164      	movs	r1, #100	; 0x64
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	3332      	adds	r3, #50	; 0x32
 8001db4:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <UART_SetConfig+0x770>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc0:	441c      	add	r4, r3
 8001dc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001dcc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001dd0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	1891      	adds	r1, r2, r2
 8001dda:	6339      	str	r1, [r7, #48]	; 0x30
 8001ddc:	415b      	adcs	r3, r3
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
 8001de0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001de4:	4641      	mov	r1, r8
 8001de6:	1851      	adds	r1, r2, r1
 8001de8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dea:	4649      	mov	r1, r9
 8001dec:	414b      	adcs	r3, r1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	00cb      	lsls	r3, r1, #3
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e06:	4651      	mov	r1, sl
 8001e08:	00ca      	lsls	r2, r1, #3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4642      	mov	r2, r8
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e18:	464b      	mov	r3, r9
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	eb42 0303 	adc.w	r3, r2, r3
 8001e20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e30:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001e40:	4649      	mov	r1, r9
 8001e42:	008b      	lsls	r3, r1, #2
 8001e44:	4641      	mov	r1, r8
 8001e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	008a      	lsls	r2, r1, #2
 8001e4e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001e52:	f7fe f9c1 	bl	80001d8 <__aeabi_uldivmod>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <UART_SetConfig+0x770>)
 8001e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	2164      	movs	r1, #100	; 0x64
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	3332      	adds	r3, #50	; 0x32
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <UART_SetConfig+0x770>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4422      	add	r2, r4
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	e112      	b.n	80020ac <UART_SetConfig+0x98c>
 8001e86:	bf00      	nop
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e94:	f7ff f9ae 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8001e98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001ea6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001eaa:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001eae:	4642      	mov	r2, r8
 8001eb0:	464b      	mov	r3, r9
 8001eb2:	1891      	adds	r1, r2, r2
 8001eb4:	6239      	str	r1, [r7, #32]
 8001eb6:	415b      	adcs	r3, r3
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	1854      	adds	r4, r2, r1
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	eb43 0501 	adc.w	r5, r3, r1
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	00eb      	lsls	r3, r5, #3
 8001ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed6:	00e2      	lsls	r2, r4, #3
 8001ed8:	4614      	mov	r4, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4643      	mov	r3, r8
 8001ede:	18e3      	adds	r3, r4, r3
 8001ee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	eb45 0303 	adc.w	r3, r5, r3
 8001eea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001eee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001efa:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	008b      	lsls	r3, r1, #2
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f14:	4621      	mov	r1, r4
 8001f16:	008a      	lsls	r2, r1, #2
 8001f18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001f1c:	f7fe f95c 	bl	80001d8 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <UART_SetConfig+0x998>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	011c      	lsls	r4, r3, #4
 8001f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f38:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001f3c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	1891      	adds	r1, r2, r2
 8001f46:	61b9      	str	r1, [r7, #24]
 8001f48:	415b      	adcs	r3, r3
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f50:	4641      	mov	r1, r8
 8001f52:	1851      	adds	r1, r2, r1
 8001f54:	6139      	str	r1, [r7, #16]
 8001f56:	4649      	mov	r1, r9
 8001f58:	414b      	adcs	r3, r1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f68:	4659      	mov	r1, fp
 8001f6a:	00cb      	lsls	r3, r1, #3
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f72:	4651      	mov	r1, sl
 8001f74:	00ca      	lsls	r2, r1, #3
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	189b      	adds	r3, r3, r2
 8001f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001f84:	464b      	mov	r3, r9
 8001f86:	460a      	mov	r2, r1
 8001f88:	eb42 0303 	adc.w	r3, r2, r3
 8001f8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001f9c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001fac:	4649      	mov	r1, r9
 8001fae:	008b      	lsls	r3, r1, #2
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	008a      	lsls	r2, r1, #2
 8001fba:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001fbe:	f7fe f90b 	bl	80001d8 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <UART_SetConfig+0x998>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2164      	movs	r1, #100	; 0x64
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	3332      	adds	r3, #50	; 0x32
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <UART_SetConfig+0x998>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe6:	441c      	add	r4, r3
 8001fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fec:	2200      	movs	r2, #0
 8001fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ff6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001ffa:	4642      	mov	r2, r8
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	1891      	adds	r1, r2, r2
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	415b      	adcs	r3, r3
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	4641      	mov	r1, r8
 800200c:	1851      	adds	r1, r2, r1
 800200e:	6039      	str	r1, [r7, #0]
 8002010:	4649      	mov	r1, r9
 8002012:	414b      	adcs	r3, r1
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002022:	4659      	mov	r1, fp
 8002024:	00cb      	lsls	r3, r1, #3
 8002026:	4651      	mov	r1, sl
 8002028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800202c:	4651      	mov	r1, sl
 800202e:	00ca      	lsls	r2, r1, #3
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	4603      	mov	r3, r0
 8002036:	4642      	mov	r2, r8
 8002038:	189b      	adds	r3, r3, r2
 800203a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800203e:	464b      	mov	r3, r9
 8002040:	460a      	mov	r2, r1
 8002042:	eb42 0303 	adc.w	r3, r2, r3
 8002046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800204a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002056:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002066:	4649      	mov	r1, r9
 8002068:	008b      	lsls	r3, r1, #2
 800206a:	4641      	mov	r1, r8
 800206c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002070:	4641      	mov	r1, r8
 8002072:	008a      	lsls	r2, r1, #2
 8002074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002078:	f7fe f8ae 	bl	80001d8 <__aeabi_uldivmod>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <UART_SetConfig+0x998>)
 8002082:	fba3 1302 	umull	r1, r3, r3, r2
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2164      	movs	r1, #100	; 0x64
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	3332      	adds	r3, #50	; 0x32
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <UART_SetConfig+0x998>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4422      	add	r2, r4
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	e7ff      	b.n	80020ac <UART_SetConfig+0x98c>
 80020ac:	bf00      	nop
 80020ae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020b2:	46bd      	mov	sp, r7
 80020b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b8:	51eb851f 	.word	0x51eb851f

080020bc <dma_config>:

DMA_HandleTypeDef hdma_uart1_tx;
DMA_HandleTypeDef hdma_uart1_rx;

void dma_config(DMA_Struct_t DMA_Uart_Tx, DMA_Struct_t DMA_Uart_Rx, UART_HandleTypeDef* huart)
{
 80020bc:	b084      	sub	sp, #16
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	f107 0c10 	add.w	ip, r7, #16
 80020c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Enable Clock Access
	__HAL_RCC_DMA2_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <dma_config+0xf8>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <dma_config+0xf8>)
 80020d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <dma_config+0xf8>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]

	// UART TX DMA2 STREAM7
	hdma_uart1_tx.Instance 	     		   = DMA2_Stream7;
 80020e8:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <dma_config+0xfc>)
 80020ea:	4a34      	ldr	r2, [pc, #208]	; (80021bc <dma_config+0x100>)
 80020ec:	601a      	str	r2, [r3, #0]
	hdma_uart1_tx.Init.Channel   		   = DMA_Uart_Tx.DMAChannel;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <dma_config+0xfc>)
 80020f2:	6053      	str	r3, [r2, #4]
	hdma_uart1_tx.Init.Direction 		   = DMA_MEMORY_TO_PERIPH;
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <dma_config+0xfc>)
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	609a      	str	r2, [r3, #8]
	hdma_uart1_tx.Init.PeriphInc 		   = DMA_Uart_Tx.PeriphInc;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <dma_config+0xfc>)
 80020fe:	60d3      	str	r3, [r2, #12]
	hdma_uart1_tx.Init.MemInc	 		   = DMA_Uart_Tx.MemInc;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <dma_config+0xfc>)
 8002104:	6113      	str	r3, [r2, #16]
	hdma_uart1_tx.Init.PeriphDataAlignment = DMA_Uart_Tx.PeriphDataAlignment;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <dma_config+0xfc>)
 800210a:	6153      	str	r3, [r2, #20]
	hdma_uart1_tx.Init.MemDataAlignment    = DMA_Uart_Tx.MemDataAlignment;
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <dma_config+0xfc>)
 8002110:	6193      	str	r3, [r2, #24]
	hdma_uart1_tx.Init.Mode				   = DMA_Uart_Tx.Mode;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <dma_config+0xfc>)
 8002116:	61d3      	str	r3, [r2, #28]
	hdma_uart1_tx.Init.Priority            = DMA_Uart_Tx.Priority;
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	4a27      	ldr	r2, [pc, #156]	; (80021b8 <dma_config+0xfc>)
 800211c:	6213      	str	r3, [r2, #32]
	hdma_uart1_tx.Init.FIFOMode 		   = DMA_FIFOMODE_DISABLE;
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <dma_config+0xfc>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_DMA_Init(&hdma_uart1_tx);
 8002124:	4824      	ldr	r0, [pc, #144]	; (80021b8 <dma_config+0xfc>)
 8002126:	f7fe fb65 	bl	80007f4 <HAL_DMA_Init>

	// Link Uart1 TX to DMA
	huart->hdmatx = &hdma_uart1_tx;
 800212a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <dma_config+0xfc>)
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart1_tx.Parent = huart;
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <dma_config+0xfc>)
 8002132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002134:	6393      	str	r3, [r2, #56]	; 0x38

	// UART RX DMA2 STREAM5
	hdma_uart1_rx.Instance 	     		   = DMA2_Stream5;
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <dma_config+0x104>)
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <dma_config+0x108>)
 800213a:	601a      	str	r2, [r3, #0]
	hdma_uart1_rx.Init.Channel   		   = DMA_Uart_Rx.DMAChannel;
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <dma_config+0x104>)
 8002140:	6053      	str	r3, [r2, #4]
	hdma_uart1_rx.Init.Direction 		   = DMA_PERIPH_TO_MEMORY;
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <dma_config+0x104>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
	hdma_uart1_rx.Init.PeriphInc 		   = DMA_Uart_Rx.PeriphInc;
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <dma_config+0x104>)
 800214c:	60d3      	str	r3, [r2, #12]
	hdma_uart1_rx.Init.MemInc	 		   = DMA_Uart_Rx.MemInc;
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <dma_config+0x104>)
 8002152:	6113      	str	r3, [r2, #16]
	hdma_uart1_rx.Init.PeriphDataAlignment = DMA_Uart_Rx.PeriphDataAlignment;
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <dma_config+0x104>)
 8002158:	6153      	str	r3, [r2, #20]
	hdma_uart1_rx.Init.MemDataAlignment    = DMA_Uart_Rx.MemDataAlignment;
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <dma_config+0x104>)
 800215e:	6193      	str	r3, [r2, #24]
	hdma_uart1_rx.Init.Mode				   = DMA_Uart_Rx.Mode;
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <dma_config+0x104>)
 8002164:	61d3      	str	r3, [r2, #28]
	hdma_uart1_rx.Init.Priority            = DMA_Uart_Rx.Priority;
 8002166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <dma_config+0x104>)
 800216a:	6213      	str	r3, [r2, #32]
	hdma_uart1_rx.Init.FIFOMode 		   = DMA_FIFOMODE_DISABLE;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <dma_config+0x104>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_DMA_Init(&hdma_uart1_rx);
 8002172:	4813      	ldr	r0, [pc, #76]	; (80021c0 <dma_config+0x104>)
 8002174:	f7fe fb3e 	bl	80007f4 <HAL_DMA_Init>

	// Link Uart1 RX to DMA
	huart->hdmarx = &hdma_uart1_rx;
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <dma_config+0x104>)
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
	hdma_uart1_rx.Parent = huart;
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <dma_config+0x104>)
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	6393      	str	r3, [r2, #56]	; 0x38

	/* DMA2 STREAM7 IRQn Configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2046      	movs	r0, #70	; 0x46
 800218a:	f7fe fafc 	bl	8000786 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800218e:	2046      	movs	r0, #70	; 0x46
 8002190:	f7fe fb15 	bl	80007be <HAL_NVIC_EnableIRQ>

	/* DMA2 STREAM5 IRQn Configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2044      	movs	r0, #68	; 0x44
 800219a:	f7fe faf4 	bl	8000786 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800219e:	2044      	movs	r0, #68	; 0x44
 80021a0:	f7fe fb0d 	bl	80007be <HAL_NVIC_EnableIRQ>

}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ae:	b004      	add	sp, #16
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	20000038 	.word	0x20000038
 80021bc:	400264b8 	.word	0x400264b8
 80021c0:	20000098 	.word	0x20000098
 80021c4:	40026488 	.word	0x40026488

080021c8 <DMA2_Stream5_IRQHandler>:



void DMA2_Stream5_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart1_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream5_IRQHandler+0x10>)
 80021ce:	f7fe fc17 	bl	8000a00 <HAL_DMA_IRQHandler>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000098 	.word	0x20000098

080021dc <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart1_tx);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <DMA2_Stream7_IRQHandler+0x10>)
 80021e2:	f7fe fc0d 	bl	8000a00 <HAL_DMA_IRQHandler>
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000038 	.word	0x20000038

080021f0 <main>:

uint8_t txBuffer[] = {10,20,30,40,50,60,70,80,90,100};
uint8_t rxBuffer[BUFFER_SIZE];

int main()
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b09e      	sub	sp, #120	; 0x78
 80021f4:	af0e      	add	r7, sp, #56	; 0x38

  HAL_Init();
 80021f6:	f7fe f971 	bl	80004dc <HAL_Init>
  uart_init();
 80021fa:	f000 f843 	bl	8002284 <uart_init>
  DMA_Struct_t DMA_Uart_Tx={DMA_CHANNEL_4, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_WORD,
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <main+0x74>)
 8002200:	f107 0420 	add.w	r4, r7, #32
 8002204:	461d      	mov	r5, r3
 8002206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800220e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			DMA_MDATAALIGN_WORD, DMA_NORMAL, DMA_PRIORITY_LOW, DMA_FIFOMODE_DISABLE}, DMA_Uart_Rx = {DMA_CHANNEL_4, DMA_PINC_DISABLE, DMA_MINC_ENABLE, DMA_PDATAALIGN_WORD,
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <main+0x78>)
 8002214:	463c      	mov	r4, r7
 8002216:	461d      	mov	r5, r3
 8002218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800221c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					DMA_MDATAALIGN_WORD, DMA_NORMAL, DMA_PRIORITY_MEDIUM, DMA_FIFOMODE_DISABLE};

  dma_config(DMA_Uart_Tx, DMA_Uart_Rx, &huart1);
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <main+0x7c>)
 8002226:	930c      	str	r3, [sp, #48]	; 0x30
 8002228:	ad04      	add	r5, sp, #16
 800222a:	463c      	mov	r4, r7
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002234:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002238:	466c      	mov	r4, sp
 800223a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800224a:	f7ff ff37 	bl	80020bc <dma_config>
  HAL_UART_Transmit_DMA(&huart1, txBuffer, BUFFER_SIZE);
 800224e:	220a      	movs	r2, #10
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <main+0x80>)
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <main+0x7c>)
 8002254:	f7ff f84e 	bl	80012f4 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuffer, BUFFER_SIZE);
 8002258:	220a      	movs	r2, #10
 800225a:	4906      	ldr	r1, [pc, #24]	; (8002274 <main+0x84>)
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <main+0x7c>)
 800225e:	f7ff f8b5 	bl	80013cc <HAL_UART_Receive_DMA>


  while(1)
 8002262:	e7fe      	b.n	8002262 <main+0x72>
 8002264:	080023f8 	.word	0x080023f8
 8002268:	08002418 	.word	0x08002418
 800226c:	200000f8 	.word	0x200000f8
 8002270:	20000008 	.word	0x20000008
 8002274:	20000138 	.word	0x20000138

08002278 <SysTick_Handler>:
}



void  SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800227c:	f7fe f988 	bl	8000590 <HAL_IncTick>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <uart_init>:
#include "stm32f4xx_hal.h"

extern UART_HandleTypeDef huart1;

void uart_init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]

    //Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <uart_init+0xb0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <uart_init+0xb0>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <uart_init+0xb0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <uart_init+0xb0>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <uart_init+0xb0>)
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <uart_init+0xb0>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

     GPIO_InitStruct.Pin  = GPIO_PIN_9|GPIO_PIN_10;
 80022d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022d6:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022dc:	2307      	movs	r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Pull =  GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	61bb      	str	r3, [r7, #24]

     HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	4619      	mov	r1, r3
 80022ee:	4812      	ldr	r0, [pc, #72]	; (8002338 <uart_init+0xb4>)
 80022f0:	f7fe fdf0 	bl	8000ed4 <HAL_GPIO_Init>

     //Configure UART module
     huart1.Instance = USART1;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <uart_init+0xb8>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <uart_init+0xbc>)
 80022f8:	601a      	str	r2, [r3, #0]
     huart1.Init.BaudRate = 115200;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <uart_init+0xb8>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <uart_init+0xb8>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <uart_init+0xb8>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
     huart1.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <uart_init+0xb8>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
     huart1.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <uart_init+0xb8>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <uart_init+0xb8>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <uart_init+0xb8>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]

     HAL_UART_Init(&huart1);
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <uart_init+0xb8>)
 8002328:	f7fe ff8c 	bl	8001244 <HAL_UART_Init>
}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	200000f8 	.word	0x200000f8
 8002340:	40011000 	.word	0x40011000

08002344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002346:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	; (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <LoopForever+0xe>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	; (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002372:	f000 f811 	bl	8002398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002376:	f7ff ff3b 	bl	80021f0 <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   r0, =_estack
 800237c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002388:	08002458 	.word	0x08002458
  ldr r2, =_sbss
 800238c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002390:	20000144 	.word	0x20000144

08002394 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC_IRQHandler>
	...

08002398 <__libc_init_array>:
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	4d0d      	ldr	r5, [pc, #52]	; (80023d0 <__libc_init_array+0x38>)
 800239c:	4c0d      	ldr	r4, [pc, #52]	; (80023d4 <__libc_init_array+0x3c>)
 800239e:	1b64      	subs	r4, r4, r5
 80023a0:	10a4      	asrs	r4, r4, #2
 80023a2:	2600      	movs	r6, #0
 80023a4:	42a6      	cmp	r6, r4
 80023a6:	d109      	bne.n	80023bc <__libc_init_array+0x24>
 80023a8:	4d0b      	ldr	r5, [pc, #44]	; (80023d8 <__libc_init_array+0x40>)
 80023aa:	4c0c      	ldr	r4, [pc, #48]	; (80023dc <__libc_init_array+0x44>)
 80023ac:	f000 f818 	bl	80023e0 <_init>
 80023b0:	1b64      	subs	r4, r4, r5
 80023b2:	10a4      	asrs	r4, r4, #2
 80023b4:	2600      	movs	r6, #0
 80023b6:	42a6      	cmp	r6, r4
 80023b8:	d105      	bne.n	80023c6 <__libc_init_array+0x2e>
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
 80023bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c0:	4798      	blx	r3
 80023c2:	3601      	adds	r6, #1
 80023c4:	e7ee      	b.n	80023a4 <__libc_init_array+0xc>
 80023c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ca:	4798      	blx	r3
 80023cc:	3601      	adds	r6, #1
 80023ce:	e7f2      	b.n	80023b6 <__libc_init_array+0x1e>
 80023d0:	08002450 	.word	0x08002450
 80023d4:	08002450 	.word	0x08002450
 80023d8:	08002450 	.word	0x08002450
 80023dc:	08002454 	.word	0x08002454

080023e0 <_init>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr

080023ec <_fini>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr
