
4_ADC_ContinuousConversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002020  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080021b8  080021b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021f4  080021f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f4  080021f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f8  080021f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002208  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ee9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137b  00000000  00000000  00025f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  000272a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00027908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e91  00000000  00000000  00027ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000811d  00000000  00000000  0003dd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad20  00000000  00000000  00045e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0b8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  000d0be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080021a0 	.word	0x080021a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080021a0 	.word	0x080021a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fc69 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f810 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f000 f806 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fc6b 	bl	8000e3a <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 fc41 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_Delay+0x44>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e033      	b.n	80006a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	2b00      	cmp	r3, #0
 8000644:	d109      	bne.n	800065a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f831 	bl	80006ae <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	2b00      	cmp	r3, #0
 8000664:	d118      	bne.n	8000698 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800066e:	f023 0302 	bic.w	r3, r3, #2
 8000672:	f043 0202 	orr.w	r2, r3, #2
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 fa08 	bl	8000a90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f023 0303 	bic.w	r3, r3, #3
 800068e:	f043 0201 	orr.w	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
 8000696:	e001      	b.n	800069c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000698:	2301      	movs	r3, #1
 800069a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d101      	bne.n	80006de <HAL_ADC_Start+0x1a>
 80006da:	2302      	movs	r3, #2
 80006dc:	e08a      	b.n	80007f4 <HAL_ADC_Start+0x130>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d018      	beq.n	8000726 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f042 0201 	orr.w	r2, r2, #1
 8000702:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <HAL_ADC_Start+0x13c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a3e      	ldr	r2, [pc, #248]	; (8000804 <HAL_ADC_Start+0x140>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	0c9a      	lsrs	r2, r3, #18
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000718:	e002      	b.n	8000720 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	3b01      	subs	r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f9      	bne.n	800071a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b01      	cmp	r3, #1
 8000732:	d15e      	bne.n	80007f2 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000752:	2b00      	cmp	r3, #0
 8000754:	d007      	beq.n	8000766 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800075e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000772:	d106      	bne.n	8000782 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000778:	f023 0206 	bic.w	r2, r3, #6
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	645a      	str	r2, [r3, #68]	; 0x44
 8000780:	e002      	b.n	8000788 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <HAL_ADC_Start+0x144>)
 8000792:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800079c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10f      	bne.n	80007ca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11c      	bne.n	80007f2 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	e013      	b.n	80007f2 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_ADC_Start+0x148>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d10e      	bne.n	80007f2 <HAL_ADC_Start+0x12e>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d107      	bne.n	80007f2 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007f0:	609a      	str	r2, [r3, #8]
      }
    }
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000008 	.word	0x20000008
 8000804:	431bde83 	.word	0x431bde83
 8000808:	40012300 	.word	0x40012300
 800080c:	40012000 	.word	0x40012000

08000810 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000840:	2b01      	cmp	r3, #1
 8000842:	d101      	bne.n	8000848 <HAL_ADC_ConfigChannel+0x1c>
 8000844:	2302      	movs	r3, #2
 8000846:	e113      	b.n	8000a70 <HAL_ADC_ConfigChannel+0x244>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d925      	bls.n	80008a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68d9      	ldr	r1, [r3, #12]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	b29b      	uxth	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	3b1e      	subs	r3, #30
 800086e:	2207      	movs	r2, #7
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43da      	mvns	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	400a      	ands	r2, r1
 800087c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68d9      	ldr	r1, [r3, #12]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	4603      	mov	r3, r0
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4403      	add	r3, r0
 8000896:	3b1e      	subs	r3, #30
 8000898:	409a      	lsls	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	430a      	orrs	r2, r1
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	e022      	b.n	80008ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6919      	ldr	r1, [r3, #16]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	2207      	movs	r2, #7
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43da      	mvns	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	400a      	ands	r2, r1
 80008c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6919      	ldr	r1, [r3, #16]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4403      	add	r3, r0
 80008e0:	409a      	lsls	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d824      	bhi.n	800093c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	3b05      	subs	r3, #5
 8000904:	221f      	movs	r2, #31
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	400a      	ands	r2, r1
 8000912:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	3b05      	subs	r3, #5
 800092e:	fa00 f203 	lsl.w	r2, r0, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	e04c      	b.n	80009d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b0c      	cmp	r3, #12
 8000942:	d824      	bhi.n	800098e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	3b23      	subs	r3, #35	; 0x23
 8000956:	221f      	movs	r2, #31
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43da      	mvns	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	400a      	ands	r2, r1
 8000964:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	3b23      	subs	r3, #35	; 0x23
 8000980:	fa00 f203 	lsl.w	r2, r0, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	430a      	orrs	r2, r1
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
 800098c:	e023      	b.n	80009d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	3b41      	subs	r3, #65	; 0x41
 80009a0:	221f      	movs	r2, #31
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	400a      	ands	r2, r1
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	3b41      	subs	r3, #65	; 0x41
 80009ca:	fa00 f203 	lsl.w	r2, r0, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	430a      	orrs	r2, r1
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_ADC_ConfigChannel+0x250>)
 80009d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <HAL_ADC_ConfigChannel+0x254>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d10f      	bne.n	8000a04 <HAL_ADC_ConfigChannel+0x1d8>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d10b      	bne.n	8000a04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_ADC_ConfigChannel+0x254>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_ADC_ConfigChannel+0x23a>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <HAL_ADC_ConfigChannel+0x258>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d003      	beq.n	8000a20 <HAL_ADC_ConfigChannel+0x1f4>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d122      	bne.n	8000a66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	605a      	str	r2, [r3, #4]

    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_ADC_ConfigChannel+0x258>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d111      	bne.n	8000a66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_ADC_ConfigChannel+0x25c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_ADC_ConfigChannel+0x260>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0c9a      	lsrs	r2, r3, #18
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a58:	e002      	b.n	8000a60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40012300 	.word	0x40012300
 8000a80:	40012000 	.word	0x40012000
 8000a84:	10000012 	.word	0x10000012
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	431bde83 	.word	0x431bde83

08000a90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a98:	4b79      	ldr	r3, [pc, #484]	; (8000c80 <ADC_Init+0x1f0>)
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	021a      	lsls	r2, r3, #8
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6859      	ldr	r1, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6899      	ldr	r1, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	4a58      	ldr	r2, [pc, #352]	; (8000c84 <ADC_Init+0x1f4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d022      	beq.n	8000b6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6899      	ldr	r1, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6899      	ldr	r1, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	e00f      	b.n	8000b8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0202 	bic.w	r2, r2, #2
 8000b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6899      	ldr	r1, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7e1b      	ldrb	r3, [r3, #24]
 8000ba8:	005a      	lsls	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01b      	beq.n	8000bf4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000bda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6859      	ldr	r1, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	3b01      	subs	r3, #1
 8000be8:	035a      	lsls	r2, r3, #13
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	e007      	b.n	8000c04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	051a      	lsls	r2, r3, #20
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6899      	ldr	r1, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c46:	025a      	lsls	r2, r3, #9
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6899      	ldr	r1, [r3, #8]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	029a      	lsls	r2, r3, #10
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	609a      	str	r2, [r3, #8]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40012300 	.word	0x40012300
 8000c84:	0f000001 	.word	0x0f000001

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff47 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff5c 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff8e 	bl	8000d40 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffb0 	bl	8000da8 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e159      	b.n	8001124 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8148 	bne.w	800111e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d00b      	beq.n	8000eae <HAL_GPIO_Init+0x5a>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	2b11      	cmp	r3, #17
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0xfc>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a2 	beq.w	800111e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a56      	ldr	r2, [pc, #344]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x2f0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x202>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2f4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1fe>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1fa>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2fc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1f6>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x300>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1f2>
 8001042:	2304      	movs	r3, #4
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001046:	2307      	movs	r3, #7
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x204>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x204>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4935      	ldr	r1, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2ec>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <HAL_GPIO_Init+0x304>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_GPIO_Init+0x304>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_GPIO_Init+0x304>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f aea2 	bls.w	8000e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_RCC_GetHCLKFreq+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001178:	f7ff fff0 	bl	800115c <HAL_RCC_GetHCLKFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0a9b      	lsrs	r3, r3, #10
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	4903      	ldr	r1, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	080021bc 	.word	0x080021bc

0800119c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011a0:	f7ff ffdc 	bl	800115c <HAL_RCC_GetHCLKFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	0b5b      	lsrs	r3, r3, #13
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	4903      	ldr	r1, [pc, #12]	; (80011c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	080021bc 	.word	0x080021bc

080011c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e03f      	b.n	8001256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f837 	bl	800125e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f915 	bl	8001438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800121c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800122c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800123c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2220      	movs	r2, #32
 8001248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b088      	sub	sp, #32
 8001276:	af02      	add	r7, sp, #8
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b20      	cmp	r3, #32
 8001290:	f040 8083 	bne.w	800139a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_UART_Transmit+0x2e>
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e07b      	b.n	800139c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_UART_Transmit+0x40>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e074      	b.n	800139c <HAL_UART_Transmit+0x12a>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2221      	movs	r2, #33	; 0x21
 80012c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80012c8:	f7ff f97e 	bl	80005c8 <HAL_GetTick>
 80012cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80012e2:	e042      	b.n	800136a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fa:	d122      	bne.n	8001342 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f84c 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e042      	b.n	800139c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001328:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3302      	adds	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	e017      	b.n	800136a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3301      	adds	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	e013      	b.n	800136a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f829 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e01f      	b.n	800139c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800136e:	b29b      	uxth	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1b7      	bne.n	80012e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2200      	movs	r2, #0
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f810 	bl	80013a4 <UART_WaitOnFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e006      	b.n	800139c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013b4:	e02c      	b.n	8001410 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d028      	beq.n	8001410 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80013c4:	f7ff f900 	bl	80005c8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d21d      	bcs.n	8001410 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80013e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2220      	movs	r2, #32
 8001400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e00f      	b.n	8001430 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4013      	ands	r3, r2
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	429a      	cmp	r2, r3
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	429a      	cmp	r2, r3
 800142c:	d0c3      	beq.n	80013b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001440:	af00      	add	r7, sp, #0
 8001442:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001446:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001452:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001456:	68d9      	ldr	r1, [r3, #12]
 8001458:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	ea40 0301 	orr.w	r3, r0, r1
 8001462:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001464:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	431a      	orrs	r2, r3
 8001472:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	431a      	orrs	r2, r3
 800147a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	4313      	orrs	r3, r2
 8001482:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001492:	f021 010c 	bic.w	r1, r1, #12
 8001496:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014a0:	430b      	orrs	r3, r1
 80014a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80014b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014b4:	6999      	ldr	r1, [r3, #24]
 80014b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	ea40 0301 	orr.w	r3, r0, r1
 80014c0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014cc:	f040 824a 	bne.w	8001964 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b96      	ldr	r3, [pc, #600]	; (8001730 <UART_SetConfig+0x2f8>)
 80014d8:	429a      	cmp	r2, r3
 80014da:	d006      	beq.n	80014ea <UART_SetConfig+0xb2>
 80014dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b94      	ldr	r3, [pc, #592]	; (8001734 <UART_SetConfig+0x2fc>)
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8129 	bne.w	800173c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80014ea:	f7ff fe57 	bl	800119c <HAL_RCC_GetPCLK2Freq>
 80014ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80014fc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8001500:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8001504:	4622      	mov	r2, r4
 8001506:	462b      	mov	r3, r5
 8001508:	1891      	adds	r1, r2, r2
 800150a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800150e:	415b      	adcs	r3, r3
 8001510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001514:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001518:	4621      	mov	r1, r4
 800151a:	1851      	adds	r1, r2, r1
 800151c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001520:	4629      	mov	r1, r5
 8001522:	414b      	adcs	r3, r1
 8001524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001534:	4649      	mov	r1, r9
 8001536:	00cb      	lsls	r3, r1, #3
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800153e:	4641      	mov	r1, r8
 8001540:	00ca      	lsls	r2, r1, #3
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	4603      	mov	r3, r0
 8001548:	4622      	mov	r2, r4
 800154a:	189b      	adds	r3, r3, r2
 800154c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001550:	462b      	mov	r3, r5
 8001552:	460a      	mov	r2, r1
 8001554:	eb42 0303 	adc.w	r3, r2, r3
 8001558:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800155c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001568:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800156c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001570:	460b      	mov	r3, r1
 8001572:	18db      	adds	r3, r3, r3
 8001574:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001578:	4613      	mov	r3, r2
 800157a:	eb42 0303 	adc.w	r3, r2, r3
 800157e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001582:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001586:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800158a:	f7fe fe2d 	bl	80001e8 <__aeabi_uldivmod>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4b69      	ldr	r3, [pc, #420]	; (8001738 <UART_SetConfig+0x300>)
 8001594:	fba3 2302 	umull	r2, r3, r3, r2
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	011c      	lsls	r4, r3, #4
 800159c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80015a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015aa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80015ae:	4642      	mov	r2, r8
 80015b0:	464b      	mov	r3, r9
 80015b2:	1891      	adds	r1, r2, r2
 80015b4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80015b8:	415b      	adcs	r3, r3
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80015be:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80015c2:	4641      	mov	r1, r8
 80015c4:	1851      	adds	r1, r2, r1
 80015c6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80015ca:	4649      	mov	r1, r9
 80015cc:	414b      	adcs	r3, r1
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80015de:	4659      	mov	r1, fp
 80015e0:	00cb      	lsls	r3, r1, #3
 80015e2:	4651      	mov	r1, sl
 80015e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015e8:	4651      	mov	r1, sl
 80015ea:	00ca      	lsls	r2, r1, #3
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	4642      	mov	r2, r8
 80015f4:	189b      	adds	r3, r3, r2
 80015f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80015fa:	464b      	mov	r3, r9
 80015fc:	460a      	mov	r2, r1
 80015fe:	eb42 0303 	adc.w	r3, r2, r3
 8001602:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001606:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001612:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8001616:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800161a:	460b      	mov	r3, r1
 800161c:	18db      	adds	r3, r3, r3
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001622:	4613      	mov	r3, r2
 8001624:	eb42 0303 	adc.w	r3, r2, r3
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800162c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001630:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001634:	f7fe fdd8 	bl	80001e8 <__aeabi_uldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4611      	mov	r1, r2
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <UART_SetConfig+0x300>)
 8001640:	fba3 2301 	umull	r2, r3, r3, r1
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	2264      	movs	r2, #100	; 0x64
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <UART_SetConfig+0x300>)
 8001656:	fba3 2302 	umull	r2, r3, r3, r2
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001662:	441c      	add	r4, r3
 8001664:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001668:	2200      	movs	r2, #0
 800166a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800166e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001672:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001676:	4642      	mov	r2, r8
 8001678:	464b      	mov	r3, r9
 800167a:	1891      	adds	r1, r2, r2
 800167c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001680:	415b      	adcs	r3, r3
 8001682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001686:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800168a:	4641      	mov	r1, r8
 800168c:	1851      	adds	r1, r2, r1
 800168e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001692:	4649      	mov	r1, r9
 8001694:	414b      	adcs	r3, r1
 8001696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80016a6:	4659      	mov	r1, fp
 80016a8:	00cb      	lsls	r3, r1, #3
 80016aa:	4651      	mov	r1, sl
 80016ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016b0:	4651      	mov	r1, sl
 80016b2:	00ca      	lsls	r2, r1, #3
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	4642      	mov	r2, r8
 80016bc:	189b      	adds	r3, r3, r2
 80016be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80016c2:	464b      	mov	r3, r9
 80016c4:	460a      	mov	r2, r1
 80016c6:	eb42 0303 	adc.w	r3, r2, r3
 80016ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80016da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80016de:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80016e2:	460b      	mov	r3, r1
 80016e4:	18db      	adds	r3, r3, r3
 80016e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016ea:	4613      	mov	r3, r2
 80016ec:	eb42 0303 	adc.w	r3, r2, r3
 80016f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80016f8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80016fc:	f7fe fd74 	bl	80001e8 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <UART_SetConfig+0x300>)
 8001706:	fba3 1302 	umull	r1, r3, r3, r2
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2164      	movs	r1, #100	; 0x64
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	3332      	adds	r3, #50	; 0x32
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <UART_SetConfig+0x300>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	f003 0207 	and.w	r2, r3, #7
 8001724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4422      	add	r2, r4
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	e349      	b.n	8001dc4 <UART_SetConfig+0x98c>
 8001730:	40011000 	.word	0x40011000
 8001734:	40011400 	.word	0x40011400
 8001738:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800173c:	f7ff fd1a 	bl	8001174 <HAL_RCC_GetPCLK1Freq>
 8001740:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001748:	2200      	movs	r2, #0
 800174a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800174e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001752:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	1891      	adds	r1, r2, r2
 800175c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001760:	415b      	adcs	r3, r3
 8001762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001766:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800176a:	4621      	mov	r1, r4
 800176c:	eb12 0a01 	adds.w	sl, r2, r1
 8001770:	4629      	mov	r1, r5
 8001772:	eb43 0b01 	adc.w	fp, r3, r1
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001782:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800178a:	4692      	mov	sl, r2
 800178c:	469b      	mov	fp, r3
 800178e:	4623      	mov	r3, r4
 8001790:	eb1a 0303 	adds.w	r3, sl, r3
 8001794:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001798:	462b      	mov	r3, r5
 800179a:	eb4b 0303 	adc.w	r3, fp, r3
 800179e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80017ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017b2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80017b6:	460b      	mov	r3, r1
 80017b8:	18db      	adds	r3, r3, r3
 80017ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017be:	4613      	mov	r3, r2
 80017c0:	eb42 0303 	adc.w	r3, r2, r3
 80017c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80017cc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80017d0:	f7fe fd0a 	bl	80001e8 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4b61      	ldr	r3, [pc, #388]	; (8001960 <UART_SetConfig+0x528>)
 80017da:	fba3 2302 	umull	r2, r3, r3, r2
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	011c      	lsls	r4, r3, #4
 80017e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80017ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80017f0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80017f4:	4642      	mov	r2, r8
 80017f6:	464b      	mov	r3, r9
 80017f8:	1891      	adds	r1, r2, r2
 80017fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80017fc:	415b      	adcs	r3, r3
 80017fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001800:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001804:	4641      	mov	r1, r8
 8001806:	1851      	adds	r1, r2, r1
 8001808:	6739      	str	r1, [r7, #112]	; 0x70
 800180a:	4649      	mov	r1, r9
 800180c:	414b      	adcs	r3, r1
 800180e:	677b      	str	r3, [r7, #116]	; 0x74
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800181c:	4659      	mov	r1, fp
 800181e:	00cb      	lsls	r3, r1, #3
 8001820:	4651      	mov	r1, sl
 8001822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001826:	4651      	mov	r1, sl
 8001828:	00ca      	lsls	r2, r1, #3
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	4603      	mov	r3, r0
 8001830:	4642      	mov	r2, r8
 8001832:	189b      	adds	r3, r3, r2
 8001834:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001838:	464b      	mov	r3, r9
 800183a:	460a      	mov	r2, r1
 800183c:	eb42 0303 	adc.w	r3, r2, r3
 8001840:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001850:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001854:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001858:	460b      	mov	r3, r1
 800185a:	18db      	adds	r3, r3, r3
 800185c:	66bb      	str	r3, [r7, #104]	; 0x68
 800185e:	4613      	mov	r3, r2
 8001860:	eb42 0303 	adc.w	r3, r2, r3
 8001864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001866:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800186a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800186e:	f7fe fcbb 	bl	80001e8 <__aeabi_uldivmod>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4611      	mov	r1, r2
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <UART_SetConfig+0x528>)
 800187a:	fba3 2301 	umull	r2, r3, r3, r1
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2264      	movs	r2, #100	; 0x64
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	1acb      	subs	r3, r1, r3
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <UART_SetConfig+0x528>)
 8001890:	fba3 2302 	umull	r2, r3, r3, r2
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800189c:	441c      	add	r4, r3
 800189e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a2:	2200      	movs	r2, #0
 80018a4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80018a8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80018ac:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80018b0:	4642      	mov	r2, r8
 80018b2:	464b      	mov	r3, r9
 80018b4:	1891      	adds	r1, r2, r2
 80018b6:	6639      	str	r1, [r7, #96]	; 0x60
 80018b8:	415b      	adcs	r3, r3
 80018ba:	667b      	str	r3, [r7, #100]	; 0x64
 80018bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018c0:	4641      	mov	r1, r8
 80018c2:	1851      	adds	r1, r2, r1
 80018c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80018c6:	4649      	mov	r1, r9
 80018c8:	414b      	adcs	r3, r1
 80018ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80018d8:	4659      	mov	r1, fp
 80018da:	00cb      	lsls	r3, r1, #3
 80018dc:	4651      	mov	r1, sl
 80018de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018e2:	4651      	mov	r1, sl
 80018e4:	00ca      	lsls	r2, r1, #3
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4642      	mov	r2, r8
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80018f4:	464b      	mov	r3, r9
 80018f6:	460a      	mov	r2, r1
 80018f8:	eb42 0303 	adc.w	r3, r2, r3
 80018fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001900:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800190c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001910:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001914:	460b      	mov	r3, r1
 8001916:	18db      	adds	r3, r3, r3
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
 800191a:	4613      	mov	r3, r2
 800191c:	eb42 0303 	adc.w	r3, r2, r3
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
 8001922:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001926:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800192a:	f7fe fc5d 	bl	80001e8 <__aeabi_uldivmod>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <UART_SetConfig+0x528>)
 8001934:	fba3 1302 	umull	r1, r3, r3, r2
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	2164      	movs	r1, #100	; 0x64
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	3332      	adds	r3, #50	; 0x32
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <UART_SetConfig+0x528>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	f003 0207 	and.w	r2, r3, #7
 8001952:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4422      	add	r2, r4
 800195a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800195c:	e232      	b.n	8001dc4 <UART_SetConfig+0x98c>
 800195e:	bf00      	nop
 8001960:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <UART_SetConfig+0x768>)
 800196c:	429a      	cmp	r2, r3
 800196e:	d006      	beq.n	800197e <UART_SetConfig+0x546>
 8001970:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <UART_SetConfig+0x76c>)
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8117 	bne.w	8001bac <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800197e:	f7ff fc0d 	bl	800119c <HAL_RCC_GetPCLK2Freq>
 8001982:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001986:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800198a:	2200      	movs	r2, #0
 800198c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001990:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001994:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001998:	4622      	mov	r2, r4
 800199a:	462b      	mov	r3, r5
 800199c:	1891      	adds	r1, r2, r2
 800199e:	64b9      	str	r1, [r7, #72]	; 0x48
 80019a0:	415b      	adcs	r3, r3
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019a8:	4621      	mov	r1, r4
 80019aa:	eb12 0801 	adds.w	r8, r2, r1
 80019ae:	4629      	mov	r1, r5
 80019b0:	eb43 0901 	adc.w	r9, r3, r1
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c8:	4690      	mov	r8, r2
 80019ca:	4699      	mov	r9, r3
 80019cc:	4623      	mov	r3, r4
 80019ce:	eb18 0303 	adds.w	r3, r8, r3
 80019d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80019e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80019fc:	4629      	mov	r1, r5
 80019fe:	008b      	lsls	r3, r1, #2
 8001a00:	4621      	mov	r1, r4
 8001a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a06:	4621      	mov	r1, r4
 8001a08:	008a      	lsls	r2, r1, #2
 8001a0a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001a0e:	f7fe fbeb 	bl	80001e8 <__aeabi_uldivmod>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <UART_SetConfig+0x770>)
 8001a18:	fba3 2302 	umull	r2, r3, r3, r2
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	011c      	lsls	r4, r3, #4
 8001a20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a24:	2200      	movs	r2, #0
 8001a26:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001a2a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a2e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001a32:	4642      	mov	r2, r8
 8001a34:	464b      	mov	r3, r9
 8001a36:	1891      	adds	r1, r2, r2
 8001a38:	6439      	str	r1, [r7, #64]	; 0x40
 8001a3a:	415b      	adcs	r3, r3
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a42:	4641      	mov	r1, r8
 8001a44:	1851      	adds	r1, r2, r1
 8001a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a48:	4649      	mov	r1, r9
 8001a4a:	414b      	adcs	r3, r1
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	00cb      	lsls	r3, r1, #3
 8001a5e:	4651      	mov	r1, sl
 8001a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a64:	4651      	mov	r1, sl
 8001a66:	00ca      	lsls	r2, r1, #3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4642      	mov	r2, r8
 8001a70:	189b      	adds	r3, r3, r2
 8001a72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001a76:	464b      	mov	r3, r9
 8001a78:	460a      	mov	r2, r1
 8001a7a:	eb42 0303 	adc.w	r3, r2, r3
 8001a7e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001a82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001a8e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	008b      	lsls	r3, r1, #2
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	008a      	lsls	r2, r1, #2
 8001aac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001ab0:	f7fe fb9a 	bl	80001e8 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <UART_SetConfig+0x770>)
 8001aba:	fba3 1302 	umull	r1, r3, r3, r2
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2164      	movs	r1, #100	; 0x64
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	3332      	adds	r3, #50	; 0x32
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <UART_SetConfig+0x770>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad8:	441c      	add	r4, r3
 8001ada:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001ae4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001ae8:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001aec:	4642      	mov	r2, r8
 8001aee:	464b      	mov	r3, r9
 8001af0:	1891      	adds	r1, r2, r2
 8001af2:	6339      	str	r1, [r7, #48]	; 0x30
 8001af4:	415b      	adcs	r3, r3
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001afc:	4641      	mov	r1, r8
 8001afe:	1851      	adds	r1, r2, r1
 8001b00:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b02:	4649      	mov	r1, r9
 8001b04:	414b      	adcs	r3, r1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001b14:	4659      	mov	r1, fp
 8001b16:	00cb      	lsls	r3, r1, #3
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b1e:	4651      	mov	r1, sl
 8001b20:	00ca      	lsls	r2, r1, #3
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	4642      	mov	r2, r8
 8001b2a:	189b      	adds	r3, r3, r2
 8001b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b30:	464b      	mov	r3, r9
 8001b32:	460a      	mov	r2, r1
 8001b34:	eb42 0303 	adc.w	r3, r2, r3
 8001b38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b48:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001b58:	4649      	mov	r1, r9
 8001b5a:	008b      	lsls	r3, r1, #2
 8001b5c:	4641      	mov	r1, r8
 8001b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b62:	4641      	mov	r1, r8
 8001b64:	008a      	lsls	r2, r1, #2
 8001b66:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001b6a:	f7fe fb3d 	bl	80001e8 <__aeabi_uldivmod>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <UART_SetConfig+0x770>)
 8001b74:	fba3 1302 	umull	r1, r3, r3, r2
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	2164      	movs	r1, #100	; 0x64
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	3332      	adds	r3, #50	; 0x32
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <UART_SetConfig+0x770>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	f003 020f 	and.w	r2, r3, #15
 8001b92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4422      	add	r2, r4
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e112      	b.n	8001dc4 <UART_SetConfig+0x98c>
 8001b9e:	bf00      	nop
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bac:	f7ff fae2 	bl	8001174 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001bbe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001bc2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001bc6:	4642      	mov	r2, r8
 8001bc8:	464b      	mov	r3, r9
 8001bca:	1891      	adds	r1, r2, r2
 8001bcc:	6239      	str	r1, [r7, #32]
 8001bce:	415b      	adcs	r3, r3
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bd6:	4641      	mov	r1, r8
 8001bd8:	1854      	adds	r4, r2, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	eb43 0501 	adc.w	r5, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	00eb      	lsls	r3, r5, #3
 8001bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bee:	00e2      	lsls	r2, r4, #3
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	18e3      	adds	r3, r4, r3
 8001bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	eb45 0303 	adc.w	r3, r5, r3
 8001c02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c12:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001c22:	4629      	mov	r1, r5
 8001c24:	008b      	lsls	r3, r1, #2
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	008a      	lsls	r2, r1, #2
 8001c30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001c34:	f7fe fad8 	bl	80001e8 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <UART_SetConfig+0x998>)
 8001c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	011c      	lsls	r4, r3, #4
 8001c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c50:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001c54:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001c58:	4642      	mov	r2, r8
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	1891      	adds	r1, r2, r2
 8001c5e:	61b9      	str	r1, [r7, #24]
 8001c60:	415b      	adcs	r3, r3
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c68:	4641      	mov	r1, r8
 8001c6a:	1851      	adds	r1, r2, r1
 8001c6c:	6139      	str	r1, [r7, #16]
 8001c6e:	4649      	mov	r1, r9
 8001c70:	414b      	adcs	r3, r1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c80:	4659      	mov	r1, fp
 8001c82:	00cb      	lsls	r3, r1, #3
 8001c84:	4651      	mov	r1, sl
 8001c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	00ca      	lsls	r2, r1, #3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	4642      	mov	r2, r8
 8001c96:	189b      	adds	r3, r3, r2
 8001c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	eb42 0303 	adc.w	r3, r2, r3
 8001ca4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ca8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cb4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	008b      	lsls	r3, r1, #2
 8001cc8:	4641      	mov	r1, r8
 8001cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cce:	4641      	mov	r1, r8
 8001cd0:	008a      	lsls	r2, r1, #2
 8001cd2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001cd6:	f7fe fa87 	bl	80001e8 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <UART_SetConfig+0x998>)
 8001ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	2164      	movs	r1, #100	; 0x64
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	3332      	adds	r3, #50	; 0x32
 8001cf2:	4a37      	ldr	r2, [pc, #220]	; (8001dd0 <UART_SetConfig+0x998>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfe:	441c      	add	r4, r3
 8001d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d04:	2200      	movs	r2, #0
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d0e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001d12:	4642      	mov	r2, r8
 8001d14:	464b      	mov	r3, r9
 8001d16:	1891      	adds	r1, r2, r2
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	415b      	adcs	r3, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d22:	4641      	mov	r1, r8
 8001d24:	1851      	adds	r1, r2, r1
 8001d26:	6039      	str	r1, [r7, #0]
 8001d28:	4649      	mov	r1, r9
 8001d2a:	414b      	adcs	r3, r1
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001d3a:	4659      	mov	r1, fp
 8001d3c:	00cb      	lsls	r3, r1, #3
 8001d3e:	4651      	mov	r1, sl
 8001d40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d44:	4651      	mov	r1, sl
 8001d46:	00ca      	lsls	r2, r1, #3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4642      	mov	r2, r8
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d56:	464b      	mov	r3, r9
 8001d58:	460a      	mov	r2, r1
 8001d5a:	eb42 0303 	adc.w	r3, r2, r3
 8001d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001d7e:	4649      	mov	r1, r9
 8001d80:	008b      	lsls	r3, r1, #2
 8001d82:	4641      	mov	r1, r8
 8001d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d88:	4641      	mov	r1, r8
 8001d8a:	008a      	lsls	r2, r1, #2
 8001d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d90:	f7fe fa2a 	bl	80001e8 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <UART_SetConfig+0x998>)
 8001d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2164      	movs	r1, #100	; 0x64
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	3332      	adds	r3, #50	; 0x32
 8001dac:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <UART_SetConfig+0x998>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	f003 020f 	and.w	r2, r3, #15
 8001db8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4422      	add	r2, r4
 8001dc0:	609a      	str	r2, [r3, #8]
}
 8001dc2:	e7ff      	b.n	8001dc4 <UART_SetConfig+0x98c>
 8001dc4:	bf00      	nop
 8001dc6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd0:	51eb851f 	.word	0x51eb851f

08001dd4 <pa0_adc_read>:


ADC_HandleTypeDef hadc1;

uint32_t pa0_adc_read(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <pa0_adc_read+0x10>)
 8001dda:	f7fe fd19 	bl	8000810 <HAL_ADC_GetValue>
 8001dde:	4603      	mov	r3, r0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000002c 	.word	0x2000002c

08001de8 <adc_pa0_continuous_conv_init>:

void adc_pa0_continuous_conv_init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
	// Configure pa0 as analog pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4826      	ldr	r0, [pc, #152]	; (8001ed4 <adc_pa0_continuous_conv_init+0xec>)
 8001e3c:	f7ff f80a 	bl	8000e54 <HAL_GPIO_Init>

	// Configure adc module for continuos conversion
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <adc_pa0_continuous_conv_init+0xe8>)
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance = ADC1;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <adc_pa0_continuous_conv_init+0xf4>)
 8001e60:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e68:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 0;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <adc_pa0_continuous_conv_init+0xf8>)
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = DISABLE;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
	HAL_ADC_Init(&hadc1);
 8001eaa:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001eac:	f7fe fbbc 	bl	8000628 <HAL_ADC_Init>

	// Configure ADC Channels
	sConfig.Channel = ADC_CHANNEL_0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <adc_pa0_continuous_conv_init+0xf0>)
 8001ec4:	f7fe fcb2 	bl	800082c <HAL_ADC_ConfigChannel>
}
 8001ec8:	bf00      	nop
 8001eca:	3730      	adds	r7, #48	; 0x30
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	2000002c 	.word	0x2000002c
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <adc_init_start>:

// Explicitly initialize and start ADC when no interrupt occurs
void adc_init_start(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	// configure ADC
	adc_pa0_continuous_conv_init();
 8001ee8:	f7ff ff7e 	bl	8001de8 <adc_pa0_continuous_conv_init>

	// start ADC
	HAL_ADC_Start(&hadc1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <adc_init_start+0x14>)
 8001eee:	f7fe fbe9 	bl	80006c4 <HAL_ADC_Start>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000002c 	.word	0x2000002c

08001efc <main>:
#include <string.h>
uint32_t sensorValue;
extern ADC_HandleTypeDef hadc1;
char value[5];
int main()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

	HAL_Init();
 8001f00:	f7fe faf4 	bl	80004ec <HAL_Init>
	uart_init();
 8001f04:	f000 f82e 	bl	8001f64 <uart_init>

	adc_init_start();
 8001f08:	f7ff ffec 	bl	8001ee4 <adc_init_start>

	while(1)
	{
		sensorValue = pa0_adc_read();
 8001f0c:	f7ff ff62 	bl	8001dd4 <pa0_adc_read>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <main+0x50>)
 8001f14:	6013      	str	r3, [r2, #0]
		itoa(sensorValue, value,10);
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <main+0x50>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	220a      	movs	r2, #10
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <main+0x54>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f8fa 	bl	8002118 <itoa>
		strcat(value, "\n");
 8001f24:	480a      	ldr	r0, [pc, #40]	; (8001f50 <main+0x54>)
 8001f26:	f7fe f957 	bl	80001d8 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <main+0x54>)
 8001f30:	4413      	add	r3, r2
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <main+0x58>)
 8001f34:	461a      	mov	r2, r3
 8001f36:	460b      	mov	r3, r1
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	8013      	strh	r3, [r2, #0]
		uart_transmit((uint8_t*)value);
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <main+0x54>)
 8001f3e:	f000 f871 	bl	8002024 <uart_transmit>
		//HAL_ADC_PollForConversion(&hadc1, 1);
		HAL_Delay(10);
 8001f42:	200a      	movs	r0, #10
 8001f44:	f7fe fb4c 	bl	80005e0 <HAL_Delay>
		sensorValue = pa0_adc_read();
 8001f48:	e7e0      	b.n	8001f0c <main+0x10>
 8001f4a:	bf00      	nop
 8001f4c:	20000074 	.word	0x20000074
 8001f50:	20000078 	.word	0x20000078
 8001f54:	080021b8 	.word	0x080021b8

08001f58 <SysTick_Handler>:


// Interrupt Service Routine
// callback function
void SysTick_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001f5c:	f7fe fb20 	bl	80005a0 <HAL_IncTick>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <uart_init>:
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
	return ch;
}

void uart_init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]

	// Enable UART Pins Clock Access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b25      	ldr	r3, [pc, #148]	; (8002014 <uart_init+0xb0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <uart_init+0xb0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <uart_init+0xb0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]

	// Enable UART Module Clock Access
	__HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <uart_init+0xb0>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <uart_init+0xb0>)
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <uart_init+0xb0>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

	// Configure Pins to Act as Alternate Func Pins
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4812      	ldr	r0, [pc, #72]	; (8002018 <uart_init+0xb4>)
 8001fce:	f7fe ff41 	bl	8000e54 <HAL_GPIO_Init>

	// Configure UART Module
	huart2.Instance = USART2;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <uart_init+0xb8>)
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <uart_init+0xbc>)
 8001fd6:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <uart_init+0xb8>)
 8001fda:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fde:	605a      	str	r2, [r3, #4]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <uart_init+0xb8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
	huart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <uart_init+0xb8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <uart_init+0xb8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
	huart2.Init.Mode = UART_MODE_TX;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <uart_init+0xb8>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <uart_init+0xb8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <uart_init+0xb8>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <uart_init+0xb8>)
 8002006:	f7ff f8dd 	bl	80011c4 <HAL_UART_Init>

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000
 800201c:	20000080 	.word	0x20000080
 8002020:	40004400 	.word	0x40004400

08002024 <uart_transmit>:

void uart_transmit(uint8_t *msg)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 10);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe f8d3 	bl	80001d8 <strlen>
 8002032:	4603      	mov	r3, r0
 8002034:	b29a      	uxth	r2, r3
 8002036:	230a      	movs	r3, #10
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <uart_transmit+0x24>)
 800203c:	f7ff f919 	bl	8001272 <HAL_UART_Transmit>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000080 	.word	0x20000080

0800204c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002050:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	; (800208c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	; (8002098 <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800207a:	f000 f811 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207e:	f7ff ff3d 	bl	8001efc <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
  ldr   r0, =_estack
 8002084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002090:	080021fc 	.word	0x080021fc
  ldr r2, =_sbss
 8002094:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002098:	200000c0 	.word	0x200000c0

0800209c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC_IRQHandler>
	...

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4d0d      	ldr	r5, [pc, #52]	; (80020d8 <__libc_init_array+0x38>)
 80020a4:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a6:	1b64      	subs	r4, r4, r5
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	2600      	movs	r6, #0
 80020ac:	42a6      	cmp	r6, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	4d0b      	ldr	r5, [pc, #44]	; (80020e0 <__libc_init_array+0x40>)
 80020b2:	4c0c      	ldr	r4, [pc, #48]	; (80020e4 <__libc_init_array+0x44>)
 80020b4:	f000 f874 	bl	80021a0 <_init>
 80020b8:	1b64      	subs	r4, r4, r5
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	2600      	movs	r6, #0
 80020be:	42a6      	cmp	r6, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c8:	4798      	blx	r3
 80020ca:	3601      	adds	r6, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d2:	4798      	blx	r3
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	080021f4 	.word	0x080021f4
 80020dc:	080021f4 	.word	0x080021f4
 80020e0:	080021f4 	.word	0x080021f4
 80020e4:	080021f8 	.word	0x080021f8

080020e8 <__itoa>:
 80020e8:	1e93      	subs	r3, r2, #2
 80020ea:	2b22      	cmp	r3, #34	; 0x22
 80020ec:	b510      	push	{r4, lr}
 80020ee:	460c      	mov	r4, r1
 80020f0:	d904      	bls.n	80020fc <__itoa+0x14>
 80020f2:	2300      	movs	r3, #0
 80020f4:	700b      	strb	r3, [r1, #0]
 80020f6:	461c      	mov	r4, r3
 80020f8:	4620      	mov	r0, r4
 80020fa:	bd10      	pop	{r4, pc}
 80020fc:	2a0a      	cmp	r2, #10
 80020fe:	d109      	bne.n	8002114 <__itoa+0x2c>
 8002100:	2800      	cmp	r0, #0
 8002102:	da07      	bge.n	8002114 <__itoa+0x2c>
 8002104:	232d      	movs	r3, #45	; 0x2d
 8002106:	700b      	strb	r3, [r1, #0]
 8002108:	4240      	negs	r0, r0
 800210a:	2101      	movs	r1, #1
 800210c:	4421      	add	r1, r4
 800210e:	f000 f805 	bl	800211c <__utoa>
 8002112:	e7f1      	b.n	80020f8 <__itoa+0x10>
 8002114:	2100      	movs	r1, #0
 8002116:	e7f9      	b.n	800210c <__itoa+0x24>

08002118 <itoa>:
 8002118:	f7ff bfe6 	b.w	80020e8 <__itoa>

0800211c <__utoa>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	4c1f      	ldr	r4, [pc, #124]	; (800219c <__utoa+0x80>)
 8002120:	b08b      	sub	sp, #44	; 0x2c
 8002122:	4605      	mov	r5, r0
 8002124:	460b      	mov	r3, r1
 8002126:	466e      	mov	r6, sp
 8002128:	f104 0c20 	add.w	ip, r4, #32
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	6861      	ldr	r1, [r4, #4]
 8002130:	4637      	mov	r7, r6
 8002132:	c703      	stmia	r7!, {r0, r1}
 8002134:	3408      	adds	r4, #8
 8002136:	4564      	cmp	r4, ip
 8002138:	463e      	mov	r6, r7
 800213a:	d1f7      	bne.n	800212c <__utoa+0x10>
 800213c:	7921      	ldrb	r1, [r4, #4]
 800213e:	7139      	strb	r1, [r7, #4]
 8002140:	1e91      	subs	r1, r2, #2
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	6038      	str	r0, [r7, #0]
 8002146:	2922      	cmp	r1, #34	; 0x22
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	d904      	bls.n	8002158 <__utoa+0x3c>
 800214e:	7019      	strb	r1, [r3, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	4618      	mov	r0, r3
 8002154:	b00b      	add	sp, #44	; 0x2c
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002158:	1e58      	subs	r0, r3, #1
 800215a:	4684      	mov	ip, r0
 800215c:	fbb5 f7f2 	udiv	r7, r5, r2
 8002160:	fb02 5617 	mls	r6, r2, r7, r5
 8002164:	3628      	adds	r6, #40	; 0x28
 8002166:	446e      	add	r6, sp
 8002168:	460c      	mov	r4, r1
 800216a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800216e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002172:	462e      	mov	r6, r5
 8002174:	42b2      	cmp	r2, r6
 8002176:	f101 0101 	add.w	r1, r1, #1
 800217a:	463d      	mov	r5, r7
 800217c:	d9ee      	bls.n	800215c <__utoa+0x40>
 800217e:	2200      	movs	r2, #0
 8002180:	545a      	strb	r2, [r3, r1]
 8002182:	1919      	adds	r1, r3, r4
 8002184:	1aa5      	subs	r5, r4, r2
 8002186:	42aa      	cmp	r2, r5
 8002188:	dae3      	bge.n	8002152 <__utoa+0x36>
 800218a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800218e:	780e      	ldrb	r6, [r1, #0]
 8002190:	7006      	strb	r6, [r0, #0]
 8002192:	3201      	adds	r2, #1
 8002194:	f801 5901 	strb.w	r5, [r1], #-1
 8002198:	e7f4      	b.n	8002184 <__utoa+0x68>
 800219a:	bf00      	nop
 800219c:	080021c4 	.word	0x080021c4

080021a0 <_init>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	bf00      	nop
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr

080021ac <_fini>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr
