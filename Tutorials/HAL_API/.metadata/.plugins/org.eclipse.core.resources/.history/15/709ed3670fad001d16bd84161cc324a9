
4_ADC_ContinuousConversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b00  08002b00  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000084  08002b8c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002b8c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f0a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000120a  00000000  00000000  00024fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  000261c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  000267d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016682  00000000  00000000  00026d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070ba  00000000  00000000  0003d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bead  00000000  00000000  00044474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f98  00000000  00000000  000d0374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a3c 	.word	0x08002a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08002a3c 	.word	0x08002a3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_Init+0x40>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_Init+0x40>)
 800059a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x40>)
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f939 	bl	8000824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f810 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f000 f806 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023c00 	.word	0x40023c00

080005c8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f93b 	bl	8000872 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f911 	bl	800083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000001c 	.word	0x2000001c
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	200000a0 	.word	0x200000a0

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200000a0 	.word	0x200000a0

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff ffee 	bl	8000660 <HAL_GetTick>
 8000684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069e:	bf00      	nop
 80006a0:	f7ff ffde 	bl	8000660 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004

080006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	; (8000704 <__NVIC_SetPriorityGrouping+0x44>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <__NVIC_GetPriorityGrouping+0x18>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	0a1b      	lsrs	r3, r3, #8
 8000712:	f003 0307 	and.w	r3, r3, #7
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f1c3 0307 	rsb	r3, r3, #7
 8000792:	2b04      	cmp	r3, #4
 8000794:	bf28      	it	cs
 8000796:	2304      	movcs	r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3304      	adds	r3, #4
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d902      	bls.n	80007a8 <NVIC_EncodePriority+0x30>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3b03      	subs	r3, #3
 80007a6:	e000      	b.n	80007aa <NVIC_EncodePriority+0x32>
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 32ff 	mov.w	r2, #4294967295
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	43da      	mvns	r2, r3
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	401a      	ands	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43d9      	mvns	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f0:	d301      	bcc.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00f      	b.n	8000816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <SysTick_Config+0x40>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	210f      	movs	r1, #15
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f7ff ff8e 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <SysTick_Config+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <SysTick_Config+0x40>)
 8000810:	2207      	movs	r2, #7
 8000812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff47 	bl	80006c0 <__NVIC_SetPriorityGrouping>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5c 	bl	8000708 <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff8e 	bl	8000778 <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb0 	bl	80007e0 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	e159      	b.n	8000b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008a8:	2201      	movs	r2, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8148 	bne.w	8000b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d00b      	beq.n	80008e6 <HAL_GPIO_Init+0x5a>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d007      	beq.n	80008e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	2b11      	cmp	r3, #17
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d130      	bne.n	8000948 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4313      	orrs	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800091c:	2201      	movs	r2, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0xfc>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b12      	cmp	r3, #18
 8000986:	d123      	bne.n	80009d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	08da      	lsrs	r2, r3, #3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3208      	adds	r2, #8
 80009ca:	69b9      	ldr	r1, [r7, #24]
 80009cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0203 	and.w	r2, r3, #3
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 80a2 	beq.w	8000b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <HAL_GPIO_Init+0x2e8>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <HAL_GPIO_Init+0x2e8>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <HAL_GPIO_Init+0x2e8>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a2e:	4a52      	ldr	r2, [pc, #328]	; (8000b78 <HAL_GPIO_Init+0x2ec>)
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x2f0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d019      	beq.n	8000a8e <HAL_GPIO_Init+0x202>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x2f4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0x1fe>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <HAL_GPIO_Init+0x2f8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00d      	beq.n	8000a86 <HAL_GPIO_Init+0x1fa>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_GPIO_Init+0x2fc>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d007      	beq.n	8000a82 <HAL_GPIO_Init+0x1f6>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a45      	ldr	r2, [pc, #276]	; (8000b8c <HAL_GPIO_Init+0x300>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_GPIO_Init+0x1f2>
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	e008      	b.n	8000a90 <HAL_GPIO_Init+0x204>
 8000a7e:	2307      	movs	r3, #7
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x204>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e004      	b.n	8000a90 <HAL_GPIO_Init+0x204>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_Init+0x204>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x204>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	f002 0203 	and.w	r2, r2, #3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	4935      	ldr	r1, [pc, #212]	; (8000b78 <HAL_GPIO_Init+0x2ec>)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_GPIO_Init+0x304>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	f67f aea2 	bls.w	80008a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40013c00 	.word	0x40013c00

08000b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000001c 	.word	0x2000001c

08000bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_RCC_GetHCLKFreq>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	0a9b      	lsrs	r3, r3, #10
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	4903      	ldr	r1, [pc, #12]	; (8000bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bc2:	5ccb      	ldrb	r3, [r1, r3]
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	08002a58 	.word	0x08002a58

08000bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000bd8:	f7ff ffdc 	bl	8000b94 <HAL_RCC_GetHCLKFreq>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	0b5b      	lsrs	r3, r3, #13
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	4903      	ldr	r1, [pc, #12]	; (8000bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bea:	5ccb      	ldrb	r3, [r1, r3]
 8000bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	08002a58 	.word	0x08002a58

08000bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e03f      	b.n	8000c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f837 	bl	8000c96 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f915 	bl	8000e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2220      	movs	r2, #32
 8000c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2220      	movs	r2, #32
 8000c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b088      	sub	sp, #32
 8000cae:	af02      	add	r7, sp, #8
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	f040 8083 	bne.w	8000dd2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <HAL_UART_Transmit+0x2e>
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d101      	bne.n	8000cdc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e07b      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <HAL_UART_Transmit+0x40>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e074      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000d00:	f7ff fcae 	bl	8000660 <HAL_GetTick>
 8000d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000d1a:	e042      	b.n	8000da2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3b01      	subs	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d32:	d122      	bne.n	8000d7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f000 f84c 	bl	8000ddc <UART_WaitOnFlagUntilTimeout>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e042      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d103      	bne.n	8000d72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	e017      	b.n	8000da2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3301      	adds	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	e013      	b.n	8000da2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2200      	movs	r2, #0
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f829 	bl	8000ddc <UART_WaitOnFlagUntilTimeout>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e01f      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1b7      	bne.n	8000d1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f810 	bl	8000ddc <UART_WaitOnFlagUntilTimeout>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2220      	movs	r2, #32
 8000dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000dd2:	2302      	movs	r3, #2
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000dec:	e02c      	b.n	8000e48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d028      	beq.n	8000e48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8000dfc:	f7ff fc30 	bl	8000660 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d21d      	bcs.n	8000e48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2220      	movs	r2, #32
 8000e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e00f      	b.n	8000e68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	4013      	ands	r3, r2
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	bf0c      	ite	eq
 8000e58:	2301      	moveq	r3, #1
 8000e5a:	2300      	movne	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d0c3      	beq.n	8000dee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e74:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000e8a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e8e:	68d9      	ldr	r1, [r3, #12]
 8000e90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	ea40 0301 	orr.w	r3, r0, r1
 8000e9a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000ebe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000eca:	f021 010c 	bic.w	r1, r1, #12
 8000ece:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000edc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000ee8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000eec:	6999      	ldr	r1, [r3, #24]
 8000eee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	ea40 0301 	orr.w	r3, r0, r1
 8000ef8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000efa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f04:	f040 824a 	bne.w	800139c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b96      	ldr	r3, [pc, #600]	; (8001168 <UART_SetConfig+0x2f8>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d006      	beq.n	8000f22 <UART_SetConfig+0xb2>
 8000f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b94      	ldr	r3, [pc, #592]	; (800116c <UART_SetConfig+0x2fc>)
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8129 	bne.w	8001174 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f22:	f7ff fe57 	bl	8000bd4 <HAL_RCC_GetPCLK2Freq>
 8000f26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000f34:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8000f38:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	462b      	mov	r3, r5
 8000f40:	1891      	adds	r1, r2, r2
 8000f42:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8000f46:	415b      	adcs	r3, r3
 8000f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f4c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000f50:	4621      	mov	r1, r4
 8000f52:	1851      	adds	r1, r2, r1
 8000f54:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000f58:	4629      	mov	r1, r5
 8000f5a:	414b      	adcs	r3, r1
 8000f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	00cb      	lsls	r3, r1, #3
 8000f70:	4641      	mov	r1, r8
 8000f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f76:	4641      	mov	r1, r8
 8000f78:	00ca      	lsls	r2, r1, #3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4622      	mov	r2, r4
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f88:	462b      	mov	r3, r5
 8000f8a:	460a      	mov	r2, r1
 8000f8c:	eb42 0303 	adc.w	r3, r2, r3
 8000f90:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000f94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fa0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8000fa4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	18db      	adds	r3, r3, r3
 8000fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	eb42 0303 	adc.w	r3, r2, r3
 8000fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fba:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000fbe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8000fc2:	f7ff f95d 	bl	8000280 <__aeabi_uldivmod>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4b69      	ldr	r3, [pc, #420]	; (8001170 <UART_SetConfig+0x300>)
 8000fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	011c      	lsls	r4, r3, #4
 8000fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000fde:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fe2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8000fe6:	4642      	mov	r2, r8
 8000fe8:	464b      	mov	r3, r9
 8000fea:	1891      	adds	r1, r2, r2
 8000fec:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000ff0:	415b      	adcs	r3, r3
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ff6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000ffa:	4641      	mov	r1, r8
 8000ffc:	1851      	adds	r1, r2, r1
 8000ffe:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001002:	4649      	mov	r1, r9
 8001004:	414b      	adcs	r3, r1
 8001006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001016:	4659      	mov	r1, fp
 8001018:	00cb      	lsls	r3, r1, #3
 800101a:	4651      	mov	r1, sl
 800101c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001020:	4651      	mov	r1, sl
 8001022:	00ca      	lsls	r2, r1, #3
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	4603      	mov	r3, r0
 800102a:	4642      	mov	r2, r8
 800102c:	189b      	adds	r3, r3, r2
 800102e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001032:	464b      	mov	r3, r9
 8001034:	460a      	mov	r2, r1
 8001036:	eb42 0303 	adc.w	r3, r2, r3
 800103a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800103e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800104a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800104e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001052:	460b      	mov	r3, r1
 8001054:	18db      	adds	r3, r3, r3
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800105a:	4613      	mov	r3, r2
 800105c:	eb42 0303 	adc.w	r3, r2, r3
 8001060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001064:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001068:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800106c:	f7ff f908 	bl	8000280 <__aeabi_uldivmod>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4611      	mov	r1, r2
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <UART_SetConfig+0x300>)
 8001078:	fba3 2301 	umull	r2, r3, r3, r1
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	1acb      	subs	r3, r1, r3
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <UART_SetConfig+0x300>)
 800108e:	fba3 2302 	umull	r2, r3, r3, r2
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800109a:	441c      	add	r4, r3
 800109c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010a6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80010aa:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80010ae:	4642      	mov	r2, r8
 80010b0:	464b      	mov	r3, r9
 80010b2:	1891      	adds	r1, r2, r2
 80010b4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80010b8:	415b      	adcs	r3, r3
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80010be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80010c2:	4641      	mov	r1, r8
 80010c4:	1851      	adds	r1, r2, r1
 80010c6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80010ca:	4649      	mov	r1, r9
 80010cc:	414b      	adcs	r3, r1
 80010ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80010de:	4659      	mov	r1, fp
 80010e0:	00cb      	lsls	r3, r1, #3
 80010e2:	4651      	mov	r1, sl
 80010e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010e8:	4651      	mov	r1, sl
 80010ea:	00ca      	lsls	r2, r1, #3
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	4642      	mov	r2, r8
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80010fa:	464b      	mov	r3, r9
 80010fc:	460a      	mov	r2, r1
 80010fe:	eb42 0303 	adc.w	r3, r2, r3
 8001102:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001106:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001112:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001116:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800111a:	460b      	mov	r3, r1
 800111c:	18db      	adds	r3, r3, r3
 800111e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001122:	4613      	mov	r3, r2
 8001124:	eb42 0303 	adc.w	r3, r2, r3
 8001128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800112c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001130:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001134:	f7ff f8a4 	bl	8000280 <__aeabi_uldivmod>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <UART_SetConfig+0x300>)
 800113e:	fba3 1302 	umull	r1, r3, r3, r2
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2164      	movs	r1, #100	; 0x64
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	3332      	adds	r3, #50	; 0x32
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <UART_SetConfig+0x300>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	f003 0207 	and.w	r2, r3, #7
 800115c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4422      	add	r2, r4
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	e349      	b.n	80017fc <UART_SetConfig+0x98c>
 8001168:	40011000 	.word	0x40011000
 800116c:	40011400 	.word	0x40011400
 8001170:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001174:	f7ff fd1a 	bl	8000bac <HAL_RCC_GetPCLK1Freq>
 8001178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800117c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001180:	2200      	movs	r2, #0
 8001182:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001186:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800118a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800118e:	4622      	mov	r2, r4
 8001190:	462b      	mov	r3, r5
 8001192:	1891      	adds	r1, r2, r2
 8001194:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001198:	415b      	adcs	r3, r3
 800119a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800119e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80011a2:	4621      	mov	r1, r4
 80011a4:	eb12 0a01 	adds.w	sl, r2, r1
 80011a8:	4629      	mov	r1, r5
 80011aa:	eb43 0b01 	adc.w	fp, r3, r1
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011c2:	4692      	mov	sl, r2
 80011c4:	469b      	mov	fp, r3
 80011c6:	4623      	mov	r3, r4
 80011c8:	eb1a 0303 	adds.w	r3, sl, r3
 80011cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011d0:	462b      	mov	r3, r5
 80011d2:	eb4b 0303 	adc.w	r3, fp, r3
 80011d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80011e6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011ea:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80011ee:	460b      	mov	r3, r1
 80011f0:	18db      	adds	r3, r3, r3
 80011f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011f6:	4613      	mov	r3, r2
 80011f8:	eb42 0303 	adc.w	r3, r2, r3
 80011fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001200:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001204:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001208:	f7ff f83a 	bl	8000280 <__aeabi_uldivmod>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <UART_SetConfig+0x528>)
 8001212:	fba3 2302 	umull	r2, r3, r3, r2
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	011c      	lsls	r4, r3, #4
 800121a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800121e:	2200      	movs	r2, #0
 8001220:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001224:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001228:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800122c:	4642      	mov	r2, r8
 800122e:	464b      	mov	r3, r9
 8001230:	1891      	adds	r1, r2, r2
 8001232:	67b9      	str	r1, [r7, #120]	; 0x78
 8001234:	415b      	adcs	r3, r3
 8001236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001238:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800123c:	4641      	mov	r1, r8
 800123e:	1851      	adds	r1, r2, r1
 8001240:	6739      	str	r1, [r7, #112]	; 0x70
 8001242:	4649      	mov	r1, r9
 8001244:	414b      	adcs	r3, r1
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001254:	4659      	mov	r1, fp
 8001256:	00cb      	lsls	r3, r1, #3
 8001258:	4651      	mov	r1, sl
 800125a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800125e:	4651      	mov	r1, sl
 8001260:	00ca      	lsls	r2, r1, #3
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	4603      	mov	r3, r0
 8001268:	4642      	mov	r2, r8
 800126a:	189b      	adds	r3, r3, r2
 800126c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001270:	464b      	mov	r3, r9
 8001272:	460a      	mov	r2, r1
 8001274:	eb42 0303 	adc.w	r3, r2, r3
 8001278:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800127c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001288:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800128c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001290:	460b      	mov	r3, r1
 8001292:	18db      	adds	r3, r3, r3
 8001294:	66bb      	str	r3, [r7, #104]	; 0x68
 8001296:	4613      	mov	r3, r2
 8001298:	eb42 0303 	adc.w	r3, r2, r3
 800129c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800129e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012a2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80012a6:	f7fe ffeb 	bl	8000280 <__aeabi_uldivmod>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <UART_SetConfig+0x528>)
 80012b2:	fba3 2301 	umull	r2, r3, r3, r1
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2264      	movs	r2, #100	; 0x64
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <UART_SetConfig+0x528>)
 80012c8:	fba3 2302 	umull	r2, r3, r3, r2
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80012d4:	441c      	add	r4, r3
 80012d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012da:	2200      	movs	r2, #0
 80012dc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80012e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80012e4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80012e8:	4642      	mov	r2, r8
 80012ea:	464b      	mov	r3, r9
 80012ec:	1891      	adds	r1, r2, r2
 80012ee:	6639      	str	r1, [r7, #96]	; 0x60
 80012f0:	415b      	adcs	r3, r3
 80012f2:	667b      	str	r3, [r7, #100]	; 0x64
 80012f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80012f8:	4641      	mov	r1, r8
 80012fa:	1851      	adds	r1, r2, r1
 80012fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80012fe:	4649      	mov	r1, r9
 8001300:	414b      	adcs	r3, r1
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001310:	4659      	mov	r1, fp
 8001312:	00cb      	lsls	r3, r1, #3
 8001314:	4651      	mov	r1, sl
 8001316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800131a:	4651      	mov	r1, sl
 800131c:	00ca      	lsls	r2, r1, #3
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	4603      	mov	r3, r0
 8001324:	4642      	mov	r2, r8
 8001326:	189b      	adds	r3, r3, r2
 8001328:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800132c:	464b      	mov	r3, r9
 800132e:	460a      	mov	r2, r1
 8001330:	eb42 0303 	adc.w	r3, r2, r3
 8001334:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001338:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001344:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001348:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800134c:	460b      	mov	r3, r1
 800134e:	18db      	adds	r3, r3, r3
 8001350:	653b      	str	r3, [r7, #80]	; 0x50
 8001352:	4613      	mov	r3, r2
 8001354:	eb42 0303 	adc.w	r3, r2, r3
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
 800135a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800135e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001362:	f7fe ff8d 	bl	8000280 <__aeabi_uldivmod>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <UART_SetConfig+0x528>)
 800136c:	fba3 1302 	umull	r1, r3, r3, r2
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	2164      	movs	r1, #100	; 0x64
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	3332      	adds	r3, #50	; 0x32
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <UART_SetConfig+0x528>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	f003 0207 	and.w	r2, r3, #7
 800138a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4422      	add	r2, r4
 8001392:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001394:	e232      	b.n	80017fc <UART_SetConfig+0x98c>
 8001396:	bf00      	nop
 8001398:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800139c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b8d      	ldr	r3, [pc, #564]	; (80015d8 <UART_SetConfig+0x768>)
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d006      	beq.n	80013b6 <UART_SetConfig+0x546>
 80013a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <UART_SetConfig+0x76c>)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8117 	bne.w	80015e4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80013b6:	f7ff fc0d 	bl	8000bd4 <HAL_RCC_GetPCLK2Freq>
 80013ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80013c8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80013cc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80013d0:	4622      	mov	r2, r4
 80013d2:	462b      	mov	r3, r5
 80013d4:	1891      	adds	r1, r2, r2
 80013d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80013d8:	415b      	adcs	r3, r3
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013e0:	4621      	mov	r1, r4
 80013e2:	eb12 0801 	adds.w	r8, r2, r1
 80013e6:	4629      	mov	r1, r5
 80013e8:	eb43 0901 	adc.w	r9, r3, r1
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001400:	4690      	mov	r8, r2
 8001402:	4699      	mov	r9, r3
 8001404:	4623      	mov	r3, r4
 8001406:	eb18 0303 	adds.w	r3, r8, r3
 800140a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800140e:	462b      	mov	r3, r5
 8001410:	eb49 0303 	adc.w	r3, r9, r3
 8001414:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001418:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001424:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001434:	4629      	mov	r1, r5
 8001436:	008b      	lsls	r3, r1, #2
 8001438:	4621      	mov	r1, r4
 800143a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800143e:	4621      	mov	r1, r4
 8001440:	008a      	lsls	r2, r1, #2
 8001442:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001446:	f7fe ff1b 	bl	8000280 <__aeabi_uldivmod>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <UART_SetConfig+0x770>)
 8001450:	fba3 2302 	umull	r2, r3, r3, r2
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	011c      	lsls	r4, r3, #4
 8001458:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800145c:	2200      	movs	r2, #0
 800145e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001462:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001466:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800146a:	4642      	mov	r2, r8
 800146c:	464b      	mov	r3, r9
 800146e:	1891      	adds	r1, r2, r2
 8001470:	6439      	str	r1, [r7, #64]	; 0x40
 8001472:	415b      	adcs	r3, r3
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
 8001476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800147a:	4641      	mov	r1, r8
 800147c:	1851      	adds	r1, r2, r1
 800147e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001480:	4649      	mov	r1, r9
 8001482:	414b      	adcs	r3, r1
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001492:	4659      	mov	r1, fp
 8001494:	00cb      	lsls	r3, r1, #3
 8001496:	4651      	mov	r1, sl
 8001498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800149c:	4651      	mov	r1, sl
 800149e:	00ca      	lsls	r2, r1, #3
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	4642      	mov	r2, r8
 80014a8:	189b      	adds	r3, r3, r2
 80014aa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80014ae:	464b      	mov	r3, r9
 80014b0:	460a      	mov	r2, r1
 80014b2:	eb42 0303 	adc.w	r3, r2, r3
 80014b6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80014ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80014c6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80014d6:	4649      	mov	r1, r9
 80014d8:	008b      	lsls	r3, r1, #2
 80014da:	4641      	mov	r1, r8
 80014dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014e0:	4641      	mov	r1, r8
 80014e2:	008a      	lsls	r2, r1, #2
 80014e4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80014e8:	f7fe feca 	bl	8000280 <__aeabi_uldivmod>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <UART_SetConfig+0x770>)
 80014f2:	fba3 1302 	umull	r1, r3, r3, r2
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2164      	movs	r1, #100	; 0x64
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	3332      	adds	r3, #50	; 0x32
 8001504:	4a36      	ldr	r2, [pc, #216]	; (80015e0 <UART_SetConfig+0x770>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001510:	441c      	add	r4, r3
 8001512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001516:	2200      	movs	r2, #0
 8001518:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800151c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001520:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001524:	4642      	mov	r2, r8
 8001526:	464b      	mov	r3, r9
 8001528:	1891      	adds	r1, r2, r2
 800152a:	6339      	str	r1, [r7, #48]	; 0x30
 800152c:	415b      	adcs	r3, r3
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
 8001530:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001534:	4641      	mov	r1, r8
 8001536:	1851      	adds	r1, r2, r1
 8001538:	62b9      	str	r1, [r7, #40]	; 0x28
 800153a:	4649      	mov	r1, r9
 800153c:	414b      	adcs	r3, r1
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800154c:	4659      	mov	r1, fp
 800154e:	00cb      	lsls	r3, r1, #3
 8001550:	4651      	mov	r1, sl
 8001552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001556:	4651      	mov	r1, sl
 8001558:	00ca      	lsls	r2, r1, #3
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	4603      	mov	r3, r0
 8001560:	4642      	mov	r2, r8
 8001562:	189b      	adds	r3, r3, r2
 8001564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001568:	464b      	mov	r3, r9
 800156a:	460a      	mov	r2, r1
 800156c:	eb42 0303 	adc.w	r3, r2, r3
 8001570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001574:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001580:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001590:	4649      	mov	r1, r9
 8001592:	008b      	lsls	r3, r1, #2
 8001594:	4641      	mov	r1, r8
 8001596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800159a:	4641      	mov	r1, r8
 800159c:	008a      	lsls	r2, r1, #2
 800159e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80015a2:	f7fe fe6d 	bl	8000280 <__aeabi_uldivmod>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <UART_SetConfig+0x770>)
 80015ac:	fba3 1302 	umull	r1, r3, r3, r2
 80015b0:	095b      	lsrs	r3, r3, #5
 80015b2:	2164      	movs	r1, #100	; 0x64
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	3332      	adds	r3, #50	; 0x32
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <UART_SetConfig+0x770>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	f003 020f 	and.w	r2, r3, #15
 80015ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4422      	add	r2, r4
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e112      	b.n	80017fc <UART_SetConfig+0x98c>
 80015d6:	bf00      	nop
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40011400 	.word	0x40011400
 80015e0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80015e4:	f7ff fae2 	bl	8000bac <HAL_RCC_GetPCLK1Freq>
 80015e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015f0:	2200      	movs	r2, #0
 80015f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80015f6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015fa:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80015fe:	4642      	mov	r2, r8
 8001600:	464b      	mov	r3, r9
 8001602:	1891      	adds	r1, r2, r2
 8001604:	6239      	str	r1, [r7, #32]
 8001606:	415b      	adcs	r3, r3
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800160e:	4641      	mov	r1, r8
 8001610:	1854      	adds	r4, r2, r1
 8001612:	4649      	mov	r1, r9
 8001614:	eb43 0501 	adc.w	r5, r3, r1
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	00eb      	lsls	r3, r5, #3
 8001622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001626:	00e2      	lsls	r2, r4, #3
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	4643      	mov	r3, r8
 800162e:	18e3      	adds	r3, r4, r3
 8001630:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001634:	464b      	mov	r3, r9
 8001636:	eb45 0303 	adc.w	r3, r5, r3
 800163a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800163e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800164a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800165a:	4629      	mov	r1, r5
 800165c:	008b      	lsls	r3, r1, #2
 800165e:	4621      	mov	r1, r4
 8001660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001664:	4621      	mov	r1, r4
 8001666:	008a      	lsls	r2, r1, #2
 8001668:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800166c:	f7fe fe08 	bl	8000280 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <UART_SetConfig+0x998>)
 8001676:	fba3 2302 	umull	r2, r3, r3, r2
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	011c      	lsls	r4, r3, #4
 800167e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001682:	2200      	movs	r2, #0
 8001684:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001688:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800168c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001690:	4642      	mov	r2, r8
 8001692:	464b      	mov	r3, r9
 8001694:	1891      	adds	r1, r2, r2
 8001696:	61b9      	str	r1, [r7, #24]
 8001698:	415b      	adcs	r3, r3
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016a0:	4641      	mov	r1, r8
 80016a2:	1851      	adds	r1, r2, r1
 80016a4:	6139      	str	r1, [r7, #16]
 80016a6:	4649      	mov	r1, r9
 80016a8:	414b      	adcs	r3, r1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016b8:	4659      	mov	r1, fp
 80016ba:	00cb      	lsls	r3, r1, #3
 80016bc:	4651      	mov	r1, sl
 80016be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016c2:	4651      	mov	r1, sl
 80016c4:	00ca      	lsls	r2, r1, #3
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	4642      	mov	r2, r8
 80016ce:	189b      	adds	r3, r3, r2
 80016d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016d4:	464b      	mov	r3, r9
 80016d6:	460a      	mov	r2, r1
 80016d8:	eb42 0303 	adc.w	r3, r2, r3
 80016dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80016ec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80016fc:	4649      	mov	r1, r9
 80016fe:	008b      	lsls	r3, r1, #2
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001706:	4641      	mov	r1, r8
 8001708:	008a      	lsls	r2, r1, #2
 800170a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800170e:	f7fe fdb7 	bl	8000280 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <UART_SetConfig+0x998>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	2164      	movs	r1, #100	; 0x64
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	3332      	adds	r3, #50	; 0x32
 800172a:	4a37      	ldr	r2, [pc, #220]	; (8001808 <UART_SetConfig+0x998>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001736:	441c      	add	r4, r3
 8001738:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173c:	2200      	movs	r2, #0
 800173e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001742:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001746:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800174a:	4642      	mov	r2, r8
 800174c:	464b      	mov	r3, r9
 800174e:	1891      	adds	r1, r2, r2
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	415b      	adcs	r3, r3
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175a:	4641      	mov	r1, r8
 800175c:	1851      	adds	r1, r2, r1
 800175e:	6039      	str	r1, [r7, #0]
 8001760:	4649      	mov	r1, r9
 8001762:	414b      	adcs	r3, r1
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001772:	4659      	mov	r1, fp
 8001774:	00cb      	lsls	r3, r1, #3
 8001776:	4651      	mov	r1, sl
 8001778:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800177c:	4651      	mov	r1, sl
 800177e:	00ca      	lsls	r2, r1, #3
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	4603      	mov	r3, r0
 8001786:	4642      	mov	r2, r8
 8001788:	189b      	adds	r3, r3, r2
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800178e:	464b      	mov	r3, r9
 8001790:	460a      	mov	r2, r1
 8001792:	eb42 0303 	adc.w	r3, r2, r3
 8001796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800179a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80017b6:	4649      	mov	r1, r9
 80017b8:	008b      	lsls	r3, r1, #2
 80017ba:	4641      	mov	r1, r8
 80017bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c0:	4641      	mov	r1, r8
 80017c2:	008a      	lsls	r2, r1, #2
 80017c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80017c8:	f7fe fd5a 	bl	8000280 <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <UART_SetConfig+0x998>)
 80017d2:	fba3 1302 	umull	r1, r3, r3, r2
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2164      	movs	r1, #100	; 0x64
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	3332      	adds	r3, #50	; 0x32
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <UART_SetConfig+0x998>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	f003 020f 	and.w	r2, r3, #15
 80017f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4422      	add	r2, r4
 80017f8:	609a      	str	r2, [r3, #8]
}
 80017fa:	e7ff      	b.n	80017fc <UART_SetConfig+0x98c>
 80017fc:	bf00      	nop
 80017fe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001802:	46bd      	mov	sp, r7
 8001804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001808:	51eb851f 	.word	0x51eb851f

0800180c <main>:
char message[20] = "Hello from STM32\r\n";



int main()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

	HAL_Init();
 8001810:	f7fe feb8 	bl	8000584 <HAL_Init>
	uart_init();
 8001814:	f000 f8c8 	bl	80019a8 <uart_init>

	while(1)
	{
		printf("%s", message);
 8001818:	4903      	ldr	r1, [pc, #12]	; (8001828 <main+0x1c>)
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <main+0x20>)
 800181c:	f000 f980 	bl	8001b20 <iprintf>
		HAL_Delay(10);
 8001820:	200a      	movs	r0, #10
 8001822:	f7fe ff29 	bl	8000678 <HAL_Delay>
		printf("%s", message);
 8001826:	e7f7      	b.n	8001818 <main+0xc>
 8001828:	20000008 	.word	0x20000008
 800182c:	08002a54 	.word	0x08002a54

08001830 <SysTick_Handler>:


// Interrupt Service Routine
// callback function
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001834:	f7fe ff00 	bl	8000638 <HAL_IncTick>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f877 	bl	8001984 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf1      	blt.n	8001888 <_write+0x12>
  }
  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_close>:

int _close(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f000 f8b8 	bl	8001abc <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200000a4 	.word	0x200000a4
 8001980:	200000f8 	.word	0x200000f8

08001984 <__io_putchar>:
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	230a      	movs	r3, #10
 8001990:	2201      	movs	r2, #1
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <__io_putchar+0x20>)
 8001994:	f7ff f989 	bl	8000caa <HAL_UART_Transmit>
	return ch;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000a8 	.word	0x200000a8

080019a8 <uart_init>:

void uart_init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

	// Enable UART Pins Clock Access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <uart_init+0xb0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <uart_init+0xb0>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <uart_init+0xb0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

	// Enable UART Module Clock Access
	__HAL_RCC_USART2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <uart_init+0xb0>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <uart_init+0xb0>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <uart_init+0xb0>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

	// Configure Pins to Act as Alternate Func Pins
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80019f6:	230c      	movs	r3, #12
 80019f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019fe:	2307      	movs	r3, #7
 8001a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <uart_init+0xb4>)
 8001a12:	f7fe ff3b 	bl	800088c <HAL_GPIO_Init>

	// Configure UART Module
	huart2.Instance = USART2;
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <uart_init+0xb8>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <uart_init+0xbc>)
 8001a1a:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <uart_init+0xb8>)
 8001a1e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a22:	605a      	str	r2, [r3, #4]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <uart_init+0xb8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
	huart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <uart_init+0xb8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <uart_init+0xb8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
	huart2.Init.Mode = UART_MODE_TX;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <uart_init+0xb8>)
 8001a38:	2208      	movs	r2, #8
 8001a3a:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <uart_init+0xb8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <uart_init+0xb8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <uart_init+0xb8>)
 8001a4a:	f7ff f8d7 	bl	8000bfc <HAL_UART_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	200000a8 	.word	0x200000a8
 8001a64:	40004400 	.word	0x40004400

08001a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	; (8001ab4 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a96:	f000 f817 	bl	8001ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff feb7 	bl	800180c <main>

08001a9e <LoopForever>:

LoopForever:
    b LoopForever
 8001a9e:	e7fe      	b.n	8001a9e <LoopForever>
  ldr   r0, =_estack
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001aac:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 8001ab0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ab4:	200000f8 	.word	0x200000f8

08001ab8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <__errno>:
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <__errno+0x8>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000020 	.word	0x20000020

08001ac8 <__libc_init_array>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	4d0d      	ldr	r5, [pc, #52]	; (8001b00 <__libc_init_array+0x38>)
 8001acc:	4c0d      	ldr	r4, [pc, #52]	; (8001b04 <__libc_init_array+0x3c>)
 8001ace:	1b64      	subs	r4, r4, r5
 8001ad0:	10a4      	asrs	r4, r4, #2
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	42a6      	cmp	r6, r4
 8001ad6:	d109      	bne.n	8001aec <__libc_init_array+0x24>
 8001ad8:	4d0b      	ldr	r5, [pc, #44]	; (8001b08 <__libc_init_array+0x40>)
 8001ada:	4c0c      	ldr	r4, [pc, #48]	; (8001b0c <__libc_init_array+0x44>)
 8001adc:	f000 ffae 	bl	8002a3c <_init>
 8001ae0:	1b64      	subs	r4, r4, r5
 8001ae2:	10a4      	asrs	r4, r4, #2
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	42a6      	cmp	r6, r4
 8001ae8:	d105      	bne.n	8001af6 <__libc_init_array+0x2e>
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
 8001aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af0:	4798      	blx	r3
 8001af2:	3601      	adds	r6, #1
 8001af4:	e7ee      	b.n	8001ad4 <__libc_init_array+0xc>
 8001af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001afa:	4798      	blx	r3
 8001afc:	3601      	adds	r6, #1
 8001afe:	e7f2      	b.n	8001ae6 <__libc_init_array+0x1e>
 8001b00:	08002b00 	.word	0x08002b00
 8001b04:	08002b00 	.word	0x08002b00
 8001b08:	08002b00 	.word	0x08002b00
 8001b0c:	08002b04 	.word	0x08002b04

08001b10 <memset>:
 8001b10:	4402      	add	r2, r0
 8001b12:	4603      	mov	r3, r0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <memset+0xa>
 8001b18:	4770      	bx	lr
 8001b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b1e:	e7f9      	b.n	8001b14 <memset+0x4>

08001b20 <iprintf>:
 8001b20:	b40f      	push	{r0, r1, r2, r3}
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <iprintf+0x2c>)
 8001b24:	b513      	push	{r0, r1, r4, lr}
 8001b26:	681c      	ldr	r4, [r3, #0]
 8001b28:	b124      	cbz	r4, 8001b34 <iprintf+0x14>
 8001b2a:	69a3      	ldr	r3, [r4, #24]
 8001b2c:	b913      	cbnz	r3, 8001b34 <iprintf+0x14>
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f000 f866 	bl	8001c00 <__sinit>
 8001b34:	ab05      	add	r3, sp, #20
 8001b36:	9a04      	ldr	r2, [sp, #16]
 8001b38:	68a1      	ldr	r1, [r4, #8]
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f000 f9bd 	bl	8001ebc <_vfiprintf_r>
 8001b42:	b002      	add	sp, #8
 8001b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b48:	b004      	add	sp, #16
 8001b4a:	4770      	bx	lr
 8001b4c:	20000020 	.word	0x20000020

08001b50 <std>:
 8001b50:	2300      	movs	r3, #0
 8001b52:	b510      	push	{r4, lr}
 8001b54:	4604      	mov	r4, r0
 8001b56:	e9c0 3300 	strd	r3, r3, [r0]
 8001b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b5e:	6083      	str	r3, [r0, #8]
 8001b60:	8181      	strh	r1, [r0, #12]
 8001b62:	6643      	str	r3, [r0, #100]	; 0x64
 8001b64:	81c2      	strh	r2, [r0, #14]
 8001b66:	6183      	str	r3, [r0, #24]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	305c      	adds	r0, #92	; 0x5c
 8001b6e:	f7ff ffcf 	bl	8001b10 <memset>
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <std+0x38>)
 8001b74:	6263      	str	r3, [r4, #36]	; 0x24
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <std+0x3c>)
 8001b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <std+0x40>)
 8001b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <std+0x44>)
 8001b80:	6224      	str	r4, [r4, #32]
 8001b82:	6323      	str	r3, [r4, #48]	; 0x30
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	bf00      	nop
 8001b88:	08002465 	.word	0x08002465
 8001b8c:	08002487 	.word	0x08002487
 8001b90:	080024bf 	.word	0x080024bf
 8001b94:	080024e3 	.word	0x080024e3

08001b98 <_cleanup_r>:
 8001b98:	4901      	ldr	r1, [pc, #4]	; (8001ba0 <_cleanup_r+0x8>)
 8001b9a:	f000 b8af 	b.w	8001cfc <_fwalk_reent>
 8001b9e:	bf00      	nop
 8001ba0:	080027bd 	.word	0x080027bd

08001ba4 <__sfmoreglue>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	2268      	movs	r2, #104	; 0x68
 8001ba8:	1e4d      	subs	r5, r1, #1
 8001baa:	4355      	muls	r5, r2
 8001bac:	460e      	mov	r6, r1
 8001bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bb2:	f000 f8e5 	bl	8001d80 <_malloc_r>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	b140      	cbz	r0, 8001bcc <__sfmoreglue+0x28>
 8001bba:	2100      	movs	r1, #0
 8001bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8001bc0:	300c      	adds	r0, #12
 8001bc2:	60a0      	str	r0, [r4, #8]
 8001bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bc8:	f7ff ffa2 	bl	8001b10 <memset>
 8001bcc:	4620      	mov	r0, r4
 8001bce:	bd70      	pop	{r4, r5, r6, pc}

08001bd0 <__sfp_lock_acquire>:
 8001bd0:	4801      	ldr	r0, [pc, #4]	; (8001bd8 <__sfp_lock_acquire+0x8>)
 8001bd2:	f000 b8b3 	b.w	8001d3c <__retarget_lock_acquire_recursive>
 8001bd6:	bf00      	nop
 8001bd8:	200000e9 	.word	0x200000e9

08001bdc <__sfp_lock_release>:
 8001bdc:	4801      	ldr	r0, [pc, #4]	; (8001be4 <__sfp_lock_release+0x8>)
 8001bde:	f000 b8ae 	b.w	8001d3e <__retarget_lock_release_recursive>
 8001be2:	bf00      	nop
 8001be4:	200000e9 	.word	0x200000e9

08001be8 <__sinit_lock_acquire>:
 8001be8:	4801      	ldr	r0, [pc, #4]	; (8001bf0 <__sinit_lock_acquire+0x8>)
 8001bea:	f000 b8a7 	b.w	8001d3c <__retarget_lock_acquire_recursive>
 8001bee:	bf00      	nop
 8001bf0:	200000ea 	.word	0x200000ea

08001bf4 <__sinit_lock_release>:
 8001bf4:	4801      	ldr	r0, [pc, #4]	; (8001bfc <__sinit_lock_release+0x8>)
 8001bf6:	f000 b8a2 	b.w	8001d3e <__retarget_lock_release_recursive>
 8001bfa:	bf00      	nop
 8001bfc:	200000ea 	.word	0x200000ea

08001c00 <__sinit>:
 8001c00:	b510      	push	{r4, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	f7ff fff0 	bl	8001be8 <__sinit_lock_acquire>
 8001c08:	69a3      	ldr	r3, [r4, #24]
 8001c0a:	b11b      	cbz	r3, 8001c14 <__sinit+0x14>
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c10:	f7ff bff0 	b.w	8001bf4 <__sinit_lock_release>
 8001c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c18:	6523      	str	r3, [r4, #80]	; 0x50
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <__sinit+0x68>)
 8001c1c:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <__sinit+0x6c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c22:	42a3      	cmp	r3, r4
 8001c24:	bf04      	itt	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	61a3      	streq	r3, [r4, #24]
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 f820 	bl	8001c70 <__sfp>
 8001c30:	6060      	str	r0, [r4, #4]
 8001c32:	4620      	mov	r0, r4
 8001c34:	f000 f81c 	bl	8001c70 <__sfp>
 8001c38:	60a0      	str	r0, [r4, #8]
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f000 f818 	bl	8001c70 <__sfp>
 8001c40:	2200      	movs	r2, #0
 8001c42:	60e0      	str	r0, [r4, #12]
 8001c44:	2104      	movs	r1, #4
 8001c46:	6860      	ldr	r0, [r4, #4]
 8001c48:	f7ff ff82 	bl	8001b50 <std>
 8001c4c:	68a0      	ldr	r0, [r4, #8]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2109      	movs	r1, #9
 8001c52:	f7ff ff7d 	bl	8001b50 <std>
 8001c56:	68e0      	ldr	r0, [r4, #12]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	2112      	movs	r1, #18
 8001c5c:	f7ff ff78 	bl	8001b50 <std>
 8001c60:	2301      	movs	r3, #1
 8001c62:	61a3      	str	r3, [r4, #24]
 8001c64:	e7d2      	b.n	8001c0c <__sinit+0xc>
 8001c66:	bf00      	nop
 8001c68:	08002a60 	.word	0x08002a60
 8001c6c:	08001b99 	.word	0x08001b99

08001c70 <__sfp>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	4607      	mov	r7, r0
 8001c74:	f7ff ffac 	bl	8001bd0 <__sfp_lock_acquire>
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <__sfp+0x84>)
 8001c7a:	681e      	ldr	r6, [r3, #0]
 8001c7c:	69b3      	ldr	r3, [r6, #24]
 8001c7e:	b913      	cbnz	r3, 8001c86 <__sfp+0x16>
 8001c80:	4630      	mov	r0, r6
 8001c82:	f7ff ffbd 	bl	8001c00 <__sinit>
 8001c86:	3648      	adds	r6, #72	; 0x48
 8001c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	d503      	bpl.n	8001c98 <__sfp+0x28>
 8001c90:	6833      	ldr	r3, [r6, #0]
 8001c92:	b30b      	cbz	r3, 8001cd8 <__sfp+0x68>
 8001c94:	6836      	ldr	r6, [r6, #0]
 8001c96:	e7f7      	b.n	8001c88 <__sfp+0x18>
 8001c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c9c:	b9d5      	cbnz	r5, 8001cd4 <__sfp+0x64>
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <__sfp+0x88>)
 8001ca0:	60e3      	str	r3, [r4, #12]
 8001ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8001ca8:	f000 f847 	bl	8001d3a <__retarget_lock_init_recursive>
 8001cac:	f7ff ff96 	bl	8001bdc <__sfp_lock_release>
 8001cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001cb8:	6025      	str	r5, [r4, #0]
 8001cba:	61a5      	str	r5, [r4, #24]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cc4:	f7ff ff24 	bl	8001b10 <memset>
 8001cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd4:	3468      	adds	r4, #104	; 0x68
 8001cd6:	e7d9      	b.n	8001c8c <__sfp+0x1c>
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4638      	mov	r0, r7
 8001cdc:	f7ff ff62 	bl	8001ba4 <__sfmoreglue>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	6030      	str	r0, [r6, #0]
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d1d5      	bne.n	8001c94 <__sfp+0x24>
 8001ce8:	f7ff ff78 	bl	8001bdc <__sfp_lock_release>
 8001cec:	230c      	movs	r3, #12
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	e7ee      	b.n	8001cd0 <__sfp+0x60>
 8001cf2:	bf00      	nop
 8001cf4:	08002a60 	.word	0x08002a60
 8001cf8:	ffff0001 	.word	0xffff0001

08001cfc <_fwalk_reent>:
 8001cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d00:	4606      	mov	r6, r0
 8001d02:	4688      	mov	r8, r1
 8001d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d08:	2700      	movs	r7, #0
 8001d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8001d12:	d505      	bpl.n	8001d20 <_fwalk_reent+0x24>
 8001d14:	6824      	ldr	r4, [r4, #0]
 8001d16:	2c00      	cmp	r4, #0
 8001d18:	d1f7      	bne.n	8001d0a <_fwalk_reent+0xe>
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d20:	89ab      	ldrh	r3, [r5, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d907      	bls.n	8001d36 <_fwalk_reent+0x3a>
 8001d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	d003      	beq.n	8001d36 <_fwalk_reent+0x3a>
 8001d2e:	4629      	mov	r1, r5
 8001d30:	4630      	mov	r0, r6
 8001d32:	47c0      	blx	r8
 8001d34:	4307      	orrs	r7, r0
 8001d36:	3568      	adds	r5, #104	; 0x68
 8001d38:	e7e9      	b.n	8001d0e <_fwalk_reent+0x12>

08001d3a <__retarget_lock_init_recursive>:
 8001d3a:	4770      	bx	lr

08001d3c <__retarget_lock_acquire_recursive>:
 8001d3c:	4770      	bx	lr

08001d3e <__retarget_lock_release_recursive>:
 8001d3e:	4770      	bx	lr

08001d40 <sbrk_aligned>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	4e0e      	ldr	r6, [pc, #56]	; (8001d7c <sbrk_aligned+0x3c>)
 8001d44:	460c      	mov	r4, r1
 8001d46:	6831      	ldr	r1, [r6, #0]
 8001d48:	4605      	mov	r5, r0
 8001d4a:	b911      	cbnz	r1, 8001d52 <sbrk_aligned+0x12>
 8001d4c:	f000 fb7a 	bl	8002444 <_sbrk_r>
 8001d50:	6030      	str	r0, [r6, #0]
 8001d52:	4621      	mov	r1, r4
 8001d54:	4628      	mov	r0, r5
 8001d56:	f000 fb75 	bl	8002444 <_sbrk_r>
 8001d5a:	1c43      	adds	r3, r0, #1
 8001d5c:	d00a      	beq.n	8001d74 <sbrk_aligned+0x34>
 8001d5e:	1cc4      	adds	r4, r0, #3
 8001d60:	f024 0403 	bic.w	r4, r4, #3
 8001d64:	42a0      	cmp	r0, r4
 8001d66:	d007      	beq.n	8001d78 <sbrk_aligned+0x38>
 8001d68:	1a21      	subs	r1, r4, r0
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f000 fb6a 	bl	8002444 <_sbrk_r>
 8001d70:	3001      	adds	r0, #1
 8001d72:	d101      	bne.n	8001d78 <sbrk_aligned+0x38>
 8001d74:	f04f 34ff 	mov.w	r4, #4294967295
 8001d78:	4620      	mov	r0, r4
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	200000f0 	.word	0x200000f0

08001d80 <_malloc_r>:
 8001d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d84:	1ccd      	adds	r5, r1, #3
 8001d86:	f025 0503 	bic.w	r5, r5, #3
 8001d8a:	3508      	adds	r5, #8
 8001d8c:	2d0c      	cmp	r5, #12
 8001d8e:	bf38      	it	cc
 8001d90:	250c      	movcc	r5, #12
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	4607      	mov	r7, r0
 8001d96:	db01      	blt.n	8001d9c <_malloc_r+0x1c>
 8001d98:	42a9      	cmp	r1, r5
 8001d9a:	d905      	bls.n	8001da8 <_malloc_r+0x28>
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	2600      	movs	r6, #0
 8001da2:	4630      	mov	r0, r6
 8001da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001da8:	4e2e      	ldr	r6, [pc, #184]	; (8001e64 <_malloc_r+0xe4>)
 8001daa:	f000 fdbb 	bl	8002924 <__malloc_lock>
 8001dae:	6833      	ldr	r3, [r6, #0]
 8001db0:	461c      	mov	r4, r3
 8001db2:	bb34      	cbnz	r4, 8001e02 <_malloc_r+0x82>
 8001db4:	4629      	mov	r1, r5
 8001db6:	4638      	mov	r0, r7
 8001db8:	f7ff ffc2 	bl	8001d40 <sbrk_aligned>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	d14d      	bne.n	8001e5e <_malloc_r+0xde>
 8001dc2:	6834      	ldr	r4, [r6, #0]
 8001dc4:	4626      	mov	r6, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d140      	bne.n	8001e4c <_malloc_r+0xcc>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	4631      	mov	r1, r6
 8001dce:	4638      	mov	r0, r7
 8001dd0:	eb04 0803 	add.w	r8, r4, r3
 8001dd4:	f000 fb36 	bl	8002444 <_sbrk_r>
 8001dd8:	4580      	cmp	r8, r0
 8001dda:	d13a      	bne.n	8001e52 <_malloc_r+0xd2>
 8001ddc:	6821      	ldr	r1, [r4, #0]
 8001dde:	3503      	adds	r5, #3
 8001de0:	1a6d      	subs	r5, r5, r1
 8001de2:	f025 0503 	bic.w	r5, r5, #3
 8001de6:	3508      	adds	r5, #8
 8001de8:	2d0c      	cmp	r5, #12
 8001dea:	bf38      	it	cc
 8001dec:	250c      	movcc	r5, #12
 8001dee:	4629      	mov	r1, r5
 8001df0:	4638      	mov	r0, r7
 8001df2:	f7ff ffa5 	bl	8001d40 <sbrk_aligned>
 8001df6:	3001      	adds	r0, #1
 8001df8:	d02b      	beq.n	8001e52 <_malloc_r+0xd2>
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	442b      	add	r3, r5
 8001dfe:	6023      	str	r3, [r4, #0]
 8001e00:	e00e      	b.n	8001e20 <_malloc_r+0xa0>
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	1b52      	subs	r2, r2, r5
 8001e06:	d41e      	bmi.n	8001e46 <_malloc_r+0xc6>
 8001e08:	2a0b      	cmp	r2, #11
 8001e0a:	d916      	bls.n	8001e3a <_malloc_r+0xba>
 8001e0c:	1961      	adds	r1, r4, r5
 8001e0e:	42a3      	cmp	r3, r4
 8001e10:	6025      	str	r5, [r4, #0]
 8001e12:	bf18      	it	ne
 8001e14:	6059      	strne	r1, [r3, #4]
 8001e16:	6863      	ldr	r3, [r4, #4]
 8001e18:	bf08      	it	eq
 8001e1a:	6031      	streq	r1, [r6, #0]
 8001e1c:	5162      	str	r2, [r4, r5]
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	4638      	mov	r0, r7
 8001e22:	f104 060b 	add.w	r6, r4, #11
 8001e26:	f000 fd83 	bl	8002930 <__malloc_unlock>
 8001e2a:	f026 0607 	bic.w	r6, r6, #7
 8001e2e:	1d23      	adds	r3, r4, #4
 8001e30:	1af2      	subs	r2, r6, r3
 8001e32:	d0b6      	beq.n	8001da2 <_malloc_r+0x22>
 8001e34:	1b9b      	subs	r3, r3, r6
 8001e36:	50a3      	str	r3, [r4, r2]
 8001e38:	e7b3      	b.n	8001da2 <_malloc_r+0x22>
 8001e3a:	6862      	ldr	r2, [r4, #4]
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	bf0c      	ite	eq
 8001e40:	6032      	streq	r2, [r6, #0]
 8001e42:	605a      	strne	r2, [r3, #4]
 8001e44:	e7ec      	b.n	8001e20 <_malloc_r+0xa0>
 8001e46:	4623      	mov	r3, r4
 8001e48:	6864      	ldr	r4, [r4, #4]
 8001e4a:	e7b2      	b.n	8001db2 <_malloc_r+0x32>
 8001e4c:	4634      	mov	r4, r6
 8001e4e:	6876      	ldr	r6, [r6, #4]
 8001e50:	e7b9      	b.n	8001dc6 <_malloc_r+0x46>
 8001e52:	230c      	movs	r3, #12
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4638      	mov	r0, r7
 8001e58:	f000 fd6a 	bl	8002930 <__malloc_unlock>
 8001e5c:	e7a1      	b.n	8001da2 <_malloc_r+0x22>
 8001e5e:	6025      	str	r5, [r4, #0]
 8001e60:	e7de      	b.n	8001e20 <_malloc_r+0xa0>
 8001e62:	bf00      	nop
 8001e64:	200000ec 	.word	0x200000ec

08001e68 <__sfputc_r>:
 8001e68:	6893      	ldr	r3, [r2, #8]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	b410      	push	{r4}
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	da08      	bge.n	8001e86 <__sfputc_r+0x1e>
 8001e74:	6994      	ldr	r4, [r2, #24]
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	db01      	blt.n	8001e7e <__sfputc_r+0x16>
 8001e7a:	290a      	cmp	r1, #10
 8001e7c:	d103      	bne.n	8001e86 <__sfputc_r+0x1e>
 8001e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e82:	f000 bb33 	b.w	80024ec <__swbuf_r>
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	1c58      	adds	r0, r3, #1
 8001e8a:	6010      	str	r0, [r2, #0]
 8001e8c:	7019      	strb	r1, [r3, #0]
 8001e8e:	4608      	mov	r0, r1
 8001e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <__sfputs_r>:
 8001e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e98:	4606      	mov	r6, r0
 8001e9a:	460f      	mov	r7, r1
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	18d5      	adds	r5, r2, r3
 8001ea0:	42ac      	cmp	r4, r5
 8001ea2:	d101      	bne.n	8001ea8 <__sfputs_r+0x12>
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e007      	b.n	8001eb8 <__sfputs_r+0x22>
 8001ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eac:	463a      	mov	r2, r7
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f7ff ffda 	bl	8001e68 <__sfputc_r>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d1f3      	bne.n	8001ea0 <__sfputs_r+0xa>
 8001eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ebc <_vfiprintf_r>:
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	b09d      	sub	sp, #116	; 0x74
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4606      	mov	r6, r0
 8001eca:	b118      	cbz	r0, 8001ed4 <_vfiprintf_r+0x18>
 8001ecc:	6983      	ldr	r3, [r0, #24]
 8001ece:	b90b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x18>
 8001ed0:	f7ff fe96 	bl	8001c00 <__sinit>
 8001ed4:	4b89      	ldr	r3, [pc, #548]	; (80020fc <_vfiprintf_r+0x240>)
 8001ed6:	429d      	cmp	r5, r3
 8001ed8:	d11b      	bne.n	8001f12 <_vfiprintf_r+0x56>
 8001eda:	6875      	ldr	r5, [r6, #4]
 8001edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ede:	07d9      	lsls	r1, r3, #31
 8001ee0:	d405      	bmi.n	8001eee <_vfiprintf_r+0x32>
 8001ee2:	89ab      	ldrh	r3, [r5, #12]
 8001ee4:	059a      	lsls	r2, r3, #22
 8001ee6:	d402      	bmi.n	8001eee <_vfiprintf_r+0x32>
 8001ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001eea:	f7ff ff27 	bl	8001d3c <__retarget_lock_acquire_recursive>
 8001eee:	89ab      	ldrh	r3, [r5, #12]
 8001ef0:	071b      	lsls	r3, r3, #28
 8001ef2:	d501      	bpl.n	8001ef8 <_vfiprintf_r+0x3c>
 8001ef4:	692b      	ldr	r3, [r5, #16]
 8001ef6:	b9eb      	cbnz	r3, 8001f34 <_vfiprintf_r+0x78>
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4630      	mov	r0, r6
 8001efc:	f000 fb5a 	bl	80025b4 <__swsetup_r>
 8001f00:	b1c0      	cbz	r0, 8001f34 <_vfiprintf_r+0x78>
 8001f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f04:	07dc      	lsls	r4, r3, #31
 8001f06:	d50e      	bpl.n	8001f26 <_vfiprintf_r+0x6a>
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	b01d      	add	sp, #116	; 0x74
 8001f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <_vfiprintf_r+0x244>)
 8001f14:	429d      	cmp	r5, r3
 8001f16:	d101      	bne.n	8001f1c <_vfiprintf_r+0x60>
 8001f18:	68b5      	ldr	r5, [r6, #8]
 8001f1a:	e7df      	b.n	8001edc <_vfiprintf_r+0x20>
 8001f1c:	4b79      	ldr	r3, [pc, #484]	; (8002104 <_vfiprintf_r+0x248>)
 8001f1e:	429d      	cmp	r5, r3
 8001f20:	bf08      	it	eq
 8001f22:	68f5      	ldreq	r5, [r6, #12]
 8001f24:	e7da      	b.n	8001edc <_vfiprintf_r+0x20>
 8001f26:	89ab      	ldrh	r3, [r5, #12]
 8001f28:	0598      	lsls	r0, r3, #22
 8001f2a:	d4ed      	bmi.n	8001f08 <_vfiprintf_r+0x4c>
 8001f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f2e:	f7ff ff06 	bl	8001d3e <__retarget_lock_release_recursive>
 8001f32:	e7e9      	b.n	8001f08 <_vfiprintf_r+0x4c>
 8001f34:	2300      	movs	r3, #0
 8001f36:	9309      	str	r3, [sp, #36]	; 0x24
 8001f38:	2320      	movs	r3, #32
 8001f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f42:	2330      	movs	r3, #48	; 0x30
 8001f44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002108 <_vfiprintf_r+0x24c>
 8001f48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f4c:	f04f 0901 	mov.w	r9, #1
 8001f50:	4623      	mov	r3, r4
 8001f52:	469a      	mov	sl, r3
 8001f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f58:	b10a      	cbz	r2, 8001f5e <_vfiprintf_r+0xa2>
 8001f5a:	2a25      	cmp	r2, #37	; 0x25
 8001f5c:	d1f9      	bne.n	8001f52 <_vfiprintf_r+0x96>
 8001f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8001f62:	d00b      	beq.n	8001f7c <_vfiprintf_r+0xc0>
 8001f64:	465b      	mov	r3, fp
 8001f66:	4622      	mov	r2, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f7ff ff93 	bl	8001e96 <__sfputs_r>
 8001f70:	3001      	adds	r0, #1
 8001f72:	f000 80aa 	beq.w	80020ca <_vfiprintf_r+0x20e>
 8001f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f78:	445a      	add	r2, fp
 8001f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8001f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a2 	beq.w	80020ca <_vfiprintf_r+0x20e>
 8001f86:	2300      	movs	r3, #0
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f90:	f10a 0a01 	add.w	sl, sl, #1
 8001f94:	9304      	str	r3, [sp, #16]
 8001f96:	9307      	str	r3, [sp, #28]
 8001f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8001f9e:	4654      	mov	r4, sl
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa6:	4858      	ldr	r0, [pc, #352]	; (8002108 <_vfiprintf_r+0x24c>)
 8001fa8:	f7fe f91a 	bl	80001e0 <memchr>
 8001fac:	9a04      	ldr	r2, [sp, #16]
 8001fae:	b9d8      	cbnz	r0, 8001fe8 <_vfiprintf_r+0x12c>
 8001fb0:	06d1      	lsls	r1, r2, #27
 8001fb2:	bf44      	itt	mi
 8001fb4:	2320      	movmi	r3, #32
 8001fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fba:	0713      	lsls	r3, r2, #28
 8001fbc:	bf44      	itt	mi
 8001fbe:	232b      	movmi	r3, #43	; 0x2b
 8001fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8001fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fca:	d015      	beq.n	8001ff8 <_vfiprintf_r+0x13c>
 8001fcc:	9a07      	ldr	r2, [sp, #28]
 8001fce:	4654      	mov	r4, sl
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f04f 0c0a 	mov.w	ip, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fdc:	3b30      	subs	r3, #48	; 0x30
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d94e      	bls.n	8002080 <_vfiprintf_r+0x1c4>
 8001fe2:	b1b0      	cbz	r0, 8002012 <_vfiprintf_r+0x156>
 8001fe4:	9207      	str	r2, [sp, #28]
 8001fe6:	e014      	b.n	8002012 <_vfiprintf_r+0x156>
 8001fe8:	eba0 0308 	sub.w	r3, r0, r8
 8001fec:	fa09 f303 	lsl.w	r3, r9, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	9304      	str	r3, [sp, #16]
 8001ff4:	46a2      	mov	sl, r4
 8001ff6:	e7d2      	b.n	8001f9e <_vfiprintf_r+0xe2>
 8001ff8:	9b03      	ldr	r3, [sp, #12]
 8001ffa:	1d19      	adds	r1, r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	9103      	str	r1, [sp, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	bfbb      	ittet	lt
 8002004:	425b      	neglt	r3, r3
 8002006:	f042 0202 	orrlt.w	r2, r2, #2
 800200a:	9307      	strge	r3, [sp, #28]
 800200c:	9307      	strlt	r3, [sp, #28]
 800200e:	bfb8      	it	lt
 8002010:	9204      	strlt	r2, [sp, #16]
 8002012:	7823      	ldrb	r3, [r4, #0]
 8002014:	2b2e      	cmp	r3, #46	; 0x2e
 8002016:	d10c      	bne.n	8002032 <_vfiprintf_r+0x176>
 8002018:	7863      	ldrb	r3, [r4, #1]
 800201a:	2b2a      	cmp	r3, #42	; 0x2a
 800201c:	d135      	bne.n	800208a <_vfiprintf_r+0x1ce>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	1d1a      	adds	r2, r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	9203      	str	r2, [sp, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	bfb8      	it	lt
 800202a:	f04f 33ff 	movlt.w	r3, #4294967295
 800202e:	3402      	adds	r4, #2
 8002030:	9305      	str	r3, [sp, #20]
 8002032:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002118 <_vfiprintf_r+0x25c>
 8002036:	7821      	ldrb	r1, [r4, #0]
 8002038:	2203      	movs	r2, #3
 800203a:	4650      	mov	r0, sl
 800203c:	f7fe f8d0 	bl	80001e0 <memchr>
 8002040:	b140      	cbz	r0, 8002054 <_vfiprintf_r+0x198>
 8002042:	2340      	movs	r3, #64	; 0x40
 8002044:	eba0 000a 	sub.w	r0, r0, sl
 8002048:	fa03 f000 	lsl.w	r0, r3, r0
 800204c:	9b04      	ldr	r3, [sp, #16]
 800204e:	4303      	orrs	r3, r0
 8002050:	3401      	adds	r4, #1
 8002052:	9304      	str	r3, [sp, #16]
 8002054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002058:	482c      	ldr	r0, [pc, #176]	; (800210c <_vfiprintf_r+0x250>)
 800205a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800205e:	2206      	movs	r2, #6
 8002060:	f7fe f8be 	bl	80001e0 <memchr>
 8002064:	2800      	cmp	r0, #0
 8002066:	d03f      	beq.n	80020e8 <_vfiprintf_r+0x22c>
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <_vfiprintf_r+0x254>)
 800206a:	bb1b      	cbnz	r3, 80020b4 <_vfiprintf_r+0x1f8>
 800206c:	9b03      	ldr	r3, [sp, #12]
 800206e:	3307      	adds	r3, #7
 8002070:	f023 0307 	bic.w	r3, r3, #7
 8002074:	3308      	adds	r3, #8
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800207a:	443b      	add	r3, r7
 800207c:	9309      	str	r3, [sp, #36]	; 0x24
 800207e:	e767      	b.n	8001f50 <_vfiprintf_r+0x94>
 8002080:	fb0c 3202 	mla	r2, ip, r2, r3
 8002084:	460c      	mov	r4, r1
 8002086:	2001      	movs	r0, #1
 8002088:	e7a5      	b.n	8001fd6 <_vfiprintf_r+0x11a>
 800208a:	2300      	movs	r3, #0
 800208c:	3401      	adds	r4, #1
 800208e:	9305      	str	r3, [sp, #20]
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 0c0a 	mov.w	ip, #10
 8002096:	4620      	mov	r0, r4
 8002098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800209c:	3a30      	subs	r2, #48	; 0x30
 800209e:	2a09      	cmp	r2, #9
 80020a0:	d903      	bls.n	80020aa <_vfiprintf_r+0x1ee>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0c5      	beq.n	8002032 <_vfiprintf_r+0x176>
 80020a6:	9105      	str	r1, [sp, #20]
 80020a8:	e7c3      	b.n	8002032 <_vfiprintf_r+0x176>
 80020aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80020ae:	4604      	mov	r4, r0
 80020b0:	2301      	movs	r3, #1
 80020b2:	e7f0      	b.n	8002096 <_vfiprintf_r+0x1da>
 80020b4:	ab03      	add	r3, sp, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	462a      	mov	r2, r5
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <_vfiprintf_r+0x258>)
 80020bc:	a904      	add	r1, sp, #16
 80020be:	4630      	mov	r0, r6
 80020c0:	f3af 8000 	nop.w
 80020c4:	4607      	mov	r7, r0
 80020c6:	1c78      	adds	r0, r7, #1
 80020c8:	d1d6      	bne.n	8002078 <_vfiprintf_r+0x1bc>
 80020ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020cc:	07d9      	lsls	r1, r3, #31
 80020ce:	d405      	bmi.n	80020dc <_vfiprintf_r+0x220>
 80020d0:	89ab      	ldrh	r3, [r5, #12]
 80020d2:	059a      	lsls	r2, r3, #22
 80020d4:	d402      	bmi.n	80020dc <_vfiprintf_r+0x220>
 80020d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020d8:	f7ff fe31 	bl	8001d3e <__retarget_lock_release_recursive>
 80020dc:	89ab      	ldrh	r3, [r5, #12]
 80020de:	065b      	lsls	r3, r3, #25
 80020e0:	f53f af12 	bmi.w	8001f08 <_vfiprintf_r+0x4c>
 80020e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020e6:	e711      	b.n	8001f0c <_vfiprintf_r+0x50>
 80020e8:	ab03      	add	r3, sp, #12
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	462a      	mov	r2, r5
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <_vfiprintf_r+0x258>)
 80020f0:	a904      	add	r1, sp, #16
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 f880 	bl	80021f8 <_printf_i>
 80020f8:	e7e4      	b.n	80020c4 <_vfiprintf_r+0x208>
 80020fa:	bf00      	nop
 80020fc:	08002a84 	.word	0x08002a84
 8002100:	08002aa4 	.word	0x08002aa4
 8002104:	08002a64 	.word	0x08002a64
 8002108:	08002ac4 	.word	0x08002ac4
 800210c:	08002ace 	.word	0x08002ace
 8002110:	00000000 	.word	0x00000000
 8002114:	08001e97 	.word	0x08001e97
 8002118:	08002aca 	.word	0x08002aca

0800211c <_printf_common>:
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002120:	4616      	mov	r6, r2
 8002122:	4699      	mov	r9, r3
 8002124:	688a      	ldr	r2, [r1, #8]
 8002126:	690b      	ldr	r3, [r1, #16]
 8002128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800212c:	4293      	cmp	r3, r2
 800212e:	bfb8      	it	lt
 8002130:	4613      	movlt	r3, r2
 8002132:	6033      	str	r3, [r6, #0]
 8002134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002138:	4607      	mov	r7, r0
 800213a:	460c      	mov	r4, r1
 800213c:	b10a      	cbz	r2, 8002142 <_printf_common+0x26>
 800213e:	3301      	adds	r3, #1
 8002140:	6033      	str	r3, [r6, #0]
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	0699      	lsls	r1, r3, #26
 8002146:	bf42      	ittt	mi
 8002148:	6833      	ldrmi	r3, [r6, #0]
 800214a:	3302      	addmi	r3, #2
 800214c:	6033      	strmi	r3, [r6, #0]
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	f015 0506 	ands.w	r5, r5, #6
 8002154:	d106      	bne.n	8002164 <_printf_common+0x48>
 8002156:	f104 0a19 	add.w	sl, r4, #25
 800215a:	68e3      	ldr	r3, [r4, #12]
 800215c:	6832      	ldr	r2, [r6, #0]
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	42ab      	cmp	r3, r5
 8002162:	dc26      	bgt.n	80021b2 <_printf_common+0x96>
 8002164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002168:	1e13      	subs	r3, r2, #0
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	bf18      	it	ne
 800216e:	2301      	movne	r3, #1
 8002170:	0692      	lsls	r2, r2, #26
 8002172:	d42b      	bmi.n	80021cc <_printf_common+0xb0>
 8002174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002178:	4649      	mov	r1, r9
 800217a:	4638      	mov	r0, r7
 800217c:	47c0      	blx	r8
 800217e:	3001      	adds	r0, #1
 8002180:	d01e      	beq.n	80021c0 <_printf_common+0xa4>
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	68e5      	ldr	r5, [r4, #12]
 8002186:	6832      	ldr	r2, [r6, #0]
 8002188:	f003 0306 	and.w	r3, r3, #6
 800218c:	2b04      	cmp	r3, #4
 800218e:	bf08      	it	eq
 8002190:	1aad      	subeq	r5, r5, r2
 8002192:	68a3      	ldr	r3, [r4, #8]
 8002194:	6922      	ldr	r2, [r4, #16]
 8002196:	bf0c      	ite	eq
 8002198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800219c:	2500      	movne	r5, #0
 800219e:	4293      	cmp	r3, r2
 80021a0:	bfc4      	itt	gt
 80021a2:	1a9b      	subgt	r3, r3, r2
 80021a4:	18ed      	addgt	r5, r5, r3
 80021a6:	2600      	movs	r6, #0
 80021a8:	341a      	adds	r4, #26
 80021aa:	42b5      	cmp	r5, r6
 80021ac:	d11a      	bne.n	80021e4 <_printf_common+0xc8>
 80021ae:	2000      	movs	r0, #0
 80021b0:	e008      	b.n	80021c4 <_printf_common+0xa8>
 80021b2:	2301      	movs	r3, #1
 80021b4:	4652      	mov	r2, sl
 80021b6:	4649      	mov	r1, r9
 80021b8:	4638      	mov	r0, r7
 80021ba:	47c0      	blx	r8
 80021bc:	3001      	adds	r0, #1
 80021be:	d103      	bne.n	80021c8 <_printf_common+0xac>
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c8:	3501      	adds	r5, #1
 80021ca:	e7c6      	b.n	800215a <_printf_common+0x3e>
 80021cc:	18e1      	adds	r1, r4, r3
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	2030      	movs	r0, #48	; 0x30
 80021d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021d6:	4422      	add	r2, r4
 80021d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021e0:	3302      	adds	r3, #2
 80021e2:	e7c7      	b.n	8002174 <_printf_common+0x58>
 80021e4:	2301      	movs	r3, #1
 80021e6:	4622      	mov	r2, r4
 80021e8:	4649      	mov	r1, r9
 80021ea:	4638      	mov	r0, r7
 80021ec:	47c0      	blx	r8
 80021ee:	3001      	adds	r0, #1
 80021f0:	d0e6      	beq.n	80021c0 <_printf_common+0xa4>
 80021f2:	3601      	adds	r6, #1
 80021f4:	e7d9      	b.n	80021aa <_printf_common+0x8e>
	...

080021f8 <_printf_i>:
 80021f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021fc:	7e0f      	ldrb	r7, [r1, #24]
 80021fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002200:	2f78      	cmp	r7, #120	; 0x78
 8002202:	4691      	mov	r9, r2
 8002204:	4680      	mov	r8, r0
 8002206:	460c      	mov	r4, r1
 8002208:	469a      	mov	sl, r3
 800220a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800220e:	d807      	bhi.n	8002220 <_printf_i+0x28>
 8002210:	2f62      	cmp	r7, #98	; 0x62
 8002212:	d80a      	bhi.n	800222a <_printf_i+0x32>
 8002214:	2f00      	cmp	r7, #0
 8002216:	f000 80d8 	beq.w	80023ca <_printf_i+0x1d2>
 800221a:	2f58      	cmp	r7, #88	; 0x58
 800221c:	f000 80a3 	beq.w	8002366 <_printf_i+0x16e>
 8002220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002228:	e03a      	b.n	80022a0 <_printf_i+0xa8>
 800222a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800222e:	2b15      	cmp	r3, #21
 8002230:	d8f6      	bhi.n	8002220 <_printf_i+0x28>
 8002232:	a101      	add	r1, pc, #4	; (adr r1, 8002238 <_printf_i+0x40>)
 8002234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002238:	08002291 	.word	0x08002291
 800223c:	080022a5 	.word	0x080022a5
 8002240:	08002221 	.word	0x08002221
 8002244:	08002221 	.word	0x08002221
 8002248:	08002221 	.word	0x08002221
 800224c:	08002221 	.word	0x08002221
 8002250:	080022a5 	.word	0x080022a5
 8002254:	08002221 	.word	0x08002221
 8002258:	08002221 	.word	0x08002221
 800225c:	08002221 	.word	0x08002221
 8002260:	08002221 	.word	0x08002221
 8002264:	080023b1 	.word	0x080023b1
 8002268:	080022d5 	.word	0x080022d5
 800226c:	08002393 	.word	0x08002393
 8002270:	08002221 	.word	0x08002221
 8002274:	08002221 	.word	0x08002221
 8002278:	080023d3 	.word	0x080023d3
 800227c:	08002221 	.word	0x08002221
 8002280:	080022d5 	.word	0x080022d5
 8002284:	08002221 	.word	0x08002221
 8002288:	08002221 	.word	0x08002221
 800228c:	0800239b 	.word	0x0800239b
 8002290:	682b      	ldr	r3, [r5, #0]
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	602a      	str	r2, [r5, #0]
 8002298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800229c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0a3      	b.n	80023ec <_printf_i+0x1f4>
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	6829      	ldr	r1, [r5, #0]
 80022a8:	0606      	lsls	r6, r0, #24
 80022aa:	f101 0304 	add.w	r3, r1, #4
 80022ae:	d50a      	bpl.n	80022c6 <_printf_i+0xce>
 80022b0:	680e      	ldr	r6, [r1, #0]
 80022b2:	602b      	str	r3, [r5, #0]
 80022b4:	2e00      	cmp	r6, #0
 80022b6:	da03      	bge.n	80022c0 <_printf_i+0xc8>
 80022b8:	232d      	movs	r3, #45	; 0x2d
 80022ba:	4276      	negs	r6, r6
 80022bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022c0:	485e      	ldr	r0, [pc, #376]	; (800243c <_printf_i+0x244>)
 80022c2:	230a      	movs	r3, #10
 80022c4:	e019      	b.n	80022fa <_printf_i+0x102>
 80022c6:	680e      	ldr	r6, [r1, #0]
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022ce:	bf18      	it	ne
 80022d0:	b236      	sxthne	r6, r6
 80022d2:	e7ef      	b.n	80022b4 <_printf_i+0xbc>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	6820      	ldr	r0, [r4, #0]
 80022d8:	1d19      	adds	r1, r3, #4
 80022da:	6029      	str	r1, [r5, #0]
 80022dc:	0601      	lsls	r1, r0, #24
 80022de:	d501      	bpl.n	80022e4 <_printf_i+0xec>
 80022e0:	681e      	ldr	r6, [r3, #0]
 80022e2:	e002      	b.n	80022ea <_printf_i+0xf2>
 80022e4:	0646      	lsls	r6, r0, #25
 80022e6:	d5fb      	bpl.n	80022e0 <_printf_i+0xe8>
 80022e8:	881e      	ldrh	r6, [r3, #0]
 80022ea:	4854      	ldr	r0, [pc, #336]	; (800243c <_printf_i+0x244>)
 80022ec:	2f6f      	cmp	r7, #111	; 0x6f
 80022ee:	bf0c      	ite	eq
 80022f0:	2308      	moveq	r3, #8
 80022f2:	230a      	movne	r3, #10
 80022f4:	2100      	movs	r1, #0
 80022f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022fa:	6865      	ldr	r5, [r4, #4]
 80022fc:	60a5      	str	r5, [r4, #8]
 80022fe:	2d00      	cmp	r5, #0
 8002300:	bfa2      	ittt	ge
 8002302:	6821      	ldrge	r1, [r4, #0]
 8002304:	f021 0104 	bicge.w	r1, r1, #4
 8002308:	6021      	strge	r1, [r4, #0]
 800230a:	b90e      	cbnz	r6, 8002310 <_printf_i+0x118>
 800230c:	2d00      	cmp	r5, #0
 800230e:	d04d      	beq.n	80023ac <_printf_i+0x1b4>
 8002310:	4615      	mov	r5, r2
 8002312:	fbb6 f1f3 	udiv	r1, r6, r3
 8002316:	fb03 6711 	mls	r7, r3, r1, r6
 800231a:	5dc7      	ldrb	r7, [r0, r7]
 800231c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002320:	4637      	mov	r7, r6
 8002322:	42bb      	cmp	r3, r7
 8002324:	460e      	mov	r6, r1
 8002326:	d9f4      	bls.n	8002312 <_printf_i+0x11a>
 8002328:	2b08      	cmp	r3, #8
 800232a:	d10b      	bne.n	8002344 <_printf_i+0x14c>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	07de      	lsls	r6, r3, #31
 8002330:	d508      	bpl.n	8002344 <_printf_i+0x14c>
 8002332:	6923      	ldr	r3, [r4, #16]
 8002334:	6861      	ldr	r1, [r4, #4]
 8002336:	4299      	cmp	r1, r3
 8002338:	bfde      	ittt	le
 800233a:	2330      	movle	r3, #48	; 0x30
 800233c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002340:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002344:	1b52      	subs	r2, r2, r5
 8002346:	6122      	str	r2, [r4, #16]
 8002348:	f8cd a000 	str.w	sl, [sp]
 800234c:	464b      	mov	r3, r9
 800234e:	aa03      	add	r2, sp, #12
 8002350:	4621      	mov	r1, r4
 8002352:	4640      	mov	r0, r8
 8002354:	f7ff fee2 	bl	800211c <_printf_common>
 8002358:	3001      	adds	r0, #1
 800235a:	d14c      	bne.n	80023f6 <_printf_i+0x1fe>
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	b004      	add	sp, #16
 8002362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002366:	4835      	ldr	r0, [pc, #212]	; (800243c <_printf_i+0x244>)
 8002368:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800236c:	6829      	ldr	r1, [r5, #0]
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	f851 6b04 	ldr.w	r6, [r1], #4
 8002374:	6029      	str	r1, [r5, #0]
 8002376:	061d      	lsls	r5, r3, #24
 8002378:	d514      	bpl.n	80023a4 <_printf_i+0x1ac>
 800237a:	07df      	lsls	r7, r3, #31
 800237c:	bf44      	itt	mi
 800237e:	f043 0320 	orrmi.w	r3, r3, #32
 8002382:	6023      	strmi	r3, [r4, #0]
 8002384:	b91e      	cbnz	r6, 800238e <_printf_i+0x196>
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	f023 0320 	bic.w	r3, r3, #32
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	2310      	movs	r3, #16
 8002390:	e7b0      	b.n	80022f4 <_printf_i+0xfc>
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	f043 0320 	orr.w	r3, r3, #32
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	2378      	movs	r3, #120	; 0x78
 800239c:	4828      	ldr	r0, [pc, #160]	; (8002440 <_printf_i+0x248>)
 800239e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023a2:	e7e3      	b.n	800236c <_printf_i+0x174>
 80023a4:	0659      	lsls	r1, r3, #25
 80023a6:	bf48      	it	mi
 80023a8:	b2b6      	uxthmi	r6, r6
 80023aa:	e7e6      	b.n	800237a <_printf_i+0x182>
 80023ac:	4615      	mov	r5, r2
 80023ae:	e7bb      	b.n	8002328 <_printf_i+0x130>
 80023b0:	682b      	ldr	r3, [r5, #0]
 80023b2:	6826      	ldr	r6, [r4, #0]
 80023b4:	6961      	ldr	r1, [r4, #20]
 80023b6:	1d18      	adds	r0, r3, #4
 80023b8:	6028      	str	r0, [r5, #0]
 80023ba:	0635      	lsls	r5, r6, #24
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	d501      	bpl.n	80023c4 <_printf_i+0x1cc>
 80023c0:	6019      	str	r1, [r3, #0]
 80023c2:	e002      	b.n	80023ca <_printf_i+0x1d2>
 80023c4:	0670      	lsls	r0, r6, #25
 80023c6:	d5fb      	bpl.n	80023c0 <_printf_i+0x1c8>
 80023c8:	8019      	strh	r1, [r3, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	6123      	str	r3, [r4, #16]
 80023ce:	4615      	mov	r5, r2
 80023d0:	e7ba      	b.n	8002348 <_printf_i+0x150>
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	1d1a      	adds	r2, r3, #4
 80023d6:	602a      	str	r2, [r5, #0]
 80023d8:	681d      	ldr	r5, [r3, #0]
 80023da:	6862      	ldr	r2, [r4, #4]
 80023dc:	2100      	movs	r1, #0
 80023de:	4628      	mov	r0, r5
 80023e0:	f7fd fefe 	bl	80001e0 <memchr>
 80023e4:	b108      	cbz	r0, 80023ea <_printf_i+0x1f2>
 80023e6:	1b40      	subs	r0, r0, r5
 80023e8:	6060      	str	r0, [r4, #4]
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	6123      	str	r3, [r4, #16]
 80023ee:	2300      	movs	r3, #0
 80023f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f4:	e7a8      	b.n	8002348 <_printf_i+0x150>
 80023f6:	6923      	ldr	r3, [r4, #16]
 80023f8:	462a      	mov	r2, r5
 80023fa:	4649      	mov	r1, r9
 80023fc:	4640      	mov	r0, r8
 80023fe:	47d0      	blx	sl
 8002400:	3001      	adds	r0, #1
 8002402:	d0ab      	beq.n	800235c <_printf_i+0x164>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	079b      	lsls	r3, r3, #30
 8002408:	d413      	bmi.n	8002432 <_printf_i+0x23a>
 800240a:	68e0      	ldr	r0, [r4, #12]
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	4298      	cmp	r0, r3
 8002410:	bfb8      	it	lt
 8002412:	4618      	movlt	r0, r3
 8002414:	e7a4      	b.n	8002360 <_printf_i+0x168>
 8002416:	2301      	movs	r3, #1
 8002418:	4632      	mov	r2, r6
 800241a:	4649      	mov	r1, r9
 800241c:	4640      	mov	r0, r8
 800241e:	47d0      	blx	sl
 8002420:	3001      	adds	r0, #1
 8002422:	d09b      	beq.n	800235c <_printf_i+0x164>
 8002424:	3501      	adds	r5, #1
 8002426:	68e3      	ldr	r3, [r4, #12]
 8002428:	9903      	ldr	r1, [sp, #12]
 800242a:	1a5b      	subs	r3, r3, r1
 800242c:	42ab      	cmp	r3, r5
 800242e:	dcf2      	bgt.n	8002416 <_printf_i+0x21e>
 8002430:	e7eb      	b.n	800240a <_printf_i+0x212>
 8002432:	2500      	movs	r5, #0
 8002434:	f104 0619 	add.w	r6, r4, #25
 8002438:	e7f5      	b.n	8002426 <_printf_i+0x22e>
 800243a:	bf00      	nop
 800243c:	08002ad5 	.word	0x08002ad5
 8002440:	08002ae6 	.word	0x08002ae6

08002444 <_sbrk_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4d06      	ldr	r5, [pc, #24]	; (8002460 <_sbrk_r+0x1c>)
 8002448:	2300      	movs	r3, #0
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	602b      	str	r3, [r5, #0]
 8002450:	f7ff fa62 	bl	8001918 <_sbrk>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_sbrk_r+0x1a>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_sbrk_r+0x1a>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	200000f4 	.word	0x200000f4

08002464 <__sread>:
 8002464:	b510      	push	{r4, lr}
 8002466:	460c      	mov	r4, r1
 8002468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800246c:	f000 fab2 	bl	80029d4 <_read_r>
 8002470:	2800      	cmp	r0, #0
 8002472:	bfab      	itete	ge
 8002474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002476:	89a3      	ldrhlt	r3, [r4, #12]
 8002478:	181b      	addge	r3, r3, r0
 800247a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800247e:	bfac      	ite	ge
 8002480:	6563      	strge	r3, [r4, #84]	; 0x54
 8002482:	81a3      	strhlt	r3, [r4, #12]
 8002484:	bd10      	pop	{r4, pc}

08002486 <__swrite>:
 8002486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248a:	461f      	mov	r7, r3
 800248c:	898b      	ldrh	r3, [r1, #12]
 800248e:	05db      	lsls	r3, r3, #23
 8002490:	4605      	mov	r5, r0
 8002492:	460c      	mov	r4, r1
 8002494:	4616      	mov	r6, r2
 8002496:	d505      	bpl.n	80024a4 <__swrite+0x1e>
 8002498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249c:	2302      	movs	r3, #2
 800249e:	2200      	movs	r2, #0
 80024a0:	f000 f9c8 	bl	8002834 <_lseek_r>
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024ae:	81a3      	strh	r3, [r4, #12]
 80024b0:	4632      	mov	r2, r6
 80024b2:	463b      	mov	r3, r7
 80024b4:	4628      	mov	r0, r5
 80024b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ba:	f000 b869 	b.w	8002590 <_write_r>

080024be <__sseek>:
 80024be:	b510      	push	{r4, lr}
 80024c0:	460c      	mov	r4, r1
 80024c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c6:	f000 f9b5 	bl	8002834 <_lseek_r>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	bf15      	itete	ne
 80024d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80024d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024da:	81a3      	strheq	r3, [r4, #12]
 80024dc:	bf18      	it	ne
 80024de:	81a3      	strhne	r3, [r4, #12]
 80024e0:	bd10      	pop	{r4, pc}

080024e2 <__sclose>:
 80024e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e6:	f000 b8d3 	b.w	8002690 <_close_r>
	...

080024ec <__swbuf_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	460e      	mov	r6, r1
 80024f0:	4614      	mov	r4, r2
 80024f2:	4605      	mov	r5, r0
 80024f4:	b118      	cbz	r0, 80024fe <__swbuf_r+0x12>
 80024f6:	6983      	ldr	r3, [r0, #24]
 80024f8:	b90b      	cbnz	r3, 80024fe <__swbuf_r+0x12>
 80024fa:	f7ff fb81 	bl	8001c00 <__sinit>
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <__swbuf_r+0x98>)
 8002500:	429c      	cmp	r4, r3
 8002502:	d12b      	bne.n	800255c <__swbuf_r+0x70>
 8002504:	686c      	ldr	r4, [r5, #4]
 8002506:	69a3      	ldr	r3, [r4, #24]
 8002508:	60a3      	str	r3, [r4, #8]
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	071a      	lsls	r2, r3, #28
 800250e:	d52f      	bpl.n	8002570 <__swbuf_r+0x84>
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	b36b      	cbz	r3, 8002570 <__swbuf_r+0x84>
 8002514:	6923      	ldr	r3, [r4, #16]
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	1ac0      	subs	r0, r0, r3
 800251a:	6963      	ldr	r3, [r4, #20]
 800251c:	b2f6      	uxtb	r6, r6
 800251e:	4283      	cmp	r3, r0
 8002520:	4637      	mov	r7, r6
 8002522:	dc04      	bgt.n	800252e <__swbuf_r+0x42>
 8002524:	4621      	mov	r1, r4
 8002526:	4628      	mov	r0, r5
 8002528:	f000 f948 	bl	80027bc <_fflush_r>
 800252c:	bb30      	cbnz	r0, 800257c <__swbuf_r+0x90>
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60a3      	str	r3, [r4, #8]
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	6022      	str	r2, [r4, #0]
 800253a:	701e      	strb	r6, [r3, #0]
 800253c:	6963      	ldr	r3, [r4, #20]
 800253e:	3001      	adds	r0, #1
 8002540:	4283      	cmp	r3, r0
 8002542:	d004      	beq.n	800254e <__swbuf_r+0x62>
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	07db      	lsls	r3, r3, #31
 8002548:	d506      	bpl.n	8002558 <__swbuf_r+0x6c>
 800254a:	2e0a      	cmp	r6, #10
 800254c:	d104      	bne.n	8002558 <__swbuf_r+0x6c>
 800254e:	4621      	mov	r1, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f000 f933 	bl	80027bc <_fflush_r>
 8002556:	b988      	cbnz	r0, 800257c <__swbuf_r+0x90>
 8002558:	4638      	mov	r0, r7
 800255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <__swbuf_r+0x9c>)
 800255e:	429c      	cmp	r4, r3
 8002560:	d101      	bne.n	8002566 <__swbuf_r+0x7a>
 8002562:	68ac      	ldr	r4, [r5, #8]
 8002564:	e7cf      	b.n	8002506 <__swbuf_r+0x1a>
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <__swbuf_r+0xa0>)
 8002568:	429c      	cmp	r4, r3
 800256a:	bf08      	it	eq
 800256c:	68ec      	ldreq	r4, [r5, #12]
 800256e:	e7ca      	b.n	8002506 <__swbuf_r+0x1a>
 8002570:	4621      	mov	r1, r4
 8002572:	4628      	mov	r0, r5
 8002574:	f000 f81e 	bl	80025b4 <__swsetup_r>
 8002578:	2800      	cmp	r0, #0
 800257a:	d0cb      	beq.n	8002514 <__swbuf_r+0x28>
 800257c:	f04f 37ff 	mov.w	r7, #4294967295
 8002580:	e7ea      	b.n	8002558 <__swbuf_r+0x6c>
 8002582:	bf00      	nop
 8002584:	08002a84 	.word	0x08002a84
 8002588:	08002aa4 	.word	0x08002aa4
 800258c:	08002a64 	.word	0x08002a64

08002590 <_write_r>:
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4d07      	ldr	r5, [pc, #28]	; (80025b0 <_write_r+0x20>)
 8002594:	4604      	mov	r4, r0
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	2200      	movs	r2, #0
 800259c:	602a      	str	r2, [r5, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	f7ff f969 	bl	8001876 <_write>
 80025a4:	1c43      	adds	r3, r0, #1
 80025a6:	d102      	bne.n	80025ae <_write_r+0x1e>
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	b103      	cbz	r3, 80025ae <_write_r+0x1e>
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	200000f4 	.word	0x200000f4

080025b4 <__swsetup_r>:
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <__swsetup_r+0xcc>)
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	681d      	ldr	r5, [r3, #0]
 80025ba:	4606      	mov	r6, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	b125      	cbz	r5, 80025ca <__swsetup_r+0x16>
 80025c0:	69ab      	ldr	r3, [r5, #24]
 80025c2:	b913      	cbnz	r3, 80025ca <__swsetup_r+0x16>
 80025c4:	4628      	mov	r0, r5
 80025c6:	f7ff fb1b 	bl	8001c00 <__sinit>
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <__swsetup_r+0xd0>)
 80025cc:	429c      	cmp	r4, r3
 80025ce:	d10f      	bne.n	80025f0 <__swsetup_r+0x3c>
 80025d0:	686c      	ldr	r4, [r5, #4]
 80025d2:	89a3      	ldrh	r3, [r4, #12]
 80025d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025d8:	0719      	lsls	r1, r3, #28
 80025da:	d42c      	bmi.n	8002636 <__swsetup_r+0x82>
 80025dc:	06dd      	lsls	r5, r3, #27
 80025de:	d411      	bmi.n	8002604 <__swsetup_r+0x50>
 80025e0:	2309      	movs	r3, #9
 80025e2:	6033      	str	r3, [r6, #0]
 80025e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80025e8:	81a3      	strh	r3, [r4, #12]
 80025ea:	f04f 30ff 	mov.w	r0, #4294967295
 80025ee:	e03e      	b.n	800266e <__swsetup_r+0xba>
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <__swsetup_r+0xd4>)
 80025f2:	429c      	cmp	r4, r3
 80025f4:	d101      	bne.n	80025fa <__swsetup_r+0x46>
 80025f6:	68ac      	ldr	r4, [r5, #8]
 80025f8:	e7eb      	b.n	80025d2 <__swsetup_r+0x1e>
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <__swsetup_r+0xd8>)
 80025fc:	429c      	cmp	r4, r3
 80025fe:	bf08      	it	eq
 8002600:	68ec      	ldreq	r4, [r5, #12]
 8002602:	e7e6      	b.n	80025d2 <__swsetup_r+0x1e>
 8002604:	0758      	lsls	r0, r3, #29
 8002606:	d512      	bpl.n	800262e <__swsetup_r+0x7a>
 8002608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800260a:	b141      	cbz	r1, 800261e <__swsetup_r+0x6a>
 800260c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002610:	4299      	cmp	r1, r3
 8002612:	d002      	beq.n	800261a <__swsetup_r+0x66>
 8002614:	4630      	mov	r0, r6
 8002616:	f000 f991 	bl	800293c <_free_r>
 800261a:	2300      	movs	r3, #0
 800261c:	6363      	str	r3, [r4, #52]	; 0x34
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002624:	81a3      	strh	r3, [r4, #12]
 8002626:	2300      	movs	r3, #0
 8002628:	6063      	str	r3, [r4, #4]
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	b94b      	cbnz	r3, 800264e <__swsetup_r+0x9a>
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002644:	d003      	beq.n	800264e <__swsetup_r+0x9a>
 8002646:	4621      	mov	r1, r4
 8002648:	4630      	mov	r0, r6
 800264a:	f000 f92b 	bl	80028a4 <__smakebuf_r>
 800264e:	89a0      	ldrh	r0, [r4, #12]
 8002650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002654:	f010 0301 	ands.w	r3, r0, #1
 8002658:	d00a      	beq.n	8002670 <__swsetup_r+0xbc>
 800265a:	2300      	movs	r3, #0
 800265c:	60a3      	str	r3, [r4, #8]
 800265e:	6963      	ldr	r3, [r4, #20]
 8002660:	425b      	negs	r3, r3
 8002662:	61a3      	str	r3, [r4, #24]
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	b943      	cbnz	r3, 800267a <__swsetup_r+0xc6>
 8002668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800266c:	d1ba      	bne.n	80025e4 <__swsetup_r+0x30>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	0781      	lsls	r1, r0, #30
 8002672:	bf58      	it	pl
 8002674:	6963      	ldrpl	r3, [r4, #20]
 8002676:	60a3      	str	r3, [r4, #8]
 8002678:	e7f4      	b.n	8002664 <__swsetup_r+0xb0>
 800267a:	2000      	movs	r0, #0
 800267c:	e7f7      	b.n	800266e <__swsetup_r+0xba>
 800267e:	bf00      	nop
 8002680:	20000020 	.word	0x20000020
 8002684:	08002a84 	.word	0x08002a84
 8002688:	08002aa4 	.word	0x08002aa4
 800268c:	08002a64 	.word	0x08002a64

08002690 <_close_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d06      	ldr	r5, [pc, #24]	; (80026ac <_close_r+0x1c>)
 8002694:	2300      	movs	r3, #0
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	602b      	str	r3, [r5, #0]
 800269c:	f7ff f907 	bl	80018ae <_close>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_close_r+0x1a>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_close_r+0x1a>
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200000f4 	.word	0x200000f4

080026b0 <__sflush_r>:
 80026b0:	898a      	ldrh	r2, [r1, #12]
 80026b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b6:	4605      	mov	r5, r0
 80026b8:	0710      	lsls	r0, r2, #28
 80026ba:	460c      	mov	r4, r1
 80026bc:	d458      	bmi.n	8002770 <__sflush_r+0xc0>
 80026be:	684b      	ldr	r3, [r1, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dc05      	bgt.n	80026d0 <__sflush_r+0x20>
 80026c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	dc02      	bgt.n	80026d0 <__sflush_r+0x20>
 80026ca:	2000      	movs	r0, #0
 80026cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026d2:	2e00      	cmp	r6, #0
 80026d4:	d0f9      	beq.n	80026ca <__sflush_r+0x1a>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026dc:	682f      	ldr	r7, [r5, #0]
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	d032      	beq.n	8002748 <__sflush_r+0x98>
 80026e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	075a      	lsls	r2, r3, #29
 80026e8:	d505      	bpl.n	80026f6 <__sflush_r+0x46>
 80026ea:	6863      	ldr	r3, [r4, #4]
 80026ec:	1ac0      	subs	r0, r0, r3
 80026ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026f0:	b10b      	cbz	r3, 80026f6 <__sflush_r+0x46>
 80026f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026f4:	1ac0      	subs	r0, r0, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	4602      	mov	r2, r0
 80026fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026fc:	6a21      	ldr	r1, [r4, #32]
 80026fe:	4628      	mov	r0, r5
 8002700:	47b0      	blx	r6
 8002702:	1c43      	adds	r3, r0, #1
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	d106      	bne.n	8002716 <__sflush_r+0x66>
 8002708:	6829      	ldr	r1, [r5, #0]
 800270a:	291d      	cmp	r1, #29
 800270c:	d82c      	bhi.n	8002768 <__sflush_r+0xb8>
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <__sflush_r+0x108>)
 8002710:	40ca      	lsrs	r2, r1
 8002712:	07d6      	lsls	r6, r2, #31
 8002714:	d528      	bpl.n	8002768 <__sflush_r+0xb8>
 8002716:	2200      	movs	r2, #0
 8002718:	6062      	str	r2, [r4, #4]
 800271a:	04d9      	lsls	r1, r3, #19
 800271c:	6922      	ldr	r2, [r4, #16]
 800271e:	6022      	str	r2, [r4, #0]
 8002720:	d504      	bpl.n	800272c <__sflush_r+0x7c>
 8002722:	1c42      	adds	r2, r0, #1
 8002724:	d101      	bne.n	800272a <__sflush_r+0x7a>
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	b903      	cbnz	r3, 800272c <__sflush_r+0x7c>
 800272a:	6560      	str	r0, [r4, #84]	; 0x54
 800272c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272e:	602f      	str	r7, [r5, #0]
 8002730:	2900      	cmp	r1, #0
 8002732:	d0ca      	beq.n	80026ca <__sflush_r+0x1a>
 8002734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002738:	4299      	cmp	r1, r3
 800273a:	d002      	beq.n	8002742 <__sflush_r+0x92>
 800273c:	4628      	mov	r0, r5
 800273e:	f000 f8fd 	bl	800293c <_free_r>
 8002742:	2000      	movs	r0, #0
 8002744:	6360      	str	r0, [r4, #52]	; 0x34
 8002746:	e7c1      	b.n	80026cc <__sflush_r+0x1c>
 8002748:	6a21      	ldr	r1, [r4, #32]
 800274a:	2301      	movs	r3, #1
 800274c:	4628      	mov	r0, r5
 800274e:	47b0      	blx	r6
 8002750:	1c41      	adds	r1, r0, #1
 8002752:	d1c7      	bne.n	80026e4 <__sflush_r+0x34>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0c4      	beq.n	80026e4 <__sflush_r+0x34>
 800275a:	2b1d      	cmp	r3, #29
 800275c:	d001      	beq.n	8002762 <__sflush_r+0xb2>
 800275e:	2b16      	cmp	r3, #22
 8002760:	d101      	bne.n	8002766 <__sflush_r+0xb6>
 8002762:	602f      	str	r7, [r5, #0]
 8002764:	e7b1      	b.n	80026ca <__sflush_r+0x1a>
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	e7ad      	b.n	80026cc <__sflush_r+0x1c>
 8002770:	690f      	ldr	r7, [r1, #16]
 8002772:	2f00      	cmp	r7, #0
 8002774:	d0a9      	beq.n	80026ca <__sflush_r+0x1a>
 8002776:	0793      	lsls	r3, r2, #30
 8002778:	680e      	ldr	r6, [r1, #0]
 800277a:	bf08      	it	eq
 800277c:	694b      	ldreq	r3, [r1, #20]
 800277e:	600f      	str	r7, [r1, #0]
 8002780:	bf18      	it	ne
 8002782:	2300      	movne	r3, #0
 8002784:	eba6 0807 	sub.w	r8, r6, r7
 8002788:	608b      	str	r3, [r1, #8]
 800278a:	f1b8 0f00 	cmp.w	r8, #0
 800278e:	dd9c      	ble.n	80026ca <__sflush_r+0x1a>
 8002790:	6a21      	ldr	r1, [r4, #32]
 8002792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002794:	4643      	mov	r3, r8
 8002796:	463a      	mov	r2, r7
 8002798:	4628      	mov	r0, r5
 800279a:	47b0      	blx	r6
 800279c:	2800      	cmp	r0, #0
 800279e:	dc06      	bgt.n	80027ae <__sflush_r+0xfe>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a6:	81a3      	strh	r3, [r4, #12]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	e78e      	b.n	80026cc <__sflush_r+0x1c>
 80027ae:	4407      	add	r7, r0
 80027b0:	eba8 0800 	sub.w	r8, r8, r0
 80027b4:	e7e9      	b.n	800278a <__sflush_r+0xda>
 80027b6:	bf00      	nop
 80027b8:	20400001 	.word	0x20400001

080027bc <_fflush_r>:
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	690b      	ldr	r3, [r1, #16]
 80027c0:	4605      	mov	r5, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	b913      	cbnz	r3, 80027cc <_fflush_r+0x10>
 80027c6:	2500      	movs	r5, #0
 80027c8:	4628      	mov	r0, r5
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	b118      	cbz	r0, 80027d6 <_fflush_r+0x1a>
 80027ce:	6983      	ldr	r3, [r0, #24]
 80027d0:	b90b      	cbnz	r3, 80027d6 <_fflush_r+0x1a>
 80027d2:	f7ff fa15 	bl	8001c00 <__sinit>
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <_fflush_r+0x6c>)
 80027d8:	429c      	cmp	r4, r3
 80027da:	d11b      	bne.n	8002814 <_fflush_r+0x58>
 80027dc:	686c      	ldr	r4, [r5, #4]
 80027de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ef      	beq.n	80027c6 <_fflush_r+0xa>
 80027e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027e8:	07d0      	lsls	r0, r2, #31
 80027ea:	d404      	bmi.n	80027f6 <_fflush_r+0x3a>
 80027ec:	0599      	lsls	r1, r3, #22
 80027ee:	d402      	bmi.n	80027f6 <_fflush_r+0x3a>
 80027f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027f2:	f7ff faa3 	bl	8001d3c <__retarget_lock_acquire_recursive>
 80027f6:	4628      	mov	r0, r5
 80027f8:	4621      	mov	r1, r4
 80027fa:	f7ff ff59 	bl	80026b0 <__sflush_r>
 80027fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002800:	07da      	lsls	r2, r3, #31
 8002802:	4605      	mov	r5, r0
 8002804:	d4e0      	bmi.n	80027c8 <_fflush_r+0xc>
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	059b      	lsls	r3, r3, #22
 800280a:	d4dd      	bmi.n	80027c8 <_fflush_r+0xc>
 800280c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800280e:	f7ff fa96 	bl	8001d3e <__retarget_lock_release_recursive>
 8002812:	e7d9      	b.n	80027c8 <_fflush_r+0xc>
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <_fflush_r+0x70>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d101      	bne.n	800281e <_fflush_r+0x62>
 800281a:	68ac      	ldr	r4, [r5, #8]
 800281c:	e7df      	b.n	80027de <_fflush_r+0x22>
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <_fflush_r+0x74>)
 8002820:	429c      	cmp	r4, r3
 8002822:	bf08      	it	eq
 8002824:	68ec      	ldreq	r4, [r5, #12]
 8002826:	e7da      	b.n	80027de <_fflush_r+0x22>
 8002828:	08002a84 	.word	0x08002a84
 800282c:	08002aa4 	.word	0x08002aa4
 8002830:	08002a64 	.word	0x08002a64

08002834 <_lseek_r>:
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4d07      	ldr	r5, [pc, #28]	; (8002854 <_lseek_r+0x20>)
 8002838:	4604      	mov	r4, r0
 800283a:	4608      	mov	r0, r1
 800283c:	4611      	mov	r1, r2
 800283e:	2200      	movs	r2, #0
 8002840:	602a      	str	r2, [r5, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	f7ff f85a 	bl	80018fc <_lseek>
 8002848:	1c43      	adds	r3, r0, #1
 800284a:	d102      	bne.n	8002852 <_lseek_r+0x1e>
 800284c:	682b      	ldr	r3, [r5, #0]
 800284e:	b103      	cbz	r3, 8002852 <_lseek_r+0x1e>
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	bd38      	pop	{r3, r4, r5, pc}
 8002854:	200000f4 	.word	0x200000f4

08002858 <__swhatbuf_r>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	460e      	mov	r6, r1
 800285c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002860:	2900      	cmp	r1, #0
 8002862:	b096      	sub	sp, #88	; 0x58
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	da08      	bge.n	800287c <__swhatbuf_r+0x24>
 800286a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	602a      	str	r2, [r5, #0]
 8002872:	061a      	lsls	r2, r3, #24
 8002874:	d410      	bmi.n	8002898 <__swhatbuf_r+0x40>
 8002876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287a:	e00e      	b.n	800289a <__swhatbuf_r+0x42>
 800287c:	466a      	mov	r2, sp
 800287e:	f000 f8bb 	bl	80029f8 <_fstat_r>
 8002882:	2800      	cmp	r0, #0
 8002884:	dbf1      	blt.n	800286a <__swhatbuf_r+0x12>
 8002886:	9a01      	ldr	r2, [sp, #4]
 8002888:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800288c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002890:	425a      	negs	r2, r3
 8002892:	415a      	adcs	r2, r3
 8002894:	602a      	str	r2, [r5, #0]
 8002896:	e7ee      	b.n	8002876 <__swhatbuf_r+0x1e>
 8002898:	2340      	movs	r3, #64	; 0x40
 800289a:	2000      	movs	r0, #0
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	b016      	add	sp, #88	; 0x58
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080028a4 <__smakebuf_r>:
 80028a4:	898b      	ldrh	r3, [r1, #12]
 80028a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028a8:	079d      	lsls	r5, r3, #30
 80028aa:	4606      	mov	r6, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	d507      	bpl.n	80028c0 <__smakebuf_r+0x1c>
 80028b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028b4:	6023      	str	r3, [r4, #0]
 80028b6:	6123      	str	r3, [r4, #16]
 80028b8:	2301      	movs	r3, #1
 80028ba:	6163      	str	r3, [r4, #20]
 80028bc:	b002      	add	sp, #8
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	ab01      	add	r3, sp, #4
 80028c2:	466a      	mov	r2, sp
 80028c4:	f7ff ffc8 	bl	8002858 <__swhatbuf_r>
 80028c8:	9900      	ldr	r1, [sp, #0]
 80028ca:	4605      	mov	r5, r0
 80028cc:	4630      	mov	r0, r6
 80028ce:	f7ff fa57 	bl	8001d80 <_malloc_r>
 80028d2:	b948      	cbnz	r0, 80028e8 <__smakebuf_r+0x44>
 80028d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d8:	059a      	lsls	r2, r3, #22
 80028da:	d4ef      	bmi.n	80028bc <__smakebuf_r+0x18>
 80028dc:	f023 0303 	bic.w	r3, r3, #3
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	81a3      	strh	r3, [r4, #12]
 80028e6:	e7e3      	b.n	80028b0 <__smakebuf_r+0xc>
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <__smakebuf_r+0x7c>)
 80028ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	6020      	str	r0, [r4, #0]
 80028f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f4:	81a3      	strh	r3, [r4, #12]
 80028f6:	9b00      	ldr	r3, [sp, #0]
 80028f8:	6163      	str	r3, [r4, #20]
 80028fa:	9b01      	ldr	r3, [sp, #4]
 80028fc:	6120      	str	r0, [r4, #16]
 80028fe:	b15b      	cbz	r3, 8002918 <__smakebuf_r+0x74>
 8002900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002904:	4630      	mov	r0, r6
 8002906:	f000 f889 	bl	8002a1c <_isatty_r>
 800290a:	b128      	cbz	r0, 8002918 <__smakebuf_r+0x74>
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	81a3      	strh	r3, [r4, #12]
 8002918:	89a0      	ldrh	r0, [r4, #12]
 800291a:	4305      	orrs	r5, r0
 800291c:	81a5      	strh	r5, [r4, #12]
 800291e:	e7cd      	b.n	80028bc <__smakebuf_r+0x18>
 8002920:	08001b99 	.word	0x08001b99

08002924 <__malloc_lock>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__malloc_lock+0x8>)
 8002926:	f7ff ba09 	b.w	8001d3c <__retarget_lock_acquire_recursive>
 800292a:	bf00      	nop
 800292c:	200000e8 	.word	0x200000e8

08002930 <__malloc_unlock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_unlock+0x8>)
 8002932:	f7ff ba04 	b.w	8001d3e <__retarget_lock_release_recursive>
 8002936:	bf00      	nop
 8002938:	200000e8 	.word	0x200000e8

0800293c <_free_r>:
 800293c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800293e:	2900      	cmp	r1, #0
 8002940:	d044      	beq.n	80029cc <_free_r+0x90>
 8002942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002946:	9001      	str	r0, [sp, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f1a1 0404 	sub.w	r4, r1, #4
 800294e:	bfb8      	it	lt
 8002950:	18e4      	addlt	r4, r4, r3
 8002952:	f7ff ffe7 	bl	8002924 <__malloc_lock>
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <_free_r+0x94>)
 8002958:	9801      	ldr	r0, [sp, #4]
 800295a:	6813      	ldr	r3, [r2, #0]
 800295c:	b933      	cbnz	r3, 800296c <_free_r+0x30>
 800295e:	6063      	str	r3, [r4, #4]
 8002960:	6014      	str	r4, [r2, #0]
 8002962:	b003      	add	sp, #12
 8002964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002968:	f7ff bfe2 	b.w	8002930 <__malloc_unlock>
 800296c:	42a3      	cmp	r3, r4
 800296e:	d908      	bls.n	8002982 <_free_r+0x46>
 8002970:	6825      	ldr	r5, [r4, #0]
 8002972:	1961      	adds	r1, r4, r5
 8002974:	428b      	cmp	r3, r1
 8002976:	bf01      	itttt	eq
 8002978:	6819      	ldreq	r1, [r3, #0]
 800297a:	685b      	ldreq	r3, [r3, #4]
 800297c:	1949      	addeq	r1, r1, r5
 800297e:	6021      	streq	r1, [r4, #0]
 8002980:	e7ed      	b.n	800295e <_free_r+0x22>
 8002982:	461a      	mov	r2, r3
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b10b      	cbz	r3, 800298c <_free_r+0x50>
 8002988:	42a3      	cmp	r3, r4
 800298a:	d9fa      	bls.n	8002982 <_free_r+0x46>
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	1855      	adds	r5, r2, r1
 8002990:	42a5      	cmp	r5, r4
 8002992:	d10b      	bne.n	80029ac <_free_r+0x70>
 8002994:	6824      	ldr	r4, [r4, #0]
 8002996:	4421      	add	r1, r4
 8002998:	1854      	adds	r4, r2, r1
 800299a:	42a3      	cmp	r3, r4
 800299c:	6011      	str	r1, [r2, #0]
 800299e:	d1e0      	bne.n	8002962 <_free_r+0x26>
 80029a0:	681c      	ldr	r4, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	6053      	str	r3, [r2, #4]
 80029a6:	4421      	add	r1, r4
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	e7da      	b.n	8002962 <_free_r+0x26>
 80029ac:	d902      	bls.n	80029b4 <_free_r+0x78>
 80029ae:	230c      	movs	r3, #12
 80029b0:	6003      	str	r3, [r0, #0]
 80029b2:	e7d6      	b.n	8002962 <_free_r+0x26>
 80029b4:	6825      	ldr	r5, [r4, #0]
 80029b6:	1961      	adds	r1, r4, r5
 80029b8:	428b      	cmp	r3, r1
 80029ba:	bf04      	itt	eq
 80029bc:	6819      	ldreq	r1, [r3, #0]
 80029be:	685b      	ldreq	r3, [r3, #4]
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	bf04      	itt	eq
 80029c4:	1949      	addeq	r1, r1, r5
 80029c6:	6021      	streq	r1, [r4, #0]
 80029c8:	6054      	str	r4, [r2, #4]
 80029ca:	e7ca      	b.n	8002962 <_free_r+0x26>
 80029cc:	b003      	add	sp, #12
 80029ce:	bd30      	pop	{r4, r5, pc}
 80029d0:	200000ec 	.word	0x200000ec

080029d4 <_read_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	; (80029f4 <_read_r+0x20>)
 80029d8:	4604      	mov	r4, r0
 80029da:	4608      	mov	r0, r1
 80029dc:	4611      	mov	r1, r2
 80029de:	2200      	movs	r2, #0
 80029e0:	602a      	str	r2, [r5, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7fe ff2a 	bl	800183c <_read>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_read_r+0x1e>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_read_r+0x1e>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200000f4 	.word	0x200000f4

080029f8 <_fstat_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d07      	ldr	r5, [pc, #28]	; (8002a18 <_fstat_r+0x20>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	f7fe ff5e 	bl	80018c6 <_fstat>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	d102      	bne.n	8002a14 <_fstat_r+0x1c>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	b103      	cbz	r3, 8002a14 <_fstat_r+0x1c>
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
 8002a16:	bf00      	nop
 8002a18:	200000f4 	.word	0x200000f4

08002a1c <_isatty_r>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4d06      	ldr	r5, [pc, #24]	; (8002a38 <_isatty_r+0x1c>)
 8002a20:	2300      	movs	r3, #0
 8002a22:	4604      	mov	r4, r0
 8002a24:	4608      	mov	r0, r1
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	f7fe ff5d 	bl	80018e6 <_isatty>
 8002a2c:	1c43      	adds	r3, r0, #1
 8002a2e:	d102      	bne.n	8002a36 <_isatty_r+0x1a>
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	b103      	cbz	r3, 8002a36 <_isatty_r+0x1a>
 8002a34:	6023      	str	r3, [r4, #0]
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	200000f4 	.word	0x200000f4

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
