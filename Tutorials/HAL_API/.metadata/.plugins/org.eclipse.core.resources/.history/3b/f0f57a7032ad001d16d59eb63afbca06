
5_ADC_SingleConversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001f84  08001f84  00011f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f8c  08001f8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001fa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001fa8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b4  00000000  00000000  000263dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00027790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00027df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e7f  00000000  00000000  000283b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008050  00000000  00000000  0003e22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad29  00000000  00000000  0004627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001948  00000000  00000000  000d0ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001f6c 	.word	0x08001f6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001f6c 	.word	0x08001f6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_Init+0x40>)
 80004e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_Init+0x40>)
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_Init+0x40>)
 80004fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 fcc9 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	200f      	movs	r0, #15
 800050c:	f000 f810 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f000 f806 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40023c00 	.word	0x40023c00

08000520 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fccb 	bl	8000eea <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 fca1 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000028 	.word	0x20000028

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e033      	b.n	800064e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d109      	bne.n	8000602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f831 	bl	8000656 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	2b00      	cmp	r3, #0
 800060c:	d118      	bne.n	8000640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0202 	orr.w	r2, r3, #2
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fa8c 	bl	8000b40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f023 0303 	bic.w	r3, r3, #3
 8000636:	f043 0201 	orr.w	r2, r3, #1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	641a      	str	r2, [r3, #64]	; 0x40
 800063e:	e001      	b.n	8000644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800067e:	2b01      	cmp	r3, #1
 8000680:	d101      	bne.n	8000686 <HAL_ADC_Start+0x1a>
 8000682:	2302      	movs	r3, #2
 8000684:	e08a      	b.n	800079c <HAL_ADC_Start+0x130>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b01      	cmp	r3, #1
 800069a:	d018      	beq.n	80006ce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ac:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <HAL_ADC_Start+0x13c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3e      	ldr	r2, [pc, #248]	; (80007ac <HAL_ADC_Start+0x140>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0c9a      	lsrs	r2, r3, #18
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006c0:	e002      	b.n	80006c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f9      	bne.n	80006c2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d15e      	bne.n	800079a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000706:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800071a:	d106      	bne.n	800072a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000720:	f023 0206 	bic.w	r2, r3, #6
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	645a      	str	r2, [r3, #68]	; 0x44
 8000728:	e002      	b.n	8000730 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <HAL_ADC_Start+0x144>)
 800073a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000744:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10f      	bne.n	8000772 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11c      	bne.n	800079a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	e013      	b.n	800079a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_ADC_Start+0x148>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d10e      	bne.n	800079a <HAL_ADC_Start+0x12e>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d107      	bne.n	800079a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000798:	609a      	str	r2, [r3, #8]
      }
    }
  }

  /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	20000008 	.word	0x20000008
 80007ac:	431bde83 	.word	0x431bde83
 80007b0:	40012300 	.word	0x40012300
 80007b4:	40012000 	.word	0x40012000

080007b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d4:	d113      	bne.n	80007fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e4:	d10b      	bne.n	80007fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f043 0220 	orr.w	r2, r3, #32
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e05c      	b.n	80008b8 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80007fe:	f7ff fedb 	bl	80005b8 <HAL_GetTick>
 8000802:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000804:	e01a      	b.n	800083c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080c:	d016      	beq.n	800083c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <HAL_ADC_PollForConversion+0x6c>
 8000814:	f7ff fed0 	bl	80005b8 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	d20b      	bcs.n	800083c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f043 0204 	orr.w	r2, r3, #4
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000838:	2303      	movs	r3, #3
 800083a:	e03d      	b.n	80008b8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b02      	cmp	r3, #2
 8000848:	d1dd      	bne.n	8000806 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f06f 0212 	mvn.w	r2, #18
 8000852:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d123      	bne.n	80008b6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11f      	bne.n	80008b6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800088e:	2b00      	cmp	r3, #0
 8000890:	d111      	bne.n	80008b6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d105      	bne.n	80008b6 <HAL_ADC_PollForConversion+0xfe>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f043 0201 	orr.w	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d101      	bne.n	80008f8 <HAL_ADC_ConfigChannel+0x1c>
 80008f4:	2302      	movs	r3, #2
 80008f6:	e113      	b.n	8000b20 <HAL_ADC_ConfigChannel+0x244>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2201      	movs	r2, #1
 80008fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b09      	cmp	r3, #9
 8000906:	d925      	bls.n	8000954 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68d9      	ldr	r1, [r3, #12]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	3b1e      	subs	r3, #30
 800091e:	2207      	movs	r2, #7
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43da      	mvns	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	400a      	ands	r2, r1
 800092c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68d9      	ldr	r1, [r3, #12]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	4603      	mov	r3, r0
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4403      	add	r3, r0
 8000946:	3b1e      	subs	r3, #30
 8000948:	409a      	lsls	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	e022      	b.n	800099a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6919      	ldr	r1, [r3, #16]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	2207      	movs	r2, #7
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	400a      	ands	r2, r1
 8000976:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6919      	ldr	r1, [r3, #16]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	4603      	mov	r3, r0
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4403      	add	r3, r0
 8000990:	409a      	lsls	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d824      	bhi.n	80009ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	3b05      	subs	r3, #5
 80009b4:	221f      	movs	r2, #31
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	400a      	ands	r2, r1
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	3b05      	subs	r3, #5
 80009de:	fa00 f203 	lsl.w	r2, r0, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	e04c      	b.n	8000a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b0c      	cmp	r3, #12
 80009f2:	d824      	bhi.n	8000a3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	3b23      	subs	r3, #35	; 0x23
 8000a06:	221f      	movs	r2, #31
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43da      	mvns	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	400a      	ands	r2, r1
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3b23      	subs	r3, #35	; 0x23
 8000a30:	fa00 f203 	lsl.w	r2, r0, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3c:	e023      	b.n	8000a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	3b41      	subs	r3, #65	; 0x41
 8000a50:	221f      	movs	r2, #31
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	3b41      	subs	r3, #65	; 0x41
 8000a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_ADC_ConfigChannel+0x250>)
 8000a88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <HAL_ADC_ConfigChannel+0x254>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d10f      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d8>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b12      	cmp	r3, #18
 8000a9a:	d10b      	bne.n	8000ab4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_ADC_ConfigChannel+0x254>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_ADC_ConfigChannel+0x23a>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_ADC_ConfigChannel+0x258>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d003      	beq.n	8000ad0 <HAL_ADC_ConfigChannel+0x1f4>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b11      	cmp	r3, #17
 8000ace:	d122      	bne.n	8000b16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	605a      	str	r2, [r3, #4]

    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_ADC_ConfigChannel+0x258>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d111      	bne.n	8000b16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_ADC_ConfigChannel+0x25c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_ADC_ConfigChannel+0x260>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	0c9a      	lsrs	r2, r3, #18
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b08:	e002      	b.n	8000b10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f9      	bne.n	8000b0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40012300 	.word	0x40012300
 8000b30:	40012000 	.word	0x40012000
 8000b34:	10000012 	.word	0x10000012
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	431bde83 	.word	0x431bde83

08000b40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b48:	4b79      	ldr	r3, [pc, #484]	; (8000d30 <ADC_Init+0x1f0>)
 8000b4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6859      	ldr	r1, [r3, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	021a      	lsls	r2, r3, #8
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6899      	ldr	r1, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	4a58      	ldr	r2, [pc, #352]	; (8000d34 <ADC_Init+0x1f4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d022      	beq.n	8000c1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000be6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6899      	ldr	r1, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6899      	ldr	r1, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	e00f      	b.n	8000c3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 0202 	bic.w	r2, r2, #2
 8000c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6899      	ldr	r1, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7e1b      	ldrb	r3, [r3, #24]
 8000c58:	005a      	lsls	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d01b      	beq.n	8000ca4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6859      	ldr	r1, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	3b01      	subs	r3, #1
 8000c98:	035a      	lsls	r2, r3, #13
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	e007      	b.n	8000cb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cb2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	051a      	lsls	r2, r3, #20
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6899      	ldr	r1, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cf6:	025a      	lsls	r2, r3, #9
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6899      	ldr	r1, [r3, #8]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	029a      	lsls	r2, r3, #10
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	609a      	str	r2, [r3, #8]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40012300 	.word	0x40012300
 8000d34:	0f000001 	.word	0x0f000001

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e159      	b.n	80011d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8148 	bne.w	80011ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00b      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0xfc>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a2 	beq.w	80011ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b54      	ldr	r3, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x202>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1fe>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x300>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x304>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_GPIO_Init+0x304>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f aea2 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_RCC_GetHCLKFreq+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001228:	f7ff fff0 	bl	800120c <HAL_RCC_GetHCLKFreq>
 800122c:	4602      	mov	r2, r0
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	0a9b      	lsrs	r3, r3, #10
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	4903      	ldr	r1, [pc, #12]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	08001f84 	.word	0x08001f84

0800124c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001250:	f7ff ffdc 	bl	800120c <HAL_RCC_GetHCLKFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	0b5b      	lsrs	r3, r3, #13
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	4903      	ldr	r1, [pc, #12]	; (8001270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	08001f84 	.word	0x08001f84

08001274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e03f      	b.n	8001306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f837 	bl	800130e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f833 	bl	8001324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2220      	movs	r2, #32
 80012f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2220      	movs	r2, #32
 8001300:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001328:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800132c:	af00      	add	r7, sp, #0
 800132e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001332:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800133e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	ea40 0301 	orr.w	r3, r0, r1
 800134e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001350:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	431a      	orrs	r2, r3
 800135e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	431a      	orrs	r2, r3
 8001366:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	4313      	orrs	r3, r2
 800136e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001372:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800137e:	f021 010c 	bic.w	r1, r1, #12
 8001382:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800138c:	430b      	orrs	r3, r1
 800138e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001390:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800139c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013a0:	6999      	ldr	r1, [r3, #24]
 80013a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	ea40 0301 	orr.w	r3, r0, r1
 80013ac:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013b8:	f040 824a 	bne.w	8001850 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b96      	ldr	r3, [pc, #600]	; (800161c <UART_SetConfig+0x2f8>)
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d006      	beq.n	80013d6 <UART_SetConfig+0xb2>
 80013c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b94      	ldr	r3, [pc, #592]	; (8001620 <UART_SetConfig+0x2fc>)
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8129 	bne.w	8001628 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80013d6:	f7ff ff39 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 80013da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80013de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80013e8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80013ec:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80013f0:	4622      	mov	r2, r4
 80013f2:	462b      	mov	r3, r5
 80013f4:	1891      	adds	r1, r2, r2
 80013f6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80013fa:	415b      	adcs	r3, r3
 80013fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001400:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001404:	4621      	mov	r1, r4
 8001406:	1851      	adds	r1, r2, r1
 8001408:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800140c:	4629      	mov	r1, r5
 800140e:	414b      	adcs	r3, r1
 8001410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001420:	4649      	mov	r1, r9
 8001422:	00cb      	lsls	r3, r1, #3
 8001424:	4641      	mov	r1, r8
 8001426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800142a:	4641      	mov	r1, r8
 800142c:	00ca      	lsls	r2, r1, #3
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	4603      	mov	r3, r0
 8001434:	4622      	mov	r2, r4
 8001436:	189b      	adds	r3, r3, r2
 8001438:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800143c:	462b      	mov	r3, r5
 800143e:	460a      	mov	r2, r1
 8001440:	eb42 0303 	adc.w	r3, r2, r3
 8001444:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001448:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001454:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001458:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800145c:	460b      	mov	r3, r1
 800145e:	18db      	adds	r3, r3, r3
 8001460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001464:	4613      	mov	r3, r2
 8001466:	eb42 0303 	adc.w	r3, r2, r3
 800146a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800146e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001472:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001476:	f7fe feaf 	bl	80001d8 <__aeabi_uldivmod>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4b69      	ldr	r3, [pc, #420]	; (8001624 <UART_SetConfig+0x300>)
 8001480:	fba3 2302 	umull	r2, r3, r3, r2
 8001484:	095b      	lsrs	r3, r3, #5
 8001486:	011c      	lsls	r4, r3, #4
 8001488:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800148c:	2200      	movs	r2, #0
 800148e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001492:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001496:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800149a:	4642      	mov	r2, r8
 800149c:	464b      	mov	r3, r9
 800149e:	1891      	adds	r1, r2, r2
 80014a0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80014a4:	415b      	adcs	r3, r3
 80014a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014aa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80014ae:	4641      	mov	r1, r8
 80014b0:	1851      	adds	r1, r2, r1
 80014b2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80014b6:	4649      	mov	r1, r9
 80014b8:	414b      	adcs	r3, r1
 80014ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80014ca:	4659      	mov	r1, fp
 80014cc:	00cb      	lsls	r3, r1, #3
 80014ce:	4651      	mov	r1, sl
 80014d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014d4:	4651      	mov	r1, sl
 80014d6:	00ca      	lsls	r2, r1, #3
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	4642      	mov	r2, r8
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80014e6:	464b      	mov	r3, r9
 80014e8:	460a      	mov	r2, r1
 80014ea:	eb42 0303 	adc.w	r3, r2, r3
 80014ee:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80014f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014fe:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8001502:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8001506:	460b      	mov	r3, r1
 8001508:	18db      	adds	r3, r3, r3
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800150e:	4613      	mov	r3, r2
 8001510:	eb42 0303 	adc.w	r3, r2, r3
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001518:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800151c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001520:	f7fe fe5a 	bl	80001d8 <__aeabi_uldivmod>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4611      	mov	r1, r2
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <UART_SetConfig+0x300>)
 800152c:	fba3 2301 	umull	r2, r3, r3, r1
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	2264      	movs	r2, #100	; 0x64
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	1acb      	subs	r3, r1, r3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <UART_SetConfig+0x300>)
 8001542:	fba3 2302 	umull	r2, r3, r3, r2
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800154e:	441c      	add	r4, r3
 8001550:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001554:	2200      	movs	r2, #0
 8001556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800155a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800155e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001562:	4642      	mov	r2, r8
 8001564:	464b      	mov	r3, r9
 8001566:	1891      	adds	r1, r2, r2
 8001568:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800156c:	415b      	adcs	r3, r3
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001572:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001576:	4641      	mov	r1, r8
 8001578:	1851      	adds	r1, r2, r1
 800157a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800157e:	4649      	mov	r1, r9
 8001580:	414b      	adcs	r3, r1
 8001582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8001592:	4659      	mov	r1, fp
 8001594:	00cb      	lsls	r3, r1, #3
 8001596:	4651      	mov	r1, sl
 8001598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800159c:	4651      	mov	r1, sl
 800159e:	00ca      	lsls	r2, r1, #3
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	4603      	mov	r3, r0
 80015a6:	4642      	mov	r2, r8
 80015a8:	189b      	adds	r3, r3, r2
 80015aa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80015ae:	464b      	mov	r3, r9
 80015b0:	460a      	mov	r2, r1
 80015b2:	eb42 0303 	adc.w	r3, r2, r3
 80015b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80015c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80015ca:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80015ce:	460b      	mov	r3, r1
 80015d0:	18db      	adds	r3, r3, r3
 80015d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015d6:	4613      	mov	r3, r2
 80015d8:	eb42 0303 	adc.w	r3, r2, r3
 80015dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015e0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80015e4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80015e8:	f7fe fdf6 	bl	80001d8 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <UART_SetConfig+0x300>)
 80015f2:	fba3 1302 	umull	r1, r3, r3, r2
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2164      	movs	r1, #100	; 0x64
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	3332      	adds	r3, #50	; 0x32
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <UART_SetConfig+0x300>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	f003 0207 	and.w	r2, r3, #7
 8001610:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4422      	add	r2, r4
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e349      	b.n	8001cb0 <UART_SetConfig+0x98c>
 800161c:	40011000 	.word	0x40011000
 8001620:	40011400 	.word	0x40011400
 8001624:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001628:	f7ff fdfc 	bl	8001224 <HAL_RCC_GetPCLK1Freq>
 800162c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001630:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001634:	2200      	movs	r2, #0
 8001636:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800163a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800163e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001642:	4622      	mov	r2, r4
 8001644:	462b      	mov	r3, r5
 8001646:	1891      	adds	r1, r2, r2
 8001648:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800164c:	415b      	adcs	r3, r3
 800164e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001652:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001656:	4621      	mov	r1, r4
 8001658:	eb12 0a01 	adds.w	sl, r2, r1
 800165c:	4629      	mov	r1, r5
 800165e:	eb43 0b01 	adc.w	fp, r3, r1
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800166e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001676:	4692      	mov	sl, r2
 8001678:	469b      	mov	fp, r3
 800167a:	4623      	mov	r3, r4
 800167c:	eb1a 0303 	adds.w	r3, sl, r3
 8001680:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001684:	462b      	mov	r3, r5
 8001686:	eb4b 0303 	adc.w	r3, fp, r3
 800168a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800168e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800169a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800169e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80016a2:	460b      	mov	r3, r1
 80016a4:	18db      	adds	r3, r3, r3
 80016a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016aa:	4613      	mov	r3, r2
 80016ac:	eb42 0303 	adc.w	r3, r2, r3
 80016b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016b4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80016b8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80016bc:	f7fe fd8c 	bl	80001d8 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <UART_SetConfig+0x528>)
 80016c6:	fba3 2302 	umull	r2, r3, r3, r2
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	011c      	lsls	r4, r3, #4
 80016ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80016d8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80016dc:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80016e0:	4642      	mov	r2, r8
 80016e2:	464b      	mov	r3, r9
 80016e4:	1891      	adds	r1, r2, r2
 80016e6:	67b9      	str	r1, [r7, #120]	; 0x78
 80016e8:	415b      	adcs	r3, r3
 80016ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80016f0:	4641      	mov	r1, r8
 80016f2:	1851      	adds	r1, r2, r1
 80016f4:	6739      	str	r1, [r7, #112]	; 0x70
 80016f6:	4649      	mov	r1, r9
 80016f8:	414b      	adcs	r3, r1
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001708:	4659      	mov	r1, fp
 800170a:	00cb      	lsls	r3, r1, #3
 800170c:	4651      	mov	r1, sl
 800170e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001712:	4651      	mov	r1, sl
 8001714:	00ca      	lsls	r2, r1, #3
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	4603      	mov	r3, r0
 800171c:	4642      	mov	r2, r8
 800171e:	189b      	adds	r3, r3, r2
 8001720:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001724:	464b      	mov	r3, r9
 8001726:	460a      	mov	r2, r1
 8001728:	eb42 0303 	adc.w	r3, r2, r3
 800172c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001730:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800173c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001740:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001744:	460b      	mov	r3, r1
 8001746:	18db      	adds	r3, r3, r3
 8001748:	66bb      	str	r3, [r7, #104]	; 0x68
 800174a:	4613      	mov	r3, r2
 800174c:	eb42 0303 	adc.w	r3, r2, r3
 8001750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001752:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001756:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800175a:	f7fe fd3d 	bl	80001d8 <__aeabi_uldivmod>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4611      	mov	r1, r2
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <UART_SetConfig+0x528>)
 8001766:	fba3 2301 	umull	r2, r3, r3, r1
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2264      	movs	r2, #100	; 0x64
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	1acb      	subs	r3, r1, r3
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <UART_SetConfig+0x528>)
 800177c:	fba3 2302 	umull	r2, r3, r3, r2
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001788:	441c      	add	r4, r3
 800178a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001794:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001798:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800179c:	4642      	mov	r2, r8
 800179e:	464b      	mov	r3, r9
 80017a0:	1891      	adds	r1, r2, r2
 80017a2:	6639      	str	r1, [r7, #96]	; 0x60
 80017a4:	415b      	adcs	r3, r3
 80017a6:	667b      	str	r3, [r7, #100]	; 0x64
 80017a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ac:	4641      	mov	r1, r8
 80017ae:	1851      	adds	r1, r2, r1
 80017b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80017b2:	4649      	mov	r1, r9
 80017b4:	414b      	adcs	r3, r1
 80017b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80017c4:	4659      	mov	r1, fp
 80017c6:	00cb      	lsls	r3, r1, #3
 80017c8:	4651      	mov	r1, sl
 80017ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ce:	4651      	mov	r1, sl
 80017d0:	00ca      	lsls	r2, r1, #3
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	4642      	mov	r2, r8
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80017e0:	464b      	mov	r3, r9
 80017e2:	460a      	mov	r2, r1
 80017e4:	eb42 0303 	adc.w	r3, r2, r3
 80017e8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80017ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80017f8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80017fc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001800:	460b      	mov	r3, r1
 8001802:	18db      	adds	r3, r3, r3
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
 8001806:	4613      	mov	r3, r2
 8001808:	eb42 0303 	adc.w	r3, r2, r3
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
 800180e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001812:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001816:	f7fe fcdf 	bl	80001d8 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <UART_SetConfig+0x528>)
 8001820:	fba3 1302 	umull	r1, r3, r3, r2
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	2164      	movs	r1, #100	; 0x64
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	3332      	adds	r3, #50	; 0x32
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <UART_SetConfig+0x528>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	f003 0207 	and.w	r2, r3, #7
 800183e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4422      	add	r2, r4
 8001846:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001848:	e232      	b.n	8001cb0 <UART_SetConfig+0x98c>
 800184a:	bf00      	nop
 800184c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001850:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <UART_SetConfig+0x768>)
 8001858:	429a      	cmp	r2, r3
 800185a:	d006      	beq.n	800186a <UART_SetConfig+0x546>
 800185c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <UART_SetConfig+0x76c>)
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8117 	bne.w	8001a98 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800186a:	f7ff fcef 	bl	800124c <HAL_RCC_GetPCLK2Freq>
 800186e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001872:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001876:	2200      	movs	r2, #0
 8001878:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800187c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001880:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001884:	4622      	mov	r2, r4
 8001886:	462b      	mov	r3, r5
 8001888:	1891      	adds	r1, r2, r2
 800188a:	64b9      	str	r1, [r7, #72]	; 0x48
 800188c:	415b      	adcs	r3, r3
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001894:	4621      	mov	r1, r4
 8001896:	eb12 0801 	adds.w	r8, r2, r1
 800189a:	4629      	mov	r1, r5
 800189c:	eb43 0901 	adc.w	r9, r3, r1
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b4:	4690      	mov	r8, r2
 80018b6:	4699      	mov	r9, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	eb18 0303 	adds.w	r3, r8, r3
 80018be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018c2:	462b      	mov	r3, r5
 80018c4:	eb49 0303 	adc.w	r3, r9, r3
 80018c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80018cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018d8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80018e8:	4629      	mov	r1, r5
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4621      	mov	r1, r4
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4621      	mov	r1, r4
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80018fa:	f7fe fc6d 	bl	80001d8 <__aeabi_uldivmod>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <UART_SetConfig+0x770>)
 8001904:	fba3 2302 	umull	r2, r3, r3, r2
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	011c      	lsls	r4, r3, #4
 800190c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001910:	2200      	movs	r2, #0
 8001912:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001916:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800191a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800191e:	4642      	mov	r2, r8
 8001920:	464b      	mov	r3, r9
 8001922:	1891      	adds	r1, r2, r2
 8001924:	6439      	str	r1, [r7, #64]	; 0x40
 8001926:	415b      	adcs	r3, r3
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
 800192a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800192e:	4641      	mov	r1, r8
 8001930:	1851      	adds	r1, r2, r1
 8001932:	63b9      	str	r1, [r7, #56]	; 0x38
 8001934:	4649      	mov	r1, r9
 8001936:	414b      	adcs	r3, r1
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001946:	4659      	mov	r1, fp
 8001948:	00cb      	lsls	r3, r1, #3
 800194a:	4651      	mov	r1, sl
 800194c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001950:	4651      	mov	r1, sl
 8001952:	00ca      	lsls	r2, r1, #3
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	4603      	mov	r3, r0
 800195a:	4642      	mov	r2, r8
 800195c:	189b      	adds	r3, r3, r2
 800195e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001962:	464b      	mov	r3, r9
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800196e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800197a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800198a:	4649      	mov	r1, r9
 800198c:	008b      	lsls	r3, r1, #2
 800198e:	4641      	mov	r1, r8
 8001990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001994:	4641      	mov	r1, r8
 8001996:	008a      	lsls	r2, r1, #2
 8001998:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800199c:	f7fe fc1c 	bl	80001d8 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <UART_SetConfig+0x770>)
 80019a6:	fba3 1302 	umull	r1, r3, r3, r2
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2164      	movs	r1, #100	; 0x64
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	3332      	adds	r3, #50	; 0x32
 80019b8:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <UART_SetConfig+0x770>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c4:	441c      	add	r4, r3
 80019c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ca:	2200      	movs	r2, #0
 80019cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80019d0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80019d4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	1891      	adds	r1, r2, r2
 80019de:	6339      	str	r1, [r7, #48]	; 0x30
 80019e0:	415b      	adcs	r3, r3
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
 80019e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019e8:	4641      	mov	r1, r8
 80019ea:	1851      	adds	r1, r2, r1
 80019ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80019ee:	4649      	mov	r1, r9
 80019f0:	414b      	adcs	r3, r1
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001a00:	4659      	mov	r1, fp
 8001a02:	00cb      	lsls	r3, r1, #3
 8001a04:	4651      	mov	r1, sl
 8001a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	00ca      	lsls	r2, r1, #3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	4642      	mov	r2, r8
 8001a16:	189b      	adds	r3, r3, r2
 8001a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	460a      	mov	r2, r1
 8001a20:	eb42 0303 	adc.w	r3, r2, r3
 8001a24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a34:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001a44:	4649      	mov	r1, r9
 8001a46:	008b      	lsls	r3, r1, #2
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a4e:	4641      	mov	r1, r8
 8001a50:	008a      	lsls	r2, r1, #2
 8001a52:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001a56:	f7fe fbbf 	bl	80001d8 <__aeabi_uldivmod>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <UART_SetConfig+0x770>)
 8001a60:	fba3 1302 	umull	r1, r3, r3, r2
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	2164      	movs	r1, #100	; 0x64
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	3332      	adds	r3, #50	; 0x32
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <UART_SetConfig+0x770>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	f003 020f 	and.w	r2, r3, #15
 8001a7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4422      	add	r2, r4
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e112      	b.n	8001cb0 <UART_SetConfig+0x98c>
 8001a8a:	bf00      	nop
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a98:	f7ff fbc4 	bl	8001224 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001aa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001aaa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001aae:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	464b      	mov	r3, r9
 8001ab6:	1891      	adds	r1, r2, r2
 8001ab8:	6239      	str	r1, [r7, #32]
 8001aba:	415b      	adcs	r3, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	1854      	adds	r4, r2, r1
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	eb43 0501 	adc.w	r5, r3, r1
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	00eb      	lsls	r3, r5, #3
 8001ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ada:	00e2      	lsls	r2, r4, #3
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	18e3      	adds	r3, r4, r3
 8001ae4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001ae8:	464b      	mov	r3, r9
 8001aea:	eb45 0303 	adc.w	r3, r5, r3
 8001aee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001af2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001afe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001b0e:	4629      	mov	r1, r5
 8001b10:	008b      	lsls	r3, r1, #2
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b18:	4621      	mov	r1, r4
 8001b1a:	008a      	lsls	r2, r1, #2
 8001b1c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001b20:	f7fe fb5a 	bl	80001d8 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <UART_SetConfig+0x998>)
 8001b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	011c      	lsls	r4, r3, #4
 8001b32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b36:	2200      	movs	r2, #0
 8001b38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b3c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001b40:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001b44:	4642      	mov	r2, r8
 8001b46:	464b      	mov	r3, r9
 8001b48:	1891      	adds	r1, r2, r2
 8001b4a:	61b9      	str	r1, [r7, #24]
 8001b4c:	415b      	adcs	r3, r3
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b54:	4641      	mov	r1, r8
 8001b56:	1851      	adds	r1, r2, r1
 8001b58:	6139      	str	r1, [r7, #16]
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	414b      	adcs	r3, r1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	00cb      	lsls	r3, r1, #3
 8001b70:	4651      	mov	r1, sl
 8001b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b76:	4651      	mov	r1, sl
 8001b78:	00ca      	lsls	r2, r1, #3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4642      	mov	r2, r8
 8001b82:	189b      	adds	r3, r3, r2
 8001b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	eb42 0303 	adc.w	r3, r2, r3
 8001b90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ba0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	008b      	lsls	r3, r1, #2
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bba:	4641      	mov	r1, r8
 8001bbc:	008a      	lsls	r2, r1, #2
 8001bbe:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001bc2:	f7fe fb09 	bl	80001d8 <__aeabi_uldivmod>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <UART_SetConfig+0x998>)
 8001bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	2164      	movs	r1, #100	; 0x64
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	3332      	adds	r3, #50	; 0x32
 8001bde:	4a37      	ldr	r2, [pc, #220]	; (8001cbc <UART_SetConfig+0x998>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bea:	441c      	add	r4, r3
 8001bec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001bfa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	1891      	adds	r1, r2, r2
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	415b      	adcs	r3, r3
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c0e:	4641      	mov	r1, r8
 8001c10:	1851      	adds	r1, r2, r1
 8001c12:	6039      	str	r1, [r7, #0]
 8001c14:	4649      	mov	r1, r9
 8001c16:	414b      	adcs	r3, r1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c26:	4659      	mov	r1, fp
 8001c28:	00cb      	lsls	r3, r1, #3
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c30:	4651      	mov	r1, sl
 8001c32:	00ca      	lsls	r2, r1, #3
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	189b      	adds	r3, r3, r2
 8001c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c42:	464b      	mov	r3, r9
 8001c44:	460a      	mov	r2, r1
 8001c46:	eb42 0303 	adc.w	r3, r2, r3
 8001c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	008b      	lsls	r3, r1, #2
 8001c6e:	4641      	mov	r1, r8
 8001c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c74:	4641      	mov	r1, r8
 8001c76:	008a      	lsls	r2, r1, #2
 8001c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c7c:	f7fe faac 	bl	80001d8 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <UART_SetConfig+0x998>)
 8001c86:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2164      	movs	r1, #100	; 0x64
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	3332      	adds	r3, #50	; 0x32
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <UART_SetConfig+0x998>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4422      	add	r2, r4
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	e7ff      	b.n	8001cb0 <UART_SetConfig+0x98c>
 8001cb0:	bf00      	nop
 8001cb2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cbc:	51eb851f 	.word	0x51eb851f

08001cc0 <pa0_adc_read>:


extern ADC_HandleTypeDef hadc1;

uint32_t pa0_adc_read(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <pa0_adc_read+0x10>)
 8001cc6:	f7fe fdfb 	bl	80008c0 <HAL_ADC_GetValue>
 8001cca:	4603      	mov	r3, r0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000030 	.word	0x20000030

08001cd4 <adc_pa0_single_conv_init>:

void adc_pa0_single_conv_init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
	// Configure pa0 as analog pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d14:	2301      	movs	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4826      	ldr	r0, [pc, #152]	; (8001dc0 <adc_pa0_single_conv_init+0xec>)
 8001d28:	f7ff f8ec 	bl	8000f04 <HAL_GPIO_Init>

	// Configure adc module for continuos conversion
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <adc_pa0_single_conv_init+0xe8>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]

	hadc1.Instance = ADC1;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <adc_pa0_single_conv_init+0xf4>)
 8001d4c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d54:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 0;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <adc_pa0_single_conv_init+0xf8>)
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = DISABLE;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
	HAL_ADC_Init(&hadc1);
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001d98:	f7fe fc1a 	bl	80005d0 <HAL_ADC_Init>

	// Configure ADC Channels
	sConfig.Channel = ADC_CHANNEL_0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001da4:	2307      	movs	r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <adc_pa0_single_conv_init+0xf0>)
 8001db0:	f7fe fd94 	bl	80008dc <HAL_ADC_ConfigChannel>
}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	20000030 	.word	0x20000030
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	0f000001 	.word	0x0f000001

08001dd0 <main>:
#include <string.h>
uint32_t sensorValue;
ADC_HandleTypeDef hadc1;
char value[5];
int main()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

	HAL_Init();
 8001dd4:	f7fe fb82 	bl	80004dc <HAL_Init>
	uart_init();
 8001dd8:	f000 f81a 	bl	8001e10 <uart_init>

	adc_pa0_single_conv_init();
 8001ddc:	f7ff ff7a 	bl	8001cd4 <adc_pa0_single_conv_init>

	while(1)
	{
		// 1. Start ADC
		HAL_ADC_Start(&hadc1); // start ADC for each time
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <main+0x2c>)
 8001de2:	f7fe fc43 	bl	800066c <HAL_ADC_Start>

		// 2. Poll for Conversion
		HAL_ADC_PollForConversion(&hadc1, 1);
 8001de6:	2101      	movs	r1, #1
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <main+0x2c>)
 8001dea:	f7fe fce5 	bl	80007b8 <HAL_ADC_PollForConversion>

		// 3. Get Conversion
		sensorValue = pa0_adc_read();
 8001dee:	f7ff ff67 	bl	8001cc0 <pa0_adc_read>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a02      	ldr	r2, [pc, #8]	; (8001e00 <main+0x30>)
 8001df6:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1); // start ADC for each time
 8001df8:	e7f2      	b.n	8001de0 <main+0x10>
 8001dfa:	bf00      	nop
 8001dfc:	20000030 	.word	0x20000030
 8001e00:	2000002c 	.word	0x2000002c

08001e04 <SysTick_Handler>:


// Interrupt Service Routine
// callback function
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001e08:	f7fe fbc2 	bl	8000590 <HAL_IncTick>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <uart_init>:
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
	return ch;
}

void uart_init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]

	// Enable UART Pins Clock Access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <uart_init+0xb0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <uart_init+0xb0>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <uart_init+0xb0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]

	// Enable UART Module Clock Access
	__HAL_RCC_USART2_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <uart_init+0xb0>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <uart_init+0xb0>)
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <uart_init+0xb0>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

	// Configure Pins to Act as Alternate Func Pins
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001e5e:	230c      	movs	r3, #12
 8001e60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <uart_init+0xb4>)
 8001e7a:	f7ff f843 	bl	8000f04 <HAL_GPIO_Init>

	// Configure UART Module
	huart2.Instance = USART2;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <uart_init+0xb8>)
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <uart_init+0xbc>)
 8001e82:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <uart_init+0xb8>)
 8001e86:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e8a:	605a      	str	r2, [r3, #4]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <uart_init+0xb8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
	huart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <uart_init+0xb8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <uart_init+0xb8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
	huart2.Init.Mode = UART_MODE_TX;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <uart_init+0xb8>)
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <uart_init+0xb8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <uart_init+0xb8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <uart_init+0xb8>)
 8001eb2:	f7ff f9df 	bl	8001274 <HAL_UART_Init>

}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	20000078 	.word	0x20000078
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ed2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ed4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001eda:	490d      	ldr	r1, [pc, #52]	; (8001f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <LoopForever+0xe>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	; (8001f1c <LoopForever+0x16>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001efe:	f000 f811 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f02:	f7ff ff65 	bl	8001dd0 <main>

08001f06 <LoopForever>:

LoopForever:
    b LoopForever
 8001f06:	e7fe      	b.n	8001f06 <LoopForever>
  ldr   r0, =_estack
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f14:	08001f9c 	.word	0x08001f9c
  ldr r2, =_sbss
 8001f18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f1c:	200000b8 	.word	0x200000b8

08001f20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4d0d      	ldr	r5, [pc, #52]	; (8001f5c <__libc_init_array+0x38>)
 8001f28:	4c0d      	ldr	r4, [pc, #52]	; (8001f60 <__libc_init_array+0x3c>)
 8001f2a:	1b64      	subs	r4, r4, r5
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2600      	movs	r6, #0
 8001f30:	42a6      	cmp	r6, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	4d0b      	ldr	r5, [pc, #44]	; (8001f64 <__libc_init_array+0x40>)
 8001f36:	4c0c      	ldr	r4, [pc, #48]	; (8001f68 <__libc_init_array+0x44>)
 8001f38:	f000 f818 	bl	8001f6c <_init>
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	2600      	movs	r6, #0
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4c:	4798      	blx	r3
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f56:	4798      	blx	r3
 8001f58:	3601      	adds	r6, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	08001f94 	.word	0x08001f94
 8001f60:	08001f94 	.word	0x08001f94
 8001f64:	08001f94 	.word	0x08001f94
 8001f68:	08001f98 	.word	0x08001f98

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
