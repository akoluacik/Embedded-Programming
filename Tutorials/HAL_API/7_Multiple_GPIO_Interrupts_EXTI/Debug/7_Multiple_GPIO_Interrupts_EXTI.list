
7_Multiple_GPIO_Interrupts_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cdc  08002cdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  08002d54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002d54  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054dc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012df  00000000  00000000  0002557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00026860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00026e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016770  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000736d  00000000  00000000  0003db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf44  00000000  00000000  00044efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  000d0e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002be8 	.word	0x08002be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002be8 	.word	0x08002be8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_Init+0x40>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_Init+0x40>)
 800059a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x40>)
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f933 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f810 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f000 f806 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023c00 	.word	0x40023c00

080005c8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f943 	bl	8000882 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f90b 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000008 	.word	0x20000008
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	2000008c 	.word	0x2000008c

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000008c 	.word	0x2000008c

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff8e 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff29 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff3e 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff8e 	bl	800076c <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5d 	bl	8000718 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff31 	bl	80006dc <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffa2 	bl	80007d4 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e159      	b.n	8000b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b8:	2201      	movs	r2, #1
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	f040 8148 	bne.w	8000b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0x5a>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d130      	bne.n	8000958 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	f003 0201 	and.w	r2, r3, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d003      	beq.n	8000998 <HAL_GPIO_Init+0xfc>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b12      	cmp	r3, #18
 8000996:	d123      	bne.n	80009e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	08da      	lsrs	r2, r3, #3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3208      	adds	r2, #8
 80009a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	f003 0307 	and.w	r3, r3, #7
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	220f      	movs	r2, #15
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	691a      	ldr	r2, [r3, #16]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	69b9      	ldr	r1, [r7, #24]
 80009dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0203 	and.w	r2, r3, #3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 80a2 	beq.w	8000b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b54      	ldr	r3, [pc, #336]	; (8000b84 <HAL_GPIO_Init+0x2e8>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a3e:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <HAL_GPIO_Init+0x2ec>)
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a49      	ldr	r2, [pc, #292]	; (8000b8c <HAL_GPIO_Init+0x2f0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d019      	beq.n	8000a9e <HAL_GPIO_Init+0x202>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a48      	ldr	r2, [pc, #288]	; (8000b90 <HAL_GPIO_Init+0x2f4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1fe>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a47      	ldr	r2, [pc, #284]	; (8000b94 <HAL_GPIO_Init+0x2f8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1fa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a46      	ldr	r2, [pc, #280]	; (8000b98 <HAL_GPIO_Init+0x2fc>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1f6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a45      	ldr	r2, [pc, #276]	; (8000b9c <HAL_GPIO_Init+0x300>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1f2>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e008      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a8e:	2307      	movs	r3, #7
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e004      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a96:	2302      	movs	r3, #2
 8000a98:	e002      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x204>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	f002 0203 	and.w	r2, r2, #3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4093      	lsls	r3, r2
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab0:	4935      	ldr	r1, [pc, #212]	; (8000b88 <HAL_GPIO_Init+0x2ec>)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b36:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_GPIO_Init+0x304>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	f67f aea2 	bls.w	80008b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40013800 	.word	0x40013800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40013c00 	.word	0x40013c00

08000ba4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d104      	bne.n	8000bc8 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	041a      	lsls	r2, r3, #16
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bc8:	887a      	ldrh	r2, [r7, #2]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fec0 	bl	8001980 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013c00 	.word	0x40013c00

08000c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c28:	f7ff fff0 	bl	8000c0c <HAL_RCC_GetHCLKFreq>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	0a9b      	lsrs	r3, r3, #10
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	4903      	ldr	r1, [pc, #12]	; (8000c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c3a:	5ccb      	ldrb	r3, [r1, r3]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	08002c34 	.word	0x08002c34

08000c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c50:	f7ff ffdc 	bl	8000c0c <HAL_RCC_GetHCLKFreq>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	0b5b      	lsrs	r3, r3, #13
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	4903      	ldr	r1, [pc, #12]	; (8000c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c62:	5ccb      	ldrb	r3, [r1, r3]
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	08002c34 	.word	0x08002c34

08000c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e03f      	b.n	8000d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f837 	bl	8000d0e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2224      	movs	r2, #36	; 0x24
 8000ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f915 	bl	8000ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2220      	movs	r2, #32
 8000d00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b088      	sub	sp, #32
 8000d26:	af02      	add	r7, sp, #8
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b20      	cmp	r3, #32
 8000d40:	f040 8083 	bne.w	8000e4a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <HAL_UART_Transmit+0x2e>
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e07b      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d101      	bne.n	8000d62 <HAL_UART_Transmit+0x40>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e074      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2221      	movs	r2, #33	; 0x21
 8000d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000d78:	f7ff fc72 	bl	8000660 <HAL_GetTick>
 8000d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	88fa      	ldrh	r2, [r7, #6]
 8000d82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000d92:	e042      	b.n	8000e1a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000daa:	d122      	bne.n	8000df2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2200      	movs	r2, #0
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f84c 	bl	8000e54 <UART_WaitOnFlagUntilTimeout>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e042      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dd8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3302      	adds	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	e017      	b.n	8000e1a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	e013      	b.n	8000e1a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f829 	bl	8000e54 <UART_WaitOnFlagUntilTimeout>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e01f      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1b7      	bne.n	8000d94 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 f810 	bl	8000e54 <UART_WaitOnFlagUntilTimeout>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e006      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2220      	movs	r2, #32
 8000e42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000e4a:	2302      	movs	r3, #2
  }
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e64:	e02c      	b.n	8000ec0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d028      	beq.n	8000ec0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8000e74:	f7ff fbf4 	bl	8000660 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d21d      	bcs.n	8000ec0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2220      	movs	r2, #32
 8000eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e00f      	b.n	8000ee0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	bf0c      	ite	eq
 8000ed0:	2301      	moveq	r3, #1
 8000ed2:	2300      	movne	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d0c3      	beq.n	8000e66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ef6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f06:	68d9      	ldr	r1, [r3, #12]
 8000f08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	ea40 0301 	orr.w	r3, r0, r1
 8000f12:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000f42:	f021 010c 	bic.w	r1, r1, #12
 8000f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000f50:	430b      	orrs	r3, r1
 8000f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f64:	6999      	ldr	r1, [r3, #24]
 8000f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	ea40 0301 	orr.w	r3, r0, r1
 8000f70:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7c:	f040 824a 	bne.w	8001414 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b96      	ldr	r3, [pc, #600]	; (80011e0 <UART_SetConfig+0x2f8>)
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d006      	beq.n	8000f9a <UART_SetConfig+0xb2>
 8000f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b94      	ldr	r3, [pc, #592]	; (80011e4 <UART_SetConfig+0x2fc>)
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8129 	bne.w	80011ec <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f9a:	f7ff fe57 	bl	8000c4c <HAL_RCC_GetPCLK2Freq>
 8000f9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000fac:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8000fb0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	1891      	adds	r1, r2, r2
 8000fba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8000fbe:	415b      	adcs	r3, r3
 8000fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000fc4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000fc8:	4621      	mov	r1, r4
 8000fca:	1851      	adds	r1, r2, r1
 8000fcc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	414b      	adcs	r3, r1
 8000fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	00cb      	lsls	r3, r1, #3
 8000fe8:	4641      	mov	r1, r8
 8000fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000fee:	4641      	mov	r1, r8
 8000ff0:	00ca      	lsls	r2, r1, #3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	189b      	adds	r3, r3, r2
 8000ffc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001000:	462b      	mov	r3, r5
 8001002:	460a      	mov	r2, r1
 8001004:	eb42 0303 	adc.w	r3, r2, r3
 8001008:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800100c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001018:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800101c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001020:	460b      	mov	r3, r1
 8001022:	18db      	adds	r3, r3, r3
 8001024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001028:	4613      	mov	r3, r2
 800102a:	eb42 0303 	adc.w	r3, r2, r3
 800102e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001032:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001036:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800103a:	f7ff f921 	bl	8000280 <__aeabi_uldivmod>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <UART_SetConfig+0x300>)
 8001044:	fba3 2302 	umull	r2, r3, r3, r2
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	011c      	lsls	r4, r3, #4
 800104c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001050:	2200      	movs	r2, #0
 8001052:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001056:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800105a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800105e:	4642      	mov	r2, r8
 8001060:	464b      	mov	r3, r9
 8001062:	1891      	adds	r1, r2, r2
 8001064:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001068:	415b      	adcs	r3, r3
 800106a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800106e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001072:	4641      	mov	r1, r8
 8001074:	1851      	adds	r1, r2, r1
 8001076:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800107a:	4649      	mov	r1, r9
 800107c:	414b      	adcs	r3, r1
 800107e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800108e:	4659      	mov	r1, fp
 8001090:	00cb      	lsls	r3, r1, #3
 8001092:	4651      	mov	r1, sl
 8001094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001098:	4651      	mov	r1, sl
 800109a:	00ca      	lsls	r2, r1, #3
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	4603      	mov	r3, r0
 80010a2:	4642      	mov	r2, r8
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80010aa:	464b      	mov	r3, r9
 80010ac:	460a      	mov	r2, r1
 80010ae:	eb42 0303 	adc.w	r3, r2, r3
 80010b2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80010b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010c2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80010c6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80010ca:	460b      	mov	r3, r1
 80010cc:	18db      	adds	r3, r3, r3
 80010ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010d2:	4613      	mov	r3, r2
 80010d4:	eb42 0303 	adc.w	r3, r2, r3
 80010d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80010dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80010e0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80010e4:	f7ff f8cc 	bl	8000280 <__aeabi_uldivmod>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4611      	mov	r1, r2
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <UART_SetConfig+0x300>)
 80010f0:	fba3 2301 	umull	r2, r3, r3, r1
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	1acb      	subs	r3, r1, r3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <UART_SetConfig+0x300>)
 8001106:	fba3 2302 	umull	r2, r3, r3, r2
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001112:	441c      	add	r4, r3
 8001114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001118:	2200      	movs	r2, #0
 800111a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800111e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001122:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001126:	4642      	mov	r2, r8
 8001128:	464b      	mov	r3, r9
 800112a:	1891      	adds	r1, r2, r2
 800112c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001130:	415b      	adcs	r3, r3
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001136:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800113a:	4641      	mov	r1, r8
 800113c:	1851      	adds	r1, r2, r1
 800113e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001142:	4649      	mov	r1, r9
 8001144:	414b      	adcs	r3, r1
 8001146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8001156:	4659      	mov	r1, fp
 8001158:	00cb      	lsls	r3, r1, #3
 800115a:	4651      	mov	r1, sl
 800115c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001160:	4651      	mov	r1, sl
 8001162:	00ca      	lsls	r2, r1, #3
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	4603      	mov	r3, r0
 800116a:	4642      	mov	r2, r8
 800116c:	189b      	adds	r3, r3, r2
 800116e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8001172:	464b      	mov	r3, r9
 8001174:	460a      	mov	r2, r1
 8001176:	eb42 0303 	adc.w	r3, r2, r3
 800117a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800117e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800118a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800118e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8001192:	460b      	mov	r3, r1
 8001194:	18db      	adds	r3, r3, r3
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800119a:	4613      	mov	r3, r2
 800119c:	eb42 0303 	adc.w	r3, r2, r3
 80011a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011a4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80011a8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80011ac:	f7ff f868 	bl	8000280 <__aeabi_uldivmod>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <UART_SetConfig+0x300>)
 80011b6:	fba3 1302 	umull	r1, r3, r3, r2
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2164      	movs	r1, #100	; 0x64
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	3332      	adds	r3, #50	; 0x32
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <UART_SetConfig+0x300>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	f003 0207 	and.w	r2, r3, #7
 80011d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4422      	add	r2, r4
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	e349      	b.n	8001874 <UART_SetConfig+0x98c>
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80011ec:	f7ff fd1a 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 80011f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011f8:	2200      	movs	r2, #0
 80011fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011fe:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001202:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001206:	4622      	mov	r2, r4
 8001208:	462b      	mov	r3, r5
 800120a:	1891      	adds	r1, r2, r2
 800120c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001210:	415b      	adcs	r3, r3
 8001212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001216:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800121a:	4621      	mov	r1, r4
 800121c:	eb12 0a01 	adds.w	sl, r2, r1
 8001220:	4629      	mov	r1, r5
 8001222:	eb43 0b01 	adc.w	fp, r3, r1
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001232:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800123a:	4692      	mov	sl, r2
 800123c:	469b      	mov	fp, r3
 800123e:	4623      	mov	r3, r4
 8001240:	eb1a 0303 	adds.w	r3, sl, r3
 8001244:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001248:	462b      	mov	r3, r5
 800124a:	eb4b 0303 	adc.w	r3, fp, r3
 800124e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800125e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001262:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001266:	460b      	mov	r3, r1
 8001268:	18db      	adds	r3, r3, r3
 800126a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800126e:	4613      	mov	r3, r2
 8001270:	eb42 0303 	adc.w	r3, r2, r3
 8001274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001278:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800127c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001280:	f7fe fffe 	bl	8000280 <__aeabi_uldivmod>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <UART_SetConfig+0x528>)
 800128a:	fba3 2302 	umull	r2, r3, r3, r2
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	011c      	lsls	r4, r3, #4
 8001292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001296:	2200      	movs	r2, #0
 8001298:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800129c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80012a0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80012a4:	4642      	mov	r2, r8
 80012a6:	464b      	mov	r3, r9
 80012a8:	1891      	adds	r1, r2, r2
 80012aa:	67b9      	str	r1, [r7, #120]	; 0x78
 80012ac:	415b      	adcs	r3, r3
 80012ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80012b4:	4641      	mov	r1, r8
 80012b6:	1851      	adds	r1, r2, r1
 80012b8:	6739      	str	r1, [r7, #112]	; 0x70
 80012ba:	4649      	mov	r1, r9
 80012bc:	414b      	adcs	r3, r1
 80012be:	677b      	str	r3, [r7, #116]	; 0x74
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80012cc:	4659      	mov	r1, fp
 80012ce:	00cb      	lsls	r3, r1, #3
 80012d0:	4651      	mov	r1, sl
 80012d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012d6:	4651      	mov	r1, sl
 80012d8:	00ca      	lsls	r2, r1, #3
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	4642      	mov	r2, r8
 80012e2:	189b      	adds	r3, r3, r2
 80012e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012e8:	464b      	mov	r3, r9
 80012ea:	460a      	mov	r2, r1
 80012ec:	eb42 0303 	adc.w	r3, r2, r3
 80012f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80012f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001300:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001304:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001308:	460b      	mov	r3, r1
 800130a:	18db      	adds	r3, r3, r3
 800130c:	66bb      	str	r3, [r7, #104]	; 0x68
 800130e:	4613      	mov	r3, r2
 8001310:	eb42 0303 	adc.w	r3, r2, r3
 8001314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001316:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800131a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800131e:	f7fe ffaf 	bl	8000280 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4611      	mov	r1, r2
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <UART_SetConfig+0x528>)
 800132a:	fba3 2301 	umull	r2, r3, r3, r1
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2264      	movs	r2, #100	; 0x64
 8001332:	fb02 f303 	mul.w	r3, r2, r3
 8001336:	1acb      	subs	r3, r1, r3
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <UART_SetConfig+0x528>)
 8001340:	fba3 2302 	umull	r2, r3, r3, r2
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800134c:	441c      	add	r4, r3
 800134e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001352:	2200      	movs	r2, #0
 8001354:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001358:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800135c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001360:	4642      	mov	r2, r8
 8001362:	464b      	mov	r3, r9
 8001364:	1891      	adds	r1, r2, r2
 8001366:	6639      	str	r1, [r7, #96]	; 0x60
 8001368:	415b      	adcs	r3, r3
 800136a:	667b      	str	r3, [r7, #100]	; 0x64
 800136c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001370:	4641      	mov	r1, r8
 8001372:	1851      	adds	r1, r2, r1
 8001374:	65b9      	str	r1, [r7, #88]	; 0x58
 8001376:	4649      	mov	r1, r9
 8001378:	414b      	adcs	r3, r1
 800137a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001388:	4659      	mov	r1, fp
 800138a:	00cb      	lsls	r3, r1, #3
 800138c:	4651      	mov	r1, sl
 800138e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001392:	4651      	mov	r1, sl
 8001394:	00ca      	lsls	r2, r1, #3
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	4603      	mov	r3, r0
 800139c:	4642      	mov	r2, r8
 800139e:	189b      	adds	r3, r3, r2
 80013a0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80013a4:	464b      	mov	r3, r9
 80013a6:	460a      	mov	r2, r1
 80013a8:	eb42 0303 	adc.w	r3, r2, r3
 80013ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80013b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80013bc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80013c0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80013c4:	460b      	mov	r3, r1
 80013c6:	18db      	adds	r3, r3, r3
 80013c8:	653b      	str	r3, [r7, #80]	; 0x50
 80013ca:	4613      	mov	r3, r2
 80013cc:	eb42 0303 	adc.w	r3, r2, r3
 80013d0:	657b      	str	r3, [r7, #84]	; 0x54
 80013d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80013d6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80013da:	f7fe ff51 	bl	8000280 <__aeabi_uldivmod>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <UART_SetConfig+0x528>)
 80013e4:	fba3 1302 	umull	r1, r3, r3, r2
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	2164      	movs	r1, #100	; 0x64
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	3332      	adds	r3, #50	; 0x32
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <UART_SetConfig+0x528>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	095b      	lsrs	r3, r3, #5
 80013fe:	f003 0207 	and.w	r2, r3, #7
 8001402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4422      	add	r2, r4
 800140a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800140c:	e232      	b.n	8001874 <UART_SetConfig+0x98c>
 800140e:	bf00      	nop
 8001410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001414:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <UART_SetConfig+0x768>)
 800141c:	429a      	cmp	r2, r3
 800141e:	d006      	beq.n	800142e <UART_SetConfig+0x546>
 8001420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <UART_SetConfig+0x76c>)
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8117 	bne.w	800165c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800142e:	f7ff fc0d 	bl	8000c4c <HAL_RCC_GetPCLK2Freq>
 8001432:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800143a:	2200      	movs	r2, #0
 800143c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001440:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001444:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001448:	4622      	mov	r2, r4
 800144a:	462b      	mov	r3, r5
 800144c:	1891      	adds	r1, r2, r2
 800144e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001450:	415b      	adcs	r3, r3
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001458:	4621      	mov	r1, r4
 800145a:	eb12 0801 	adds.w	r8, r2, r1
 800145e:	4629      	mov	r1, r5
 8001460:	eb43 0901 	adc.w	r9, r3, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001478:	4690      	mov	r8, r2
 800147a:	4699      	mov	r9, r3
 800147c:	4623      	mov	r3, r4
 800147e:	eb18 0303 	adds.w	r3, r8, r3
 8001482:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001486:	462b      	mov	r3, r5
 8001488:	eb49 0303 	adc.w	r3, r9, r3
 800148c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001490:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800149c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80014ac:	4629      	mov	r1, r5
 80014ae:	008b      	lsls	r3, r1, #2
 80014b0:	4621      	mov	r1, r4
 80014b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014b6:	4621      	mov	r1, r4
 80014b8:	008a      	lsls	r2, r1, #2
 80014ba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80014be:	f7fe fedf 	bl	8000280 <__aeabi_uldivmod>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <UART_SetConfig+0x770>)
 80014c8:	fba3 2302 	umull	r2, r3, r3, r2
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	011c      	lsls	r4, r3, #4
 80014d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80014da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014de:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80014e2:	4642      	mov	r2, r8
 80014e4:	464b      	mov	r3, r9
 80014e6:	1891      	adds	r1, r2, r2
 80014e8:	6439      	str	r1, [r7, #64]	; 0x40
 80014ea:	415b      	adcs	r3, r3
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
 80014ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014f2:	4641      	mov	r1, r8
 80014f4:	1851      	adds	r1, r2, r1
 80014f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014f8:	4649      	mov	r1, r9
 80014fa:	414b      	adcs	r3, r1
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800150a:	4659      	mov	r1, fp
 800150c:	00cb      	lsls	r3, r1, #3
 800150e:	4651      	mov	r1, sl
 8001510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001514:	4651      	mov	r1, sl
 8001516:	00ca      	lsls	r2, r1, #3
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	4603      	mov	r3, r0
 800151e:	4642      	mov	r2, r8
 8001520:	189b      	adds	r3, r3, r2
 8001522:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001526:	464b      	mov	r3, r9
 8001528:	460a      	mov	r2, r1
 800152a:	eb42 0303 	adc.w	r3, r2, r3
 800152e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800153e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800154e:	4649      	mov	r1, r9
 8001550:	008b      	lsls	r3, r1, #2
 8001552:	4641      	mov	r1, r8
 8001554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001558:	4641      	mov	r1, r8
 800155a:	008a      	lsls	r2, r1, #2
 800155c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001560:	f7fe fe8e 	bl	8000280 <__aeabi_uldivmod>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <UART_SetConfig+0x770>)
 800156a:	fba3 1302 	umull	r1, r3, r3, r2
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2164      	movs	r1, #100	; 0x64
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	3332      	adds	r3, #50	; 0x32
 800157c:	4a36      	ldr	r2, [pc, #216]	; (8001658 <UART_SetConfig+0x770>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001588:	441c      	add	r4, r3
 800158a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800158e:	2200      	movs	r2, #0
 8001590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001594:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001598:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800159c:	4642      	mov	r2, r8
 800159e:	464b      	mov	r3, r9
 80015a0:	1891      	adds	r1, r2, r2
 80015a2:	6339      	str	r1, [r7, #48]	; 0x30
 80015a4:	415b      	adcs	r3, r3
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
 80015a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015ac:	4641      	mov	r1, r8
 80015ae:	1851      	adds	r1, r2, r1
 80015b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80015b2:	4649      	mov	r1, r9
 80015b4:	414b      	adcs	r3, r1
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80015c4:	4659      	mov	r1, fp
 80015c6:	00cb      	lsls	r3, r1, #3
 80015c8:	4651      	mov	r1, sl
 80015ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ce:	4651      	mov	r1, sl
 80015d0:	00ca      	lsls	r2, r1, #3
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	4642      	mov	r2, r8
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015e0:	464b      	mov	r3, r9
 80015e2:	460a      	mov	r2, r1
 80015e4:	eb42 0303 	adc.w	r3, r2, r3
 80015e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015f8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001608:	4649      	mov	r1, r9
 800160a:	008b      	lsls	r3, r1, #2
 800160c:	4641      	mov	r1, r8
 800160e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001612:	4641      	mov	r1, r8
 8001614:	008a      	lsls	r2, r1, #2
 8001616:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800161a:	f7fe fe31 	bl	8000280 <__aeabi_uldivmod>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <UART_SetConfig+0x770>)
 8001624:	fba3 1302 	umull	r1, r3, r3, r2
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	2164      	movs	r1, #100	; 0x64
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	3332      	adds	r3, #50	; 0x32
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <UART_SetConfig+0x770>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	f003 020f 	and.w	r2, r3, #15
 8001642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4422      	add	r2, r4
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e112      	b.n	8001874 <UART_SetConfig+0x98c>
 800164e:	bf00      	nop
 8001650:	40011000 	.word	0x40011000
 8001654:	40011400 	.word	0x40011400
 8001658:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800165c:	f7ff fae2 	bl	8000c24 <HAL_RCC_GetPCLK1Freq>
 8001660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001664:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001668:	2200      	movs	r2, #0
 800166a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800166e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001672:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001676:	4642      	mov	r2, r8
 8001678:	464b      	mov	r3, r9
 800167a:	1891      	adds	r1, r2, r2
 800167c:	6239      	str	r1, [r7, #32]
 800167e:	415b      	adcs	r3, r3
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001686:	4641      	mov	r1, r8
 8001688:	1854      	adds	r4, r2, r1
 800168a:	4649      	mov	r1, r9
 800168c:	eb43 0501 	adc.w	r5, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	00eb      	lsls	r3, r5, #3
 800169a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800169e:	00e2      	lsls	r2, r4, #3
 80016a0:	4614      	mov	r4, r2
 80016a2:	461d      	mov	r5, r3
 80016a4:	4643      	mov	r3, r8
 80016a6:	18e3      	adds	r3, r4, r3
 80016a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80016ac:	464b      	mov	r3, r9
 80016ae:	eb45 0303 	adc.w	r3, r5, r3
 80016b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80016c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80016d2:	4629      	mov	r1, r5
 80016d4:	008b      	lsls	r3, r1, #2
 80016d6:	4621      	mov	r1, r4
 80016d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016dc:	4621      	mov	r1, r4
 80016de:	008a      	lsls	r2, r1, #2
 80016e0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80016e4:	f7fe fdcc 	bl	8000280 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <UART_SetConfig+0x998>)
 80016ee:	fba3 2302 	umull	r2, r3, r3, r2
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	011c      	lsls	r4, r3, #4
 80016f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016fa:	2200      	movs	r2, #0
 80016fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001700:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001704:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001708:	4642      	mov	r2, r8
 800170a:	464b      	mov	r3, r9
 800170c:	1891      	adds	r1, r2, r2
 800170e:	61b9      	str	r1, [r7, #24]
 8001710:	415b      	adcs	r3, r3
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001718:	4641      	mov	r1, r8
 800171a:	1851      	adds	r1, r2, r1
 800171c:	6139      	str	r1, [r7, #16]
 800171e:	4649      	mov	r1, r9
 8001720:	414b      	adcs	r3, r1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001730:	4659      	mov	r1, fp
 8001732:	00cb      	lsls	r3, r1, #3
 8001734:	4651      	mov	r1, sl
 8001736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800173a:	4651      	mov	r1, sl
 800173c:	00ca      	lsls	r2, r1, #3
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4642      	mov	r2, r8
 8001746:	189b      	adds	r3, r3, r2
 8001748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800174c:	464b      	mov	r3, r9
 800174e:	460a      	mov	r2, r1
 8001750:	eb42 0303 	adc.w	r3, r2, r3
 8001754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001758:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001764:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001774:	4649      	mov	r1, r9
 8001776:	008b      	lsls	r3, r1, #2
 8001778:	4641      	mov	r1, r8
 800177a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800177e:	4641      	mov	r1, r8
 8001780:	008a      	lsls	r2, r1, #2
 8001782:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001786:	f7fe fd7b 	bl	8000280 <__aeabi_uldivmod>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <UART_SetConfig+0x998>)
 8001790:	fba3 1302 	umull	r1, r3, r3, r2
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	2164      	movs	r1, #100	; 0x64
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	3332      	adds	r3, #50	; 0x32
 80017a2:	4a37      	ldr	r2, [pc, #220]	; (8001880 <UART_SetConfig+0x998>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ae:	441c      	add	r4, r3
 80017b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b4:	2200      	movs	r2, #0
 80017b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80017be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017c2:	4642      	mov	r2, r8
 80017c4:	464b      	mov	r3, r9
 80017c6:	1891      	adds	r1, r2, r2
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	415b      	adcs	r3, r3
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d2:	4641      	mov	r1, r8
 80017d4:	1851      	adds	r1, r2, r1
 80017d6:	6039      	str	r1, [r7, #0]
 80017d8:	4649      	mov	r1, r9
 80017da:	414b      	adcs	r3, r1
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017ea:	4659      	mov	r1, fp
 80017ec:	00cb      	lsls	r3, r1, #3
 80017ee:	4651      	mov	r1, sl
 80017f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f4:	4651      	mov	r1, sl
 80017f6:	00ca      	lsls	r2, r1, #3
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	4642      	mov	r2, r8
 8001800:	189b      	adds	r3, r3, r2
 8001802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001806:	464b      	mov	r3, r9
 8001808:	460a      	mov	r2, r1
 800180a:	eb42 0303 	adc.w	r3, r2, r3
 800180e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001812:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800181e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800182e:	4649      	mov	r1, r9
 8001830:	008b      	lsls	r3, r1, #2
 8001832:	4641      	mov	r1, r8
 8001834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001838:	4641      	mov	r1, r8
 800183a:	008a      	lsls	r2, r1, #2
 800183c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001840:	f7fe fd1e 	bl	8000280 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <UART_SetConfig+0x998>)
 800184a:	fba3 1302 	umull	r1, r3, r3, r2
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2164      	movs	r1, #100	; 0x64
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	3332      	adds	r3, #50	; 0x32
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <UART_SetConfig+0x998>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	f003 020f 	and.w	r2, r3, #15
 8001868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4422      	add	r2, r4
 8001870:	609a      	str	r2, [r3, #8]
}
 8001872:	e7ff      	b.n	8001874 <UART_SetConfig+0x98c>
 8001874:	bf00      	nop
 8001876:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800187a:	46bd      	mov	sp, r7
 800187c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001880:	51eb851f 	.word	0x51eb851f

08001884 <main>:
#define LED_PIN		GPIO_PIN_5

void gpio_pc13_interrupt_init(void);

int main()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

	HAL_Init();
 8001888:	f7fe fe7c 	bl	8000584 <HAL_Init>
	gpio_pc13_interrupt_init();
 800188c:	f000 f804 	bl	8001898 <gpio_pc13_interrupt_init>
	uart_init();
 8001890:	f000 f960 	bl	8001b54 <uart_init>

	while(1)
 8001894:	e7fe      	b.n	8001894 <main+0x10>
	...

08001898 <gpio_pc13_interrupt_init>:
	}

}

void gpio_pc13_interrupt_init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]


	// Configure PC13
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <gpio_pc13_interrupt_init+0xd0>)
 80018d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	4822      	ldr	r0, [pc, #136]	; (800196c <gpio_pc13_interrupt_init+0xd4>)
 80018e4:	f7fe ffda 	bl	800089c <HAL_GPIO_Init>


	// Configure PA0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e8:	2301      	movs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <gpio_pc13_interrupt_init+0xd0>)
 80018ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	481c      	ldr	r0, [pc, #112]	; (8001970 <gpio_pc13_interrupt_init+0xd8>)
 8001900:	f7fe ffcc 	bl	800089c <HAL_GPIO_Init>

	// Configure PA5
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <gpio_pc13_interrupt_init+0xcc>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin   = LED_PIN;
 8001920:	2320      	movs	r3, #32
 8001922:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  =  GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed =  GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init (LED_PORT, &GPIO_InitStruct);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <gpio_pc13_interrupt_init+0xd8>)
 8001938:	f7fe ffb0 	bl	800089c <HAL_GPIO_Init>

	// Configure EXTI

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2006      	movs	r0, #6
 8001942:	f7fe ff74 	bl	800082e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001946:	2006      	movs	r0, #6
 8001948:	f7fe ff8d 	bl	8000866 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2028      	movs	r0, #40	; 0x28
 8001952:	f7fe ff6c 	bl	800082e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001956:	2028      	movs	r0, #40	; 0x28
 8001958:	f7fe ff85 	bl	8000866 <HAL_NVIC_EnableIRQ>

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	10110000 	.word	0x10110000
 800196c:	40020800 	.word	0x40020800
 8001970:	40020000 	.word	0x40020000

08001974 <SysTick_Handler>:
// Interrupt Service Routine
// callback function
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001978:	f7fe fe5e 	bl	8000638 <HAL_IncTick>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	// Do something here

	if(GPIO_Pin == GPIO_PIN_13)
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001990:	d108      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8001992:	2120      	movs	r1, #32
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_GPIO_EXTI_Callback+0x3c>)
 8001996:	f7ff f905 	bl	8000ba4 <HAL_GPIO_TogglePin>
		printf("%s\n\r", "BLUE BUTTON PRESSED");
 800199a:	4909      	ldr	r1, [pc, #36]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x40>)
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x44>)
 800199e:	f000 f995 	bl	8001ccc <iprintf>
	{
		printf("%s\n\r", "BLACK BUTTON PRESSED");
	}


}
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_Pin == GPIO_PIN_0)
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d103      	bne.n	80019b2 <HAL_GPIO_EXTI_Callback+0x32>
		printf("%s\n\r", "BLACK BUTTON PRESSED");
 80019aa:	4907      	ldr	r1, [pc, #28]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x44>)
 80019ae:	f000 f98d 	bl	8001ccc <iprintf>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000
 80019c0:	08002c00 	.word	0x08002c00
 80019c4:	08002c14 	.word	0x08002c14
 80019c8:	08002c1c 	.word	0x08002c1c

080019cc <EXTI15_10_IRQHandler>:



// Interrupt Service Routines(ISR) or Interrupt Handlers
void EXTI15_10_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	// Do not something here
	HAL_GPIO_EXTI_IRQHandler(BTN_PIN); // This invokes HAL_GPIO_EXTI_Callback and clear the interrupt line
 80019d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d4:	f7ff f902 	bl	8000bdc <HAL_GPIO_EXTI_IRQHandler>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	// Do not something here
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // This invokes HAL_GPIO_EXTI_Callback and clear the interrupt line
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff f8fb 	bl	8000bdc <HAL_GPIO_EXTI_IRQHandler>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00a      	b.n	8001a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fc:	f3af 8000 	nop.w
 8001a00:	4601      	mov	r1, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf0      	blt.n	80019fc <_read+0x12>
  }

  return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f876 	bl	8001b30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
  }
  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_isatty>:

int _isatty(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f000 f8b8 	bl	8001c68 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000090 	.word	0x20000090
 8001b2c:	200000e8 	.word	0x200000e8

08001b30 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include <stdlib.h>
UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 10);
 8001b38:	1d39      	adds	r1, r7, #4
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <__io_putchar+0x20>)
 8001b40:	f7ff f8ef 	bl	8000d22 <HAL_UART_Transmit>
	return ch;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000094 	.word	0x20000094

08001b54 <uart_init>:

void uart_init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

	// Enable UART Pins Clock Access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <uart_init+0xb0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <uart_init+0xb0>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <uart_init+0xb0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]

	// Enable UART Module Clock Access
	__HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <uart_init+0xb0>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <uart_init+0xb0>)
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <uart_init+0xb0>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

	// Configure Pins to Act as Alternate Func Pins
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001baa:	2307      	movs	r3, #7
 8001bac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4812      	ldr	r0, [pc, #72]	; (8001c08 <uart_init+0xb4>)
 8001bbe:	f7fe fe6d 	bl	800089c <HAL_GPIO_Init>

	// Configure UART Module
	huart2.Instance = USART2;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <uart_init+0xb8>)
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <uart_init+0xbc>)
 8001bc6:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <uart_init+0xb8>)
 8001bca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bce:	605a      	str	r2, [r3, #4]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <uart_init+0xb8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
	huart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <uart_init+0xb8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <uart_init+0xb8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
	huart2.Init.Mode = UART_MODE_TX;
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <uart_init+0xb8>)
 8001be4:	2208      	movs	r2, #8
 8001be6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <uart_init+0xb8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <uart_init+0xb8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <uart_init+0xb8>)
 8001bf6:	f7ff f83d 	bl	8000c74 <HAL_UART_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	20000094 	.word	0x20000094
 8001c10:	40004400 	.word	0x40004400

08001c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <LoopForever+0xe>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	; (8001c60 <LoopForever+0x16>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c42:	f000 f817 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fe1d 	bl	8001884 <main>

08001c4a <LoopForever>:

LoopForever:
    b LoopForever
 8001c4a:	e7fe      	b.n	8001c4a <LoopForever>
  ldr   r0, =_estack
 8001c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c58:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 8001c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c60:	200000e4 	.word	0x200000e4

08001c64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <__errno>:
 8001c68:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <__errno+0x8>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000000c 	.word	0x2000000c

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	4d0d      	ldr	r5, [pc, #52]	; (8001cac <__libc_init_array+0x38>)
 8001c78:	4c0d      	ldr	r4, [pc, #52]	; (8001cb0 <__libc_init_array+0x3c>)
 8001c7a:	1b64      	subs	r4, r4, r5
 8001c7c:	10a4      	asrs	r4, r4, #2
 8001c7e:	2600      	movs	r6, #0
 8001c80:	42a6      	cmp	r6, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	4d0b      	ldr	r5, [pc, #44]	; (8001cb4 <__libc_init_array+0x40>)
 8001c86:	4c0c      	ldr	r4, [pc, #48]	; (8001cb8 <__libc_init_array+0x44>)
 8001c88:	f000 ffae 	bl	8002be8 <_init>
 8001c8c:	1b64      	subs	r4, r4, r5
 8001c8e:	10a4      	asrs	r4, r4, #2
 8001c90:	2600      	movs	r6, #0
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9c:	4798      	blx	r3
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca6:	4798      	blx	r3
 8001ca8:	3601      	adds	r6, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08002cdc 	.word	0x08002cdc
 8001cb0:	08002cdc 	.word	0x08002cdc
 8001cb4:	08002cdc 	.word	0x08002cdc
 8001cb8:	08002ce0 	.word	0x08002ce0

08001cbc <memset>:
 8001cbc:	4402      	add	r2, r0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <memset+0xa>
 8001cc4:	4770      	bx	lr
 8001cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cca:	e7f9      	b.n	8001cc0 <memset+0x4>

08001ccc <iprintf>:
 8001ccc:	b40f      	push	{r0, r1, r2, r3}
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <iprintf+0x2c>)
 8001cd0:	b513      	push	{r0, r1, r4, lr}
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	b124      	cbz	r4, 8001ce0 <iprintf+0x14>
 8001cd6:	69a3      	ldr	r3, [r4, #24]
 8001cd8:	b913      	cbnz	r3, 8001ce0 <iprintf+0x14>
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f000 f866 	bl	8001dac <__sinit>
 8001ce0:	ab05      	add	r3, sp, #20
 8001ce2:	9a04      	ldr	r2, [sp, #16]
 8001ce4:	68a1      	ldr	r1, [r4, #8]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f000 f9bd 	bl	8002068 <_vfiprintf_r>
 8001cee:	b002      	add	sp, #8
 8001cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cf4:	b004      	add	sp, #16
 8001cf6:	4770      	bx	lr
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <std>:
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	4604      	mov	r4, r0
 8001d02:	e9c0 3300 	strd	r3, r3, [r0]
 8001d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d0a:	6083      	str	r3, [r0, #8]
 8001d0c:	8181      	strh	r1, [r0, #12]
 8001d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8001d10:	81c2      	strh	r2, [r0, #14]
 8001d12:	6183      	str	r3, [r0, #24]
 8001d14:	4619      	mov	r1, r3
 8001d16:	2208      	movs	r2, #8
 8001d18:	305c      	adds	r0, #92	; 0x5c
 8001d1a:	f7ff ffcf 	bl	8001cbc <memset>
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <std+0x38>)
 8001d20:	6263      	str	r3, [r4, #36]	; 0x24
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <std+0x3c>)
 8001d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <std+0x40>)
 8001d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <std+0x44>)
 8001d2c:	6224      	str	r4, [r4, #32]
 8001d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	bf00      	nop
 8001d34:	08002611 	.word	0x08002611
 8001d38:	08002633 	.word	0x08002633
 8001d3c:	0800266b 	.word	0x0800266b
 8001d40:	0800268f 	.word	0x0800268f

08001d44 <_cleanup_r>:
 8001d44:	4901      	ldr	r1, [pc, #4]	; (8001d4c <_cleanup_r+0x8>)
 8001d46:	f000 b8af 	b.w	8001ea8 <_fwalk_reent>
 8001d4a:	bf00      	nop
 8001d4c:	08002969 	.word	0x08002969

08001d50 <__sfmoreglue>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	2268      	movs	r2, #104	; 0x68
 8001d54:	1e4d      	subs	r5, r1, #1
 8001d56:	4355      	muls	r5, r2
 8001d58:	460e      	mov	r6, r1
 8001d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d5e:	f000 f8e5 	bl	8001f2c <_malloc_r>
 8001d62:	4604      	mov	r4, r0
 8001d64:	b140      	cbz	r0, 8001d78 <__sfmoreglue+0x28>
 8001d66:	2100      	movs	r1, #0
 8001d68:	e9c0 1600 	strd	r1, r6, [r0]
 8001d6c:	300c      	adds	r0, #12
 8001d6e:	60a0      	str	r0, [r4, #8]
 8001d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d74:	f7ff ffa2 	bl	8001cbc <memset>
 8001d78:	4620      	mov	r0, r4
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}

08001d7c <__sfp_lock_acquire>:
 8001d7c:	4801      	ldr	r0, [pc, #4]	; (8001d84 <__sfp_lock_acquire+0x8>)
 8001d7e:	f000 b8b3 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8001d82:	bf00      	nop
 8001d84:	200000d5 	.word	0x200000d5

08001d88 <__sfp_lock_release>:
 8001d88:	4801      	ldr	r0, [pc, #4]	; (8001d90 <__sfp_lock_release+0x8>)
 8001d8a:	f000 b8ae 	b.w	8001eea <__retarget_lock_release_recursive>
 8001d8e:	bf00      	nop
 8001d90:	200000d5 	.word	0x200000d5

08001d94 <__sinit_lock_acquire>:
 8001d94:	4801      	ldr	r0, [pc, #4]	; (8001d9c <__sinit_lock_acquire+0x8>)
 8001d96:	f000 b8a7 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8001d9a:	bf00      	nop
 8001d9c:	200000d6 	.word	0x200000d6

08001da0 <__sinit_lock_release>:
 8001da0:	4801      	ldr	r0, [pc, #4]	; (8001da8 <__sinit_lock_release+0x8>)
 8001da2:	f000 b8a2 	b.w	8001eea <__retarget_lock_release_recursive>
 8001da6:	bf00      	nop
 8001da8:	200000d6 	.word	0x200000d6

08001dac <__sinit>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	4604      	mov	r4, r0
 8001db0:	f7ff fff0 	bl	8001d94 <__sinit_lock_acquire>
 8001db4:	69a3      	ldr	r3, [r4, #24]
 8001db6:	b11b      	cbz	r3, 8001dc0 <__sinit+0x14>
 8001db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dbc:	f7ff bff0 	b.w	8001da0 <__sinit_lock_release>
 8001dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <__sinit+0x68>)
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <__sinit+0x6c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001dce:	42a3      	cmp	r3, r4
 8001dd0:	bf04      	itt	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	61a3      	streq	r3, [r4, #24]
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f820 	bl	8001e1c <__sfp>
 8001ddc:	6060      	str	r0, [r4, #4]
 8001dde:	4620      	mov	r0, r4
 8001de0:	f000 f81c 	bl	8001e1c <__sfp>
 8001de4:	60a0      	str	r0, [r4, #8]
 8001de6:	4620      	mov	r0, r4
 8001de8:	f000 f818 	bl	8001e1c <__sfp>
 8001dec:	2200      	movs	r2, #0
 8001dee:	60e0      	str	r0, [r4, #12]
 8001df0:	2104      	movs	r1, #4
 8001df2:	6860      	ldr	r0, [r4, #4]
 8001df4:	f7ff ff82 	bl	8001cfc <std>
 8001df8:	68a0      	ldr	r0, [r4, #8]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2109      	movs	r1, #9
 8001dfe:	f7ff ff7d 	bl	8001cfc <std>
 8001e02:	68e0      	ldr	r0, [r4, #12]
 8001e04:	2202      	movs	r2, #2
 8001e06:	2112      	movs	r1, #18
 8001e08:	f7ff ff78 	bl	8001cfc <std>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61a3      	str	r3, [r4, #24]
 8001e10:	e7d2      	b.n	8001db8 <__sinit+0xc>
 8001e12:	bf00      	nop
 8001e14:	08002c3c 	.word	0x08002c3c
 8001e18:	08001d45 	.word	0x08001d45

08001e1c <__sfp>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	4607      	mov	r7, r0
 8001e20:	f7ff ffac 	bl	8001d7c <__sfp_lock_acquire>
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <__sfp+0x84>)
 8001e26:	681e      	ldr	r6, [r3, #0]
 8001e28:	69b3      	ldr	r3, [r6, #24]
 8001e2a:	b913      	cbnz	r3, 8001e32 <__sfp+0x16>
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f7ff ffbd 	bl	8001dac <__sinit>
 8001e32:	3648      	adds	r6, #72	; 0x48
 8001e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	d503      	bpl.n	8001e44 <__sfp+0x28>
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	b30b      	cbz	r3, 8001e84 <__sfp+0x68>
 8001e40:	6836      	ldr	r6, [r6, #0]
 8001e42:	e7f7      	b.n	8001e34 <__sfp+0x18>
 8001e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e48:	b9d5      	cbnz	r5, 8001e80 <__sfp+0x64>
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <__sfp+0x88>)
 8001e4c:	60e3      	str	r3, [r4, #12]
 8001e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e52:	6665      	str	r5, [r4, #100]	; 0x64
 8001e54:	f000 f847 	bl	8001ee6 <__retarget_lock_init_recursive>
 8001e58:	f7ff ff96 	bl	8001d88 <__sfp_lock_release>
 8001e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e64:	6025      	str	r5, [r4, #0]
 8001e66:	61a5      	str	r5, [r4, #24]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e70:	f7ff ff24 	bl	8001cbc <memset>
 8001e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e80:	3468      	adds	r4, #104	; 0x68
 8001e82:	e7d9      	b.n	8001e38 <__sfp+0x1c>
 8001e84:	2104      	movs	r1, #4
 8001e86:	4638      	mov	r0, r7
 8001e88:	f7ff ff62 	bl	8001d50 <__sfmoreglue>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	6030      	str	r0, [r6, #0]
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1d5      	bne.n	8001e40 <__sfp+0x24>
 8001e94:	f7ff ff78 	bl	8001d88 <__sfp_lock_release>
 8001e98:	230c      	movs	r3, #12
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	e7ee      	b.n	8001e7c <__sfp+0x60>
 8001e9e:	bf00      	nop
 8001ea0:	08002c3c 	.word	0x08002c3c
 8001ea4:	ffff0001 	.word	0xffff0001

08001ea8 <_fwalk_reent>:
 8001ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eac:	4606      	mov	r6, r0
 8001eae:	4688      	mov	r8, r1
 8001eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001eb4:	2700      	movs	r7, #0
 8001eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001eba:	f1b9 0901 	subs.w	r9, r9, #1
 8001ebe:	d505      	bpl.n	8001ecc <_fwalk_reent+0x24>
 8001ec0:	6824      	ldr	r4, [r4, #0]
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	d1f7      	bne.n	8001eb6 <_fwalk_reent+0xe>
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ecc:	89ab      	ldrh	r3, [r5, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d907      	bls.n	8001ee2 <_fwalk_reent+0x3a>
 8001ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	d003      	beq.n	8001ee2 <_fwalk_reent+0x3a>
 8001eda:	4629      	mov	r1, r5
 8001edc:	4630      	mov	r0, r6
 8001ede:	47c0      	blx	r8
 8001ee0:	4307      	orrs	r7, r0
 8001ee2:	3568      	adds	r5, #104	; 0x68
 8001ee4:	e7e9      	b.n	8001eba <_fwalk_reent+0x12>

08001ee6 <__retarget_lock_init_recursive>:
 8001ee6:	4770      	bx	lr

08001ee8 <__retarget_lock_acquire_recursive>:
 8001ee8:	4770      	bx	lr

08001eea <__retarget_lock_release_recursive>:
 8001eea:	4770      	bx	lr

08001eec <sbrk_aligned>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	4e0e      	ldr	r6, [pc, #56]	; (8001f28 <sbrk_aligned+0x3c>)
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	6831      	ldr	r1, [r6, #0]
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	b911      	cbnz	r1, 8001efe <sbrk_aligned+0x12>
 8001ef8:	f000 fb7a 	bl	80025f0 <_sbrk_r>
 8001efc:	6030      	str	r0, [r6, #0]
 8001efe:	4621      	mov	r1, r4
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 fb75 	bl	80025f0 <_sbrk_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	d00a      	beq.n	8001f20 <sbrk_aligned+0x34>
 8001f0a:	1cc4      	adds	r4, r0, #3
 8001f0c:	f024 0403 	bic.w	r4, r4, #3
 8001f10:	42a0      	cmp	r0, r4
 8001f12:	d007      	beq.n	8001f24 <sbrk_aligned+0x38>
 8001f14:	1a21      	subs	r1, r4, r0
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 fb6a 	bl	80025f0 <_sbrk_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d101      	bne.n	8001f24 <sbrk_aligned+0x38>
 8001f20:	f04f 34ff 	mov.w	r4, #4294967295
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	200000dc 	.word	0x200000dc

08001f2c <_malloc_r>:
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f30:	1ccd      	adds	r5, r1, #3
 8001f32:	f025 0503 	bic.w	r5, r5, #3
 8001f36:	3508      	adds	r5, #8
 8001f38:	2d0c      	cmp	r5, #12
 8001f3a:	bf38      	it	cc
 8001f3c:	250c      	movcc	r5, #12
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	4607      	mov	r7, r0
 8001f42:	db01      	blt.n	8001f48 <_malloc_r+0x1c>
 8001f44:	42a9      	cmp	r1, r5
 8001f46:	d905      	bls.n	8001f54 <_malloc_r+0x28>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	4630      	mov	r0, r6
 8001f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f54:	4e2e      	ldr	r6, [pc, #184]	; (8002010 <_malloc_r+0xe4>)
 8001f56:	f000 fdbb 	bl	8002ad0 <__malloc_lock>
 8001f5a:	6833      	ldr	r3, [r6, #0]
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	bb34      	cbnz	r4, 8001fae <_malloc_r+0x82>
 8001f60:	4629      	mov	r1, r5
 8001f62:	4638      	mov	r0, r7
 8001f64:	f7ff ffc2 	bl	8001eec <sbrk_aligned>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	d14d      	bne.n	800200a <_malloc_r+0xde>
 8001f6e:	6834      	ldr	r4, [r6, #0]
 8001f70:	4626      	mov	r6, r4
 8001f72:	2e00      	cmp	r6, #0
 8001f74:	d140      	bne.n	8001ff8 <_malloc_r+0xcc>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	4631      	mov	r1, r6
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	eb04 0803 	add.w	r8, r4, r3
 8001f80:	f000 fb36 	bl	80025f0 <_sbrk_r>
 8001f84:	4580      	cmp	r8, r0
 8001f86:	d13a      	bne.n	8001ffe <_malloc_r+0xd2>
 8001f88:	6821      	ldr	r1, [r4, #0]
 8001f8a:	3503      	adds	r5, #3
 8001f8c:	1a6d      	subs	r5, r5, r1
 8001f8e:	f025 0503 	bic.w	r5, r5, #3
 8001f92:	3508      	adds	r5, #8
 8001f94:	2d0c      	cmp	r5, #12
 8001f96:	bf38      	it	cc
 8001f98:	250c      	movcc	r5, #12
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	f7ff ffa5 	bl	8001eec <sbrk_aligned>
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	d02b      	beq.n	8001ffe <_malloc_r+0xd2>
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	442b      	add	r3, r5
 8001faa:	6023      	str	r3, [r4, #0]
 8001fac:	e00e      	b.n	8001fcc <_malloc_r+0xa0>
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	1b52      	subs	r2, r2, r5
 8001fb2:	d41e      	bmi.n	8001ff2 <_malloc_r+0xc6>
 8001fb4:	2a0b      	cmp	r2, #11
 8001fb6:	d916      	bls.n	8001fe6 <_malloc_r+0xba>
 8001fb8:	1961      	adds	r1, r4, r5
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	6025      	str	r5, [r4, #0]
 8001fbe:	bf18      	it	ne
 8001fc0:	6059      	strne	r1, [r3, #4]
 8001fc2:	6863      	ldr	r3, [r4, #4]
 8001fc4:	bf08      	it	eq
 8001fc6:	6031      	streq	r1, [r6, #0]
 8001fc8:	5162      	str	r2, [r4, r5]
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	4638      	mov	r0, r7
 8001fce:	f104 060b 	add.w	r6, r4, #11
 8001fd2:	f000 fd83 	bl	8002adc <__malloc_unlock>
 8001fd6:	f026 0607 	bic.w	r6, r6, #7
 8001fda:	1d23      	adds	r3, r4, #4
 8001fdc:	1af2      	subs	r2, r6, r3
 8001fde:	d0b6      	beq.n	8001f4e <_malloc_r+0x22>
 8001fe0:	1b9b      	subs	r3, r3, r6
 8001fe2:	50a3      	str	r3, [r4, r2]
 8001fe4:	e7b3      	b.n	8001f4e <_malloc_r+0x22>
 8001fe6:	6862      	ldr	r2, [r4, #4]
 8001fe8:	42a3      	cmp	r3, r4
 8001fea:	bf0c      	ite	eq
 8001fec:	6032      	streq	r2, [r6, #0]
 8001fee:	605a      	strne	r2, [r3, #4]
 8001ff0:	e7ec      	b.n	8001fcc <_malloc_r+0xa0>
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	6864      	ldr	r4, [r4, #4]
 8001ff6:	e7b2      	b.n	8001f5e <_malloc_r+0x32>
 8001ff8:	4634      	mov	r4, r6
 8001ffa:	6876      	ldr	r6, [r6, #4]
 8001ffc:	e7b9      	b.n	8001f72 <_malloc_r+0x46>
 8001ffe:	230c      	movs	r3, #12
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	4638      	mov	r0, r7
 8002004:	f000 fd6a 	bl	8002adc <__malloc_unlock>
 8002008:	e7a1      	b.n	8001f4e <_malloc_r+0x22>
 800200a:	6025      	str	r5, [r4, #0]
 800200c:	e7de      	b.n	8001fcc <_malloc_r+0xa0>
 800200e:	bf00      	nop
 8002010:	200000d8 	.word	0x200000d8

08002014 <__sfputc_r>:
 8002014:	6893      	ldr	r3, [r2, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	b410      	push	{r4}
 800201c:	6093      	str	r3, [r2, #8]
 800201e:	da08      	bge.n	8002032 <__sfputc_r+0x1e>
 8002020:	6994      	ldr	r4, [r2, #24]
 8002022:	42a3      	cmp	r3, r4
 8002024:	db01      	blt.n	800202a <__sfputc_r+0x16>
 8002026:	290a      	cmp	r1, #10
 8002028:	d103      	bne.n	8002032 <__sfputc_r+0x1e>
 800202a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800202e:	f000 bb33 	b.w	8002698 <__swbuf_r>
 8002032:	6813      	ldr	r3, [r2, #0]
 8002034:	1c58      	adds	r0, r3, #1
 8002036:	6010      	str	r0, [r2, #0]
 8002038:	7019      	strb	r1, [r3, #0]
 800203a:	4608      	mov	r0, r1
 800203c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002040:	4770      	bx	lr

08002042 <__sfputs_r>:
 8002042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002044:	4606      	mov	r6, r0
 8002046:	460f      	mov	r7, r1
 8002048:	4614      	mov	r4, r2
 800204a:	18d5      	adds	r5, r2, r3
 800204c:	42ac      	cmp	r4, r5
 800204e:	d101      	bne.n	8002054 <__sfputs_r+0x12>
 8002050:	2000      	movs	r0, #0
 8002052:	e007      	b.n	8002064 <__sfputs_r+0x22>
 8002054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002058:	463a      	mov	r2, r7
 800205a:	4630      	mov	r0, r6
 800205c:	f7ff ffda 	bl	8002014 <__sfputc_r>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d1f3      	bne.n	800204c <__sfputs_r+0xa>
 8002064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002068 <_vfiprintf_r>:
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	460d      	mov	r5, r1
 800206e:	b09d      	sub	sp, #116	; 0x74
 8002070:	4614      	mov	r4, r2
 8002072:	4698      	mov	r8, r3
 8002074:	4606      	mov	r6, r0
 8002076:	b118      	cbz	r0, 8002080 <_vfiprintf_r+0x18>
 8002078:	6983      	ldr	r3, [r0, #24]
 800207a:	b90b      	cbnz	r3, 8002080 <_vfiprintf_r+0x18>
 800207c:	f7ff fe96 	bl	8001dac <__sinit>
 8002080:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <_vfiprintf_r+0x240>)
 8002082:	429d      	cmp	r5, r3
 8002084:	d11b      	bne.n	80020be <_vfiprintf_r+0x56>
 8002086:	6875      	ldr	r5, [r6, #4]
 8002088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800208a:	07d9      	lsls	r1, r3, #31
 800208c:	d405      	bmi.n	800209a <_vfiprintf_r+0x32>
 800208e:	89ab      	ldrh	r3, [r5, #12]
 8002090:	059a      	lsls	r2, r3, #22
 8002092:	d402      	bmi.n	800209a <_vfiprintf_r+0x32>
 8002094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002096:	f7ff ff27 	bl	8001ee8 <__retarget_lock_acquire_recursive>
 800209a:	89ab      	ldrh	r3, [r5, #12]
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	d501      	bpl.n	80020a4 <_vfiprintf_r+0x3c>
 80020a0:	692b      	ldr	r3, [r5, #16]
 80020a2:	b9eb      	cbnz	r3, 80020e0 <_vfiprintf_r+0x78>
 80020a4:	4629      	mov	r1, r5
 80020a6:	4630      	mov	r0, r6
 80020a8:	f000 fb5a 	bl	8002760 <__swsetup_r>
 80020ac:	b1c0      	cbz	r0, 80020e0 <_vfiprintf_r+0x78>
 80020ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020b0:	07dc      	lsls	r4, r3, #31
 80020b2:	d50e      	bpl.n	80020d2 <_vfiprintf_r+0x6a>
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	b01d      	add	sp, #116	; 0x74
 80020ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020be:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <_vfiprintf_r+0x244>)
 80020c0:	429d      	cmp	r5, r3
 80020c2:	d101      	bne.n	80020c8 <_vfiprintf_r+0x60>
 80020c4:	68b5      	ldr	r5, [r6, #8]
 80020c6:	e7df      	b.n	8002088 <_vfiprintf_r+0x20>
 80020c8:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <_vfiprintf_r+0x248>)
 80020ca:	429d      	cmp	r5, r3
 80020cc:	bf08      	it	eq
 80020ce:	68f5      	ldreq	r5, [r6, #12]
 80020d0:	e7da      	b.n	8002088 <_vfiprintf_r+0x20>
 80020d2:	89ab      	ldrh	r3, [r5, #12]
 80020d4:	0598      	lsls	r0, r3, #22
 80020d6:	d4ed      	bmi.n	80020b4 <_vfiprintf_r+0x4c>
 80020d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020da:	f7ff ff06 	bl	8001eea <__retarget_lock_release_recursive>
 80020de:	e7e9      	b.n	80020b4 <_vfiprintf_r+0x4c>
 80020e0:	2300      	movs	r3, #0
 80020e2:	9309      	str	r3, [sp, #36]	; 0x24
 80020e4:	2320      	movs	r3, #32
 80020e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80020ee:	2330      	movs	r3, #48	; 0x30
 80020f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022b4 <_vfiprintf_r+0x24c>
 80020f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020f8:	f04f 0901 	mov.w	r9, #1
 80020fc:	4623      	mov	r3, r4
 80020fe:	469a      	mov	sl, r3
 8002100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002104:	b10a      	cbz	r2, 800210a <_vfiprintf_r+0xa2>
 8002106:	2a25      	cmp	r2, #37	; 0x25
 8002108:	d1f9      	bne.n	80020fe <_vfiprintf_r+0x96>
 800210a:	ebba 0b04 	subs.w	fp, sl, r4
 800210e:	d00b      	beq.n	8002128 <_vfiprintf_r+0xc0>
 8002110:	465b      	mov	r3, fp
 8002112:	4622      	mov	r2, r4
 8002114:	4629      	mov	r1, r5
 8002116:	4630      	mov	r0, r6
 8002118:	f7ff ff93 	bl	8002042 <__sfputs_r>
 800211c:	3001      	adds	r0, #1
 800211e:	f000 80aa 	beq.w	8002276 <_vfiprintf_r+0x20e>
 8002122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002124:	445a      	add	r2, fp
 8002126:	9209      	str	r2, [sp, #36]	; 0x24
 8002128:	f89a 3000 	ldrb.w	r3, [sl]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a2 	beq.w	8002276 <_vfiprintf_r+0x20e>
 8002132:	2300      	movs	r3, #0
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800213c:	f10a 0a01 	add.w	sl, sl, #1
 8002140:	9304      	str	r3, [sp, #16]
 8002142:	9307      	str	r3, [sp, #28]
 8002144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002148:	931a      	str	r3, [sp, #104]	; 0x68
 800214a:	4654      	mov	r4, sl
 800214c:	2205      	movs	r2, #5
 800214e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002152:	4858      	ldr	r0, [pc, #352]	; (80022b4 <_vfiprintf_r+0x24c>)
 8002154:	f7fe f844 	bl	80001e0 <memchr>
 8002158:	9a04      	ldr	r2, [sp, #16]
 800215a:	b9d8      	cbnz	r0, 8002194 <_vfiprintf_r+0x12c>
 800215c:	06d1      	lsls	r1, r2, #27
 800215e:	bf44      	itt	mi
 8002160:	2320      	movmi	r3, #32
 8002162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002166:	0713      	lsls	r3, r2, #28
 8002168:	bf44      	itt	mi
 800216a:	232b      	movmi	r3, #43	; 0x2b
 800216c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002170:	f89a 3000 	ldrb.w	r3, [sl]
 8002174:	2b2a      	cmp	r3, #42	; 0x2a
 8002176:	d015      	beq.n	80021a4 <_vfiprintf_r+0x13c>
 8002178:	9a07      	ldr	r2, [sp, #28]
 800217a:	4654      	mov	r4, sl
 800217c:	2000      	movs	r0, #0
 800217e:	f04f 0c0a 	mov.w	ip, #10
 8002182:	4621      	mov	r1, r4
 8002184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002188:	3b30      	subs	r3, #48	; 0x30
 800218a:	2b09      	cmp	r3, #9
 800218c:	d94e      	bls.n	800222c <_vfiprintf_r+0x1c4>
 800218e:	b1b0      	cbz	r0, 80021be <_vfiprintf_r+0x156>
 8002190:	9207      	str	r2, [sp, #28]
 8002192:	e014      	b.n	80021be <_vfiprintf_r+0x156>
 8002194:	eba0 0308 	sub.w	r3, r0, r8
 8002198:	fa09 f303 	lsl.w	r3, r9, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	9304      	str	r3, [sp, #16]
 80021a0:	46a2      	mov	sl, r4
 80021a2:	e7d2      	b.n	800214a <_vfiprintf_r+0xe2>
 80021a4:	9b03      	ldr	r3, [sp, #12]
 80021a6:	1d19      	adds	r1, r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	9103      	str	r1, [sp, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bfbb      	ittet	lt
 80021b0:	425b      	neglt	r3, r3
 80021b2:	f042 0202 	orrlt.w	r2, r2, #2
 80021b6:	9307      	strge	r3, [sp, #28]
 80021b8:	9307      	strlt	r3, [sp, #28]
 80021ba:	bfb8      	it	lt
 80021bc:	9204      	strlt	r2, [sp, #16]
 80021be:	7823      	ldrb	r3, [r4, #0]
 80021c0:	2b2e      	cmp	r3, #46	; 0x2e
 80021c2:	d10c      	bne.n	80021de <_vfiprintf_r+0x176>
 80021c4:	7863      	ldrb	r3, [r4, #1]
 80021c6:	2b2a      	cmp	r3, #42	; 0x2a
 80021c8:	d135      	bne.n	8002236 <_vfiprintf_r+0x1ce>
 80021ca:	9b03      	ldr	r3, [sp, #12]
 80021cc:	1d1a      	adds	r2, r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	9203      	str	r2, [sp, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bfb8      	it	lt
 80021d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80021da:	3402      	adds	r4, #2
 80021dc:	9305      	str	r3, [sp, #20]
 80021de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80022c4 <_vfiprintf_r+0x25c>
 80021e2:	7821      	ldrb	r1, [r4, #0]
 80021e4:	2203      	movs	r2, #3
 80021e6:	4650      	mov	r0, sl
 80021e8:	f7fd fffa 	bl	80001e0 <memchr>
 80021ec:	b140      	cbz	r0, 8002200 <_vfiprintf_r+0x198>
 80021ee:	2340      	movs	r3, #64	; 0x40
 80021f0:	eba0 000a 	sub.w	r0, r0, sl
 80021f4:	fa03 f000 	lsl.w	r0, r3, r0
 80021f8:	9b04      	ldr	r3, [sp, #16]
 80021fa:	4303      	orrs	r3, r0
 80021fc:	3401      	adds	r4, #1
 80021fe:	9304      	str	r3, [sp, #16]
 8002200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <_vfiprintf_r+0x250>)
 8002206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800220a:	2206      	movs	r2, #6
 800220c:	f7fd ffe8 	bl	80001e0 <memchr>
 8002210:	2800      	cmp	r0, #0
 8002212:	d03f      	beq.n	8002294 <_vfiprintf_r+0x22c>
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <_vfiprintf_r+0x254>)
 8002216:	bb1b      	cbnz	r3, 8002260 <_vfiprintf_r+0x1f8>
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	3307      	adds	r3, #7
 800221c:	f023 0307 	bic.w	r3, r3, #7
 8002220:	3308      	adds	r3, #8
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002226:	443b      	add	r3, r7
 8002228:	9309      	str	r3, [sp, #36]	; 0x24
 800222a:	e767      	b.n	80020fc <_vfiprintf_r+0x94>
 800222c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002230:	460c      	mov	r4, r1
 8002232:	2001      	movs	r0, #1
 8002234:	e7a5      	b.n	8002182 <_vfiprintf_r+0x11a>
 8002236:	2300      	movs	r3, #0
 8002238:	3401      	adds	r4, #1
 800223a:	9305      	str	r3, [sp, #20]
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 0c0a 	mov.w	ip, #10
 8002242:	4620      	mov	r0, r4
 8002244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002248:	3a30      	subs	r2, #48	; 0x30
 800224a:	2a09      	cmp	r2, #9
 800224c:	d903      	bls.n	8002256 <_vfiprintf_r+0x1ee>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0c5      	beq.n	80021de <_vfiprintf_r+0x176>
 8002252:	9105      	str	r1, [sp, #20]
 8002254:	e7c3      	b.n	80021de <_vfiprintf_r+0x176>
 8002256:	fb0c 2101 	mla	r1, ip, r1, r2
 800225a:	4604      	mov	r4, r0
 800225c:	2301      	movs	r3, #1
 800225e:	e7f0      	b.n	8002242 <_vfiprintf_r+0x1da>
 8002260:	ab03      	add	r3, sp, #12
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	462a      	mov	r2, r5
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <_vfiprintf_r+0x258>)
 8002268:	a904      	add	r1, sp, #16
 800226a:	4630      	mov	r0, r6
 800226c:	f3af 8000 	nop.w
 8002270:	4607      	mov	r7, r0
 8002272:	1c78      	adds	r0, r7, #1
 8002274:	d1d6      	bne.n	8002224 <_vfiprintf_r+0x1bc>
 8002276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002278:	07d9      	lsls	r1, r3, #31
 800227a:	d405      	bmi.n	8002288 <_vfiprintf_r+0x220>
 800227c:	89ab      	ldrh	r3, [r5, #12]
 800227e:	059a      	lsls	r2, r3, #22
 8002280:	d402      	bmi.n	8002288 <_vfiprintf_r+0x220>
 8002282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002284:	f7ff fe31 	bl	8001eea <__retarget_lock_release_recursive>
 8002288:	89ab      	ldrh	r3, [r5, #12]
 800228a:	065b      	lsls	r3, r3, #25
 800228c:	f53f af12 	bmi.w	80020b4 <_vfiprintf_r+0x4c>
 8002290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002292:	e711      	b.n	80020b8 <_vfiprintf_r+0x50>
 8002294:	ab03      	add	r3, sp, #12
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	462a      	mov	r2, r5
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <_vfiprintf_r+0x258>)
 800229c:	a904      	add	r1, sp, #16
 800229e:	4630      	mov	r0, r6
 80022a0:	f000 f880 	bl	80023a4 <_printf_i>
 80022a4:	e7e4      	b.n	8002270 <_vfiprintf_r+0x208>
 80022a6:	bf00      	nop
 80022a8:	08002c60 	.word	0x08002c60
 80022ac:	08002c80 	.word	0x08002c80
 80022b0:	08002c40 	.word	0x08002c40
 80022b4:	08002ca0 	.word	0x08002ca0
 80022b8:	08002caa 	.word	0x08002caa
 80022bc:	00000000 	.word	0x00000000
 80022c0:	08002043 	.word	0x08002043
 80022c4:	08002ca6 	.word	0x08002ca6

080022c8 <_printf_common>:
 80022c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	4616      	mov	r6, r2
 80022ce:	4699      	mov	r9, r3
 80022d0:	688a      	ldr	r2, [r1, #8]
 80022d2:	690b      	ldr	r3, [r1, #16]
 80022d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022d8:	4293      	cmp	r3, r2
 80022da:	bfb8      	it	lt
 80022dc:	4613      	movlt	r3, r2
 80022de:	6033      	str	r3, [r6, #0]
 80022e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022e4:	4607      	mov	r7, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	b10a      	cbz	r2, 80022ee <_printf_common+0x26>
 80022ea:	3301      	adds	r3, #1
 80022ec:	6033      	str	r3, [r6, #0]
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	0699      	lsls	r1, r3, #26
 80022f2:	bf42      	ittt	mi
 80022f4:	6833      	ldrmi	r3, [r6, #0]
 80022f6:	3302      	addmi	r3, #2
 80022f8:	6033      	strmi	r3, [r6, #0]
 80022fa:	6825      	ldr	r5, [r4, #0]
 80022fc:	f015 0506 	ands.w	r5, r5, #6
 8002300:	d106      	bne.n	8002310 <_printf_common+0x48>
 8002302:	f104 0a19 	add.w	sl, r4, #25
 8002306:	68e3      	ldr	r3, [r4, #12]
 8002308:	6832      	ldr	r2, [r6, #0]
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	42ab      	cmp	r3, r5
 800230e:	dc26      	bgt.n	800235e <_printf_common+0x96>
 8002310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002314:	1e13      	subs	r3, r2, #0
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	bf18      	it	ne
 800231a:	2301      	movne	r3, #1
 800231c:	0692      	lsls	r2, r2, #26
 800231e:	d42b      	bmi.n	8002378 <_printf_common+0xb0>
 8002320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002324:	4649      	mov	r1, r9
 8002326:	4638      	mov	r0, r7
 8002328:	47c0      	blx	r8
 800232a:	3001      	adds	r0, #1
 800232c:	d01e      	beq.n	800236c <_printf_common+0xa4>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	68e5      	ldr	r5, [r4, #12]
 8002332:	6832      	ldr	r2, [r6, #0]
 8002334:	f003 0306 	and.w	r3, r3, #6
 8002338:	2b04      	cmp	r3, #4
 800233a:	bf08      	it	eq
 800233c:	1aad      	subeq	r5, r5, r2
 800233e:	68a3      	ldr	r3, [r4, #8]
 8002340:	6922      	ldr	r2, [r4, #16]
 8002342:	bf0c      	ite	eq
 8002344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002348:	2500      	movne	r5, #0
 800234a:	4293      	cmp	r3, r2
 800234c:	bfc4      	itt	gt
 800234e:	1a9b      	subgt	r3, r3, r2
 8002350:	18ed      	addgt	r5, r5, r3
 8002352:	2600      	movs	r6, #0
 8002354:	341a      	adds	r4, #26
 8002356:	42b5      	cmp	r5, r6
 8002358:	d11a      	bne.n	8002390 <_printf_common+0xc8>
 800235a:	2000      	movs	r0, #0
 800235c:	e008      	b.n	8002370 <_printf_common+0xa8>
 800235e:	2301      	movs	r3, #1
 8002360:	4652      	mov	r2, sl
 8002362:	4649      	mov	r1, r9
 8002364:	4638      	mov	r0, r7
 8002366:	47c0      	blx	r8
 8002368:	3001      	adds	r0, #1
 800236a:	d103      	bne.n	8002374 <_printf_common+0xac>
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002374:	3501      	adds	r5, #1
 8002376:	e7c6      	b.n	8002306 <_printf_common+0x3e>
 8002378:	18e1      	adds	r1, r4, r3
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	2030      	movs	r0, #48	; 0x30
 800237e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002382:	4422      	add	r2, r4
 8002384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800238c:	3302      	adds	r3, #2
 800238e:	e7c7      	b.n	8002320 <_printf_common+0x58>
 8002390:	2301      	movs	r3, #1
 8002392:	4622      	mov	r2, r4
 8002394:	4649      	mov	r1, r9
 8002396:	4638      	mov	r0, r7
 8002398:	47c0      	blx	r8
 800239a:	3001      	adds	r0, #1
 800239c:	d0e6      	beq.n	800236c <_printf_common+0xa4>
 800239e:	3601      	adds	r6, #1
 80023a0:	e7d9      	b.n	8002356 <_printf_common+0x8e>
	...

080023a4 <_printf_i>:
 80023a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023a8:	7e0f      	ldrb	r7, [r1, #24]
 80023aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023ac:	2f78      	cmp	r7, #120	; 0x78
 80023ae:	4691      	mov	r9, r2
 80023b0:	4680      	mov	r8, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	469a      	mov	sl, r3
 80023b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023ba:	d807      	bhi.n	80023cc <_printf_i+0x28>
 80023bc:	2f62      	cmp	r7, #98	; 0x62
 80023be:	d80a      	bhi.n	80023d6 <_printf_i+0x32>
 80023c0:	2f00      	cmp	r7, #0
 80023c2:	f000 80d8 	beq.w	8002576 <_printf_i+0x1d2>
 80023c6:	2f58      	cmp	r7, #88	; 0x58
 80023c8:	f000 80a3 	beq.w	8002512 <_printf_i+0x16e>
 80023cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023d4:	e03a      	b.n	800244c <_printf_i+0xa8>
 80023d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023da:	2b15      	cmp	r3, #21
 80023dc:	d8f6      	bhi.n	80023cc <_printf_i+0x28>
 80023de:	a101      	add	r1, pc, #4	; (adr r1, 80023e4 <_printf_i+0x40>)
 80023e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023e4:	0800243d 	.word	0x0800243d
 80023e8:	08002451 	.word	0x08002451
 80023ec:	080023cd 	.word	0x080023cd
 80023f0:	080023cd 	.word	0x080023cd
 80023f4:	080023cd 	.word	0x080023cd
 80023f8:	080023cd 	.word	0x080023cd
 80023fc:	08002451 	.word	0x08002451
 8002400:	080023cd 	.word	0x080023cd
 8002404:	080023cd 	.word	0x080023cd
 8002408:	080023cd 	.word	0x080023cd
 800240c:	080023cd 	.word	0x080023cd
 8002410:	0800255d 	.word	0x0800255d
 8002414:	08002481 	.word	0x08002481
 8002418:	0800253f 	.word	0x0800253f
 800241c:	080023cd 	.word	0x080023cd
 8002420:	080023cd 	.word	0x080023cd
 8002424:	0800257f 	.word	0x0800257f
 8002428:	080023cd 	.word	0x080023cd
 800242c:	08002481 	.word	0x08002481
 8002430:	080023cd 	.word	0x080023cd
 8002434:	080023cd 	.word	0x080023cd
 8002438:	08002547 	.word	0x08002547
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	602a      	str	r2, [r5, #0]
 8002444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800244c:	2301      	movs	r3, #1
 800244e:	e0a3      	b.n	8002598 <_printf_i+0x1f4>
 8002450:	6820      	ldr	r0, [r4, #0]
 8002452:	6829      	ldr	r1, [r5, #0]
 8002454:	0606      	lsls	r6, r0, #24
 8002456:	f101 0304 	add.w	r3, r1, #4
 800245a:	d50a      	bpl.n	8002472 <_printf_i+0xce>
 800245c:	680e      	ldr	r6, [r1, #0]
 800245e:	602b      	str	r3, [r5, #0]
 8002460:	2e00      	cmp	r6, #0
 8002462:	da03      	bge.n	800246c <_printf_i+0xc8>
 8002464:	232d      	movs	r3, #45	; 0x2d
 8002466:	4276      	negs	r6, r6
 8002468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800246c:	485e      	ldr	r0, [pc, #376]	; (80025e8 <_printf_i+0x244>)
 800246e:	230a      	movs	r3, #10
 8002470:	e019      	b.n	80024a6 <_printf_i+0x102>
 8002472:	680e      	ldr	r6, [r1, #0]
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	f010 0f40 	tst.w	r0, #64	; 0x40
 800247a:	bf18      	it	ne
 800247c:	b236      	sxthne	r6, r6
 800247e:	e7ef      	b.n	8002460 <_printf_i+0xbc>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	1d19      	adds	r1, r3, #4
 8002486:	6029      	str	r1, [r5, #0]
 8002488:	0601      	lsls	r1, r0, #24
 800248a:	d501      	bpl.n	8002490 <_printf_i+0xec>
 800248c:	681e      	ldr	r6, [r3, #0]
 800248e:	e002      	b.n	8002496 <_printf_i+0xf2>
 8002490:	0646      	lsls	r6, r0, #25
 8002492:	d5fb      	bpl.n	800248c <_printf_i+0xe8>
 8002494:	881e      	ldrh	r6, [r3, #0]
 8002496:	4854      	ldr	r0, [pc, #336]	; (80025e8 <_printf_i+0x244>)
 8002498:	2f6f      	cmp	r7, #111	; 0x6f
 800249a:	bf0c      	ite	eq
 800249c:	2308      	moveq	r3, #8
 800249e:	230a      	movne	r3, #10
 80024a0:	2100      	movs	r1, #0
 80024a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024a6:	6865      	ldr	r5, [r4, #4]
 80024a8:	60a5      	str	r5, [r4, #8]
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	bfa2      	ittt	ge
 80024ae:	6821      	ldrge	r1, [r4, #0]
 80024b0:	f021 0104 	bicge.w	r1, r1, #4
 80024b4:	6021      	strge	r1, [r4, #0]
 80024b6:	b90e      	cbnz	r6, 80024bc <_printf_i+0x118>
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	d04d      	beq.n	8002558 <_printf_i+0x1b4>
 80024bc:	4615      	mov	r5, r2
 80024be:	fbb6 f1f3 	udiv	r1, r6, r3
 80024c2:	fb03 6711 	mls	r7, r3, r1, r6
 80024c6:	5dc7      	ldrb	r7, [r0, r7]
 80024c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024cc:	4637      	mov	r7, r6
 80024ce:	42bb      	cmp	r3, r7
 80024d0:	460e      	mov	r6, r1
 80024d2:	d9f4      	bls.n	80024be <_printf_i+0x11a>
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d10b      	bne.n	80024f0 <_printf_i+0x14c>
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	07de      	lsls	r6, r3, #31
 80024dc:	d508      	bpl.n	80024f0 <_printf_i+0x14c>
 80024de:	6923      	ldr	r3, [r4, #16]
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	4299      	cmp	r1, r3
 80024e4:	bfde      	ittt	le
 80024e6:	2330      	movle	r3, #48	; 0x30
 80024e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024f0:	1b52      	subs	r2, r2, r5
 80024f2:	6122      	str	r2, [r4, #16]
 80024f4:	f8cd a000 	str.w	sl, [sp]
 80024f8:	464b      	mov	r3, r9
 80024fa:	aa03      	add	r2, sp, #12
 80024fc:	4621      	mov	r1, r4
 80024fe:	4640      	mov	r0, r8
 8002500:	f7ff fee2 	bl	80022c8 <_printf_common>
 8002504:	3001      	adds	r0, #1
 8002506:	d14c      	bne.n	80025a2 <_printf_i+0x1fe>
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	b004      	add	sp, #16
 800250e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002512:	4835      	ldr	r0, [pc, #212]	; (80025e8 <_printf_i+0x244>)
 8002514:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002518:	6829      	ldr	r1, [r5, #0]
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002520:	6029      	str	r1, [r5, #0]
 8002522:	061d      	lsls	r5, r3, #24
 8002524:	d514      	bpl.n	8002550 <_printf_i+0x1ac>
 8002526:	07df      	lsls	r7, r3, #31
 8002528:	bf44      	itt	mi
 800252a:	f043 0320 	orrmi.w	r3, r3, #32
 800252e:	6023      	strmi	r3, [r4, #0]
 8002530:	b91e      	cbnz	r6, 800253a <_printf_i+0x196>
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	f023 0320 	bic.w	r3, r3, #32
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	2310      	movs	r3, #16
 800253c:	e7b0      	b.n	80024a0 <_printf_i+0xfc>
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	2378      	movs	r3, #120	; 0x78
 8002548:	4828      	ldr	r0, [pc, #160]	; (80025ec <_printf_i+0x248>)
 800254a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800254e:	e7e3      	b.n	8002518 <_printf_i+0x174>
 8002550:	0659      	lsls	r1, r3, #25
 8002552:	bf48      	it	mi
 8002554:	b2b6      	uxthmi	r6, r6
 8002556:	e7e6      	b.n	8002526 <_printf_i+0x182>
 8002558:	4615      	mov	r5, r2
 800255a:	e7bb      	b.n	80024d4 <_printf_i+0x130>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	6826      	ldr	r6, [r4, #0]
 8002560:	6961      	ldr	r1, [r4, #20]
 8002562:	1d18      	adds	r0, r3, #4
 8002564:	6028      	str	r0, [r5, #0]
 8002566:	0635      	lsls	r5, r6, #24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	d501      	bpl.n	8002570 <_printf_i+0x1cc>
 800256c:	6019      	str	r1, [r3, #0]
 800256e:	e002      	b.n	8002576 <_printf_i+0x1d2>
 8002570:	0670      	lsls	r0, r6, #25
 8002572:	d5fb      	bpl.n	800256c <_printf_i+0x1c8>
 8002574:	8019      	strh	r1, [r3, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	6123      	str	r3, [r4, #16]
 800257a:	4615      	mov	r5, r2
 800257c:	e7ba      	b.n	80024f4 <_printf_i+0x150>
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	602a      	str	r2, [r5, #0]
 8002584:	681d      	ldr	r5, [r3, #0]
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	2100      	movs	r1, #0
 800258a:	4628      	mov	r0, r5
 800258c:	f7fd fe28 	bl	80001e0 <memchr>
 8002590:	b108      	cbz	r0, 8002596 <_printf_i+0x1f2>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	6060      	str	r0, [r4, #4]
 8002596:	6863      	ldr	r3, [r4, #4]
 8002598:	6123      	str	r3, [r4, #16]
 800259a:	2300      	movs	r3, #0
 800259c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025a0:	e7a8      	b.n	80024f4 <_printf_i+0x150>
 80025a2:	6923      	ldr	r3, [r4, #16]
 80025a4:	462a      	mov	r2, r5
 80025a6:	4649      	mov	r1, r9
 80025a8:	4640      	mov	r0, r8
 80025aa:	47d0      	blx	sl
 80025ac:	3001      	adds	r0, #1
 80025ae:	d0ab      	beq.n	8002508 <_printf_i+0x164>
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	079b      	lsls	r3, r3, #30
 80025b4:	d413      	bmi.n	80025de <_printf_i+0x23a>
 80025b6:	68e0      	ldr	r0, [r4, #12]
 80025b8:	9b03      	ldr	r3, [sp, #12]
 80025ba:	4298      	cmp	r0, r3
 80025bc:	bfb8      	it	lt
 80025be:	4618      	movlt	r0, r3
 80025c0:	e7a4      	b.n	800250c <_printf_i+0x168>
 80025c2:	2301      	movs	r3, #1
 80025c4:	4632      	mov	r2, r6
 80025c6:	4649      	mov	r1, r9
 80025c8:	4640      	mov	r0, r8
 80025ca:	47d0      	blx	sl
 80025cc:	3001      	adds	r0, #1
 80025ce:	d09b      	beq.n	8002508 <_printf_i+0x164>
 80025d0:	3501      	adds	r5, #1
 80025d2:	68e3      	ldr	r3, [r4, #12]
 80025d4:	9903      	ldr	r1, [sp, #12]
 80025d6:	1a5b      	subs	r3, r3, r1
 80025d8:	42ab      	cmp	r3, r5
 80025da:	dcf2      	bgt.n	80025c2 <_printf_i+0x21e>
 80025dc:	e7eb      	b.n	80025b6 <_printf_i+0x212>
 80025de:	2500      	movs	r5, #0
 80025e0:	f104 0619 	add.w	r6, r4, #25
 80025e4:	e7f5      	b.n	80025d2 <_printf_i+0x22e>
 80025e6:	bf00      	nop
 80025e8:	08002cb1 	.word	0x08002cb1
 80025ec:	08002cc2 	.word	0x08002cc2

080025f0 <_sbrk_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4d06      	ldr	r5, [pc, #24]	; (800260c <_sbrk_r+0x1c>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	602b      	str	r3, [r5, #0]
 80025fc:	f7ff fa62 	bl	8001ac4 <_sbrk>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d102      	bne.n	800260a <_sbrk_r+0x1a>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	b103      	cbz	r3, 800260a <_sbrk_r+0x1a>
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	200000e0 	.word	0x200000e0

08002610 <__sread>:
 8002610:	b510      	push	{r4, lr}
 8002612:	460c      	mov	r4, r1
 8002614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002618:	f000 fab2 	bl	8002b80 <_read_r>
 800261c:	2800      	cmp	r0, #0
 800261e:	bfab      	itete	ge
 8002620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002622:	89a3      	ldrhlt	r3, [r4, #12]
 8002624:	181b      	addge	r3, r3, r0
 8002626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800262a:	bfac      	ite	ge
 800262c:	6563      	strge	r3, [r4, #84]	; 0x54
 800262e:	81a3      	strhlt	r3, [r4, #12]
 8002630:	bd10      	pop	{r4, pc}

08002632 <__swrite>:
 8002632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002636:	461f      	mov	r7, r3
 8002638:	898b      	ldrh	r3, [r1, #12]
 800263a:	05db      	lsls	r3, r3, #23
 800263c:	4605      	mov	r5, r0
 800263e:	460c      	mov	r4, r1
 8002640:	4616      	mov	r6, r2
 8002642:	d505      	bpl.n	8002650 <__swrite+0x1e>
 8002644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002648:	2302      	movs	r3, #2
 800264a:	2200      	movs	r2, #0
 800264c:	f000 f9c8 	bl	80029e0 <_lseek_r>
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800265a:	81a3      	strh	r3, [r4, #12]
 800265c:	4632      	mov	r2, r6
 800265e:	463b      	mov	r3, r7
 8002660:	4628      	mov	r0, r5
 8002662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002666:	f000 b869 	b.w	800273c <_write_r>

0800266a <__sseek>:
 800266a:	b510      	push	{r4, lr}
 800266c:	460c      	mov	r4, r1
 800266e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002672:	f000 f9b5 	bl	80029e0 <_lseek_r>
 8002676:	1c43      	adds	r3, r0, #1
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	bf15      	itete	ne
 800267c:	6560      	strne	r0, [r4, #84]	; 0x54
 800267e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002686:	81a3      	strheq	r3, [r4, #12]
 8002688:	bf18      	it	ne
 800268a:	81a3      	strhne	r3, [r4, #12]
 800268c:	bd10      	pop	{r4, pc}

0800268e <__sclose>:
 800268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002692:	f000 b8d3 	b.w	800283c <_close_r>
	...

08002698 <__swbuf_r>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	460e      	mov	r6, r1
 800269c:	4614      	mov	r4, r2
 800269e:	4605      	mov	r5, r0
 80026a0:	b118      	cbz	r0, 80026aa <__swbuf_r+0x12>
 80026a2:	6983      	ldr	r3, [r0, #24]
 80026a4:	b90b      	cbnz	r3, 80026aa <__swbuf_r+0x12>
 80026a6:	f7ff fb81 	bl	8001dac <__sinit>
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <__swbuf_r+0x98>)
 80026ac:	429c      	cmp	r4, r3
 80026ae:	d12b      	bne.n	8002708 <__swbuf_r+0x70>
 80026b0:	686c      	ldr	r4, [r5, #4]
 80026b2:	69a3      	ldr	r3, [r4, #24]
 80026b4:	60a3      	str	r3, [r4, #8]
 80026b6:	89a3      	ldrh	r3, [r4, #12]
 80026b8:	071a      	lsls	r2, r3, #28
 80026ba:	d52f      	bpl.n	800271c <__swbuf_r+0x84>
 80026bc:	6923      	ldr	r3, [r4, #16]
 80026be:	b36b      	cbz	r3, 800271c <__swbuf_r+0x84>
 80026c0:	6923      	ldr	r3, [r4, #16]
 80026c2:	6820      	ldr	r0, [r4, #0]
 80026c4:	1ac0      	subs	r0, r0, r3
 80026c6:	6963      	ldr	r3, [r4, #20]
 80026c8:	b2f6      	uxtb	r6, r6
 80026ca:	4283      	cmp	r3, r0
 80026cc:	4637      	mov	r7, r6
 80026ce:	dc04      	bgt.n	80026da <__swbuf_r+0x42>
 80026d0:	4621      	mov	r1, r4
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f948 	bl	8002968 <_fflush_r>
 80026d8:	bb30      	cbnz	r0, 8002728 <__swbuf_r+0x90>
 80026da:	68a3      	ldr	r3, [r4, #8]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60a3      	str	r3, [r4, #8]
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	6022      	str	r2, [r4, #0]
 80026e6:	701e      	strb	r6, [r3, #0]
 80026e8:	6963      	ldr	r3, [r4, #20]
 80026ea:	3001      	adds	r0, #1
 80026ec:	4283      	cmp	r3, r0
 80026ee:	d004      	beq.n	80026fa <__swbuf_r+0x62>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	07db      	lsls	r3, r3, #31
 80026f4:	d506      	bpl.n	8002704 <__swbuf_r+0x6c>
 80026f6:	2e0a      	cmp	r6, #10
 80026f8:	d104      	bne.n	8002704 <__swbuf_r+0x6c>
 80026fa:	4621      	mov	r1, r4
 80026fc:	4628      	mov	r0, r5
 80026fe:	f000 f933 	bl	8002968 <_fflush_r>
 8002702:	b988      	cbnz	r0, 8002728 <__swbuf_r+0x90>
 8002704:	4638      	mov	r0, r7
 8002706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <__swbuf_r+0x9c>)
 800270a:	429c      	cmp	r4, r3
 800270c:	d101      	bne.n	8002712 <__swbuf_r+0x7a>
 800270e:	68ac      	ldr	r4, [r5, #8]
 8002710:	e7cf      	b.n	80026b2 <__swbuf_r+0x1a>
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <__swbuf_r+0xa0>)
 8002714:	429c      	cmp	r4, r3
 8002716:	bf08      	it	eq
 8002718:	68ec      	ldreq	r4, [r5, #12]
 800271a:	e7ca      	b.n	80026b2 <__swbuf_r+0x1a>
 800271c:	4621      	mov	r1, r4
 800271e:	4628      	mov	r0, r5
 8002720:	f000 f81e 	bl	8002760 <__swsetup_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	d0cb      	beq.n	80026c0 <__swbuf_r+0x28>
 8002728:	f04f 37ff 	mov.w	r7, #4294967295
 800272c:	e7ea      	b.n	8002704 <__swbuf_r+0x6c>
 800272e:	bf00      	nop
 8002730:	08002c60 	.word	0x08002c60
 8002734:	08002c80 	.word	0x08002c80
 8002738:	08002c40 	.word	0x08002c40

0800273c <_write_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4d07      	ldr	r5, [pc, #28]	; (800275c <_write_r+0x20>)
 8002740:	4604      	mov	r4, r0
 8002742:	4608      	mov	r0, r1
 8002744:	4611      	mov	r1, r2
 8002746:	2200      	movs	r2, #0
 8002748:	602a      	str	r2, [r5, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	f7ff f96a 	bl	8001a24 <_write>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_write_r+0x1e>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	b103      	cbz	r3, 800275a <_write_r+0x1e>
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	200000e0 	.word	0x200000e0

08002760 <__swsetup_r>:
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <__swsetup_r+0xcc>)
 8002762:	b570      	push	{r4, r5, r6, lr}
 8002764:	681d      	ldr	r5, [r3, #0]
 8002766:	4606      	mov	r6, r0
 8002768:	460c      	mov	r4, r1
 800276a:	b125      	cbz	r5, 8002776 <__swsetup_r+0x16>
 800276c:	69ab      	ldr	r3, [r5, #24]
 800276e:	b913      	cbnz	r3, 8002776 <__swsetup_r+0x16>
 8002770:	4628      	mov	r0, r5
 8002772:	f7ff fb1b 	bl	8001dac <__sinit>
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <__swsetup_r+0xd0>)
 8002778:	429c      	cmp	r4, r3
 800277a:	d10f      	bne.n	800279c <__swsetup_r+0x3c>
 800277c:	686c      	ldr	r4, [r5, #4]
 800277e:	89a3      	ldrh	r3, [r4, #12]
 8002780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002784:	0719      	lsls	r1, r3, #28
 8002786:	d42c      	bmi.n	80027e2 <__swsetup_r+0x82>
 8002788:	06dd      	lsls	r5, r3, #27
 800278a:	d411      	bmi.n	80027b0 <__swsetup_r+0x50>
 800278c:	2309      	movs	r3, #9
 800278e:	6033      	str	r3, [r6, #0]
 8002790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002794:	81a3      	strh	r3, [r4, #12]
 8002796:	f04f 30ff 	mov.w	r0, #4294967295
 800279a:	e03e      	b.n	800281a <__swsetup_r+0xba>
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <__swsetup_r+0xd4>)
 800279e:	429c      	cmp	r4, r3
 80027a0:	d101      	bne.n	80027a6 <__swsetup_r+0x46>
 80027a2:	68ac      	ldr	r4, [r5, #8]
 80027a4:	e7eb      	b.n	800277e <__swsetup_r+0x1e>
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <__swsetup_r+0xd8>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	bf08      	it	eq
 80027ac:	68ec      	ldreq	r4, [r5, #12]
 80027ae:	e7e6      	b.n	800277e <__swsetup_r+0x1e>
 80027b0:	0758      	lsls	r0, r3, #29
 80027b2:	d512      	bpl.n	80027da <__swsetup_r+0x7a>
 80027b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027b6:	b141      	cbz	r1, 80027ca <__swsetup_r+0x6a>
 80027b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027bc:	4299      	cmp	r1, r3
 80027be:	d002      	beq.n	80027c6 <__swsetup_r+0x66>
 80027c0:	4630      	mov	r0, r6
 80027c2:	f000 f991 	bl	8002ae8 <_free_r>
 80027c6:	2300      	movs	r3, #0
 80027c8:	6363      	str	r3, [r4, #52]	; 0x34
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	2300      	movs	r3, #0
 80027d4:	6063      	str	r3, [r4, #4]
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	81a3      	strh	r3, [r4, #12]
 80027e2:	6923      	ldr	r3, [r4, #16]
 80027e4:	b94b      	cbnz	r3, 80027fa <__swsetup_r+0x9a>
 80027e6:	89a3      	ldrh	r3, [r4, #12]
 80027e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f0:	d003      	beq.n	80027fa <__swsetup_r+0x9a>
 80027f2:	4621      	mov	r1, r4
 80027f4:	4630      	mov	r0, r6
 80027f6:	f000 f92b 	bl	8002a50 <__smakebuf_r>
 80027fa:	89a0      	ldrh	r0, [r4, #12]
 80027fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002800:	f010 0301 	ands.w	r3, r0, #1
 8002804:	d00a      	beq.n	800281c <__swsetup_r+0xbc>
 8002806:	2300      	movs	r3, #0
 8002808:	60a3      	str	r3, [r4, #8]
 800280a:	6963      	ldr	r3, [r4, #20]
 800280c:	425b      	negs	r3, r3
 800280e:	61a3      	str	r3, [r4, #24]
 8002810:	6923      	ldr	r3, [r4, #16]
 8002812:	b943      	cbnz	r3, 8002826 <__swsetup_r+0xc6>
 8002814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002818:	d1ba      	bne.n	8002790 <__swsetup_r+0x30>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	0781      	lsls	r1, r0, #30
 800281e:	bf58      	it	pl
 8002820:	6963      	ldrpl	r3, [r4, #20]
 8002822:	60a3      	str	r3, [r4, #8]
 8002824:	e7f4      	b.n	8002810 <__swsetup_r+0xb0>
 8002826:	2000      	movs	r0, #0
 8002828:	e7f7      	b.n	800281a <__swsetup_r+0xba>
 800282a:	bf00      	nop
 800282c:	2000000c 	.word	0x2000000c
 8002830:	08002c60 	.word	0x08002c60
 8002834:	08002c80 	.word	0x08002c80
 8002838:	08002c40 	.word	0x08002c40

0800283c <_close_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4d06      	ldr	r5, [pc, #24]	; (8002858 <_close_r+0x1c>)
 8002840:	2300      	movs	r3, #0
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7ff f908 	bl	8001a5c <_close>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d102      	bne.n	8002856 <_close_r+0x1a>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	b103      	cbz	r3, 8002856 <_close_r+0x1a>
 8002854:	6023      	str	r3, [r4, #0]
 8002856:	bd38      	pop	{r3, r4, r5, pc}
 8002858:	200000e0 	.word	0x200000e0

0800285c <__sflush_r>:
 800285c:	898a      	ldrh	r2, [r1, #12]
 800285e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002862:	4605      	mov	r5, r0
 8002864:	0710      	lsls	r0, r2, #28
 8002866:	460c      	mov	r4, r1
 8002868:	d458      	bmi.n	800291c <__sflush_r+0xc0>
 800286a:	684b      	ldr	r3, [r1, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dc05      	bgt.n	800287c <__sflush_r+0x20>
 8002870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	dc02      	bgt.n	800287c <__sflush_r+0x20>
 8002876:	2000      	movs	r0, #0
 8002878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800287c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800287e:	2e00      	cmp	r6, #0
 8002880:	d0f9      	beq.n	8002876 <__sflush_r+0x1a>
 8002882:	2300      	movs	r3, #0
 8002884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002888:	682f      	ldr	r7, [r5, #0]
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	d032      	beq.n	80028f4 <__sflush_r+0x98>
 800288e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	075a      	lsls	r2, r3, #29
 8002894:	d505      	bpl.n	80028a2 <__sflush_r+0x46>
 8002896:	6863      	ldr	r3, [r4, #4]
 8002898:	1ac0      	subs	r0, r0, r3
 800289a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800289c:	b10b      	cbz	r3, 80028a2 <__sflush_r+0x46>
 800289e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028a0:	1ac0      	subs	r0, r0, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	4602      	mov	r2, r0
 80028a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028a8:	6a21      	ldr	r1, [r4, #32]
 80028aa:	4628      	mov	r0, r5
 80028ac:	47b0      	blx	r6
 80028ae:	1c43      	adds	r3, r0, #1
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	d106      	bne.n	80028c2 <__sflush_r+0x66>
 80028b4:	6829      	ldr	r1, [r5, #0]
 80028b6:	291d      	cmp	r1, #29
 80028b8:	d82c      	bhi.n	8002914 <__sflush_r+0xb8>
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <__sflush_r+0x108>)
 80028bc:	40ca      	lsrs	r2, r1
 80028be:	07d6      	lsls	r6, r2, #31
 80028c0:	d528      	bpl.n	8002914 <__sflush_r+0xb8>
 80028c2:	2200      	movs	r2, #0
 80028c4:	6062      	str	r2, [r4, #4]
 80028c6:	04d9      	lsls	r1, r3, #19
 80028c8:	6922      	ldr	r2, [r4, #16]
 80028ca:	6022      	str	r2, [r4, #0]
 80028cc:	d504      	bpl.n	80028d8 <__sflush_r+0x7c>
 80028ce:	1c42      	adds	r2, r0, #1
 80028d0:	d101      	bne.n	80028d6 <__sflush_r+0x7a>
 80028d2:	682b      	ldr	r3, [r5, #0]
 80028d4:	b903      	cbnz	r3, 80028d8 <__sflush_r+0x7c>
 80028d6:	6560      	str	r0, [r4, #84]	; 0x54
 80028d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028da:	602f      	str	r7, [r5, #0]
 80028dc:	2900      	cmp	r1, #0
 80028de:	d0ca      	beq.n	8002876 <__sflush_r+0x1a>
 80028e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028e4:	4299      	cmp	r1, r3
 80028e6:	d002      	beq.n	80028ee <__sflush_r+0x92>
 80028e8:	4628      	mov	r0, r5
 80028ea:	f000 f8fd 	bl	8002ae8 <_free_r>
 80028ee:	2000      	movs	r0, #0
 80028f0:	6360      	str	r0, [r4, #52]	; 0x34
 80028f2:	e7c1      	b.n	8002878 <__sflush_r+0x1c>
 80028f4:	6a21      	ldr	r1, [r4, #32]
 80028f6:	2301      	movs	r3, #1
 80028f8:	4628      	mov	r0, r5
 80028fa:	47b0      	blx	r6
 80028fc:	1c41      	adds	r1, r0, #1
 80028fe:	d1c7      	bne.n	8002890 <__sflush_r+0x34>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0c4      	beq.n	8002890 <__sflush_r+0x34>
 8002906:	2b1d      	cmp	r3, #29
 8002908:	d001      	beq.n	800290e <__sflush_r+0xb2>
 800290a:	2b16      	cmp	r3, #22
 800290c:	d101      	bne.n	8002912 <__sflush_r+0xb6>
 800290e:	602f      	str	r7, [r5, #0]
 8002910:	e7b1      	b.n	8002876 <__sflush_r+0x1a>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002918:	81a3      	strh	r3, [r4, #12]
 800291a:	e7ad      	b.n	8002878 <__sflush_r+0x1c>
 800291c:	690f      	ldr	r7, [r1, #16]
 800291e:	2f00      	cmp	r7, #0
 8002920:	d0a9      	beq.n	8002876 <__sflush_r+0x1a>
 8002922:	0793      	lsls	r3, r2, #30
 8002924:	680e      	ldr	r6, [r1, #0]
 8002926:	bf08      	it	eq
 8002928:	694b      	ldreq	r3, [r1, #20]
 800292a:	600f      	str	r7, [r1, #0]
 800292c:	bf18      	it	ne
 800292e:	2300      	movne	r3, #0
 8002930:	eba6 0807 	sub.w	r8, r6, r7
 8002934:	608b      	str	r3, [r1, #8]
 8002936:	f1b8 0f00 	cmp.w	r8, #0
 800293a:	dd9c      	ble.n	8002876 <__sflush_r+0x1a>
 800293c:	6a21      	ldr	r1, [r4, #32]
 800293e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002940:	4643      	mov	r3, r8
 8002942:	463a      	mov	r2, r7
 8002944:	4628      	mov	r0, r5
 8002946:	47b0      	blx	r6
 8002948:	2800      	cmp	r0, #0
 800294a:	dc06      	bgt.n	800295a <__sflush_r+0xfe>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e78e      	b.n	8002878 <__sflush_r+0x1c>
 800295a:	4407      	add	r7, r0
 800295c:	eba8 0800 	sub.w	r8, r8, r0
 8002960:	e7e9      	b.n	8002936 <__sflush_r+0xda>
 8002962:	bf00      	nop
 8002964:	20400001 	.word	0x20400001

08002968 <_fflush_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	690b      	ldr	r3, [r1, #16]
 800296c:	4605      	mov	r5, r0
 800296e:	460c      	mov	r4, r1
 8002970:	b913      	cbnz	r3, 8002978 <_fflush_r+0x10>
 8002972:	2500      	movs	r5, #0
 8002974:	4628      	mov	r0, r5
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	b118      	cbz	r0, 8002982 <_fflush_r+0x1a>
 800297a:	6983      	ldr	r3, [r0, #24]
 800297c:	b90b      	cbnz	r3, 8002982 <_fflush_r+0x1a>
 800297e:	f7ff fa15 	bl	8001dac <__sinit>
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <_fflush_r+0x6c>)
 8002984:	429c      	cmp	r4, r3
 8002986:	d11b      	bne.n	80029c0 <_fflush_r+0x58>
 8002988:	686c      	ldr	r4, [r5, #4]
 800298a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ef      	beq.n	8002972 <_fflush_r+0xa>
 8002992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002994:	07d0      	lsls	r0, r2, #31
 8002996:	d404      	bmi.n	80029a2 <_fflush_r+0x3a>
 8002998:	0599      	lsls	r1, r3, #22
 800299a:	d402      	bmi.n	80029a2 <_fflush_r+0x3a>
 800299c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800299e:	f7ff faa3 	bl	8001ee8 <__retarget_lock_acquire_recursive>
 80029a2:	4628      	mov	r0, r5
 80029a4:	4621      	mov	r1, r4
 80029a6:	f7ff ff59 	bl	800285c <__sflush_r>
 80029aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029ac:	07da      	lsls	r2, r3, #31
 80029ae:	4605      	mov	r5, r0
 80029b0:	d4e0      	bmi.n	8002974 <_fflush_r+0xc>
 80029b2:	89a3      	ldrh	r3, [r4, #12]
 80029b4:	059b      	lsls	r3, r3, #22
 80029b6:	d4dd      	bmi.n	8002974 <_fflush_r+0xc>
 80029b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ba:	f7ff fa96 	bl	8001eea <__retarget_lock_release_recursive>
 80029be:	e7d9      	b.n	8002974 <_fflush_r+0xc>
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <_fflush_r+0x70>)
 80029c2:	429c      	cmp	r4, r3
 80029c4:	d101      	bne.n	80029ca <_fflush_r+0x62>
 80029c6:	68ac      	ldr	r4, [r5, #8]
 80029c8:	e7df      	b.n	800298a <_fflush_r+0x22>
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <_fflush_r+0x74>)
 80029cc:	429c      	cmp	r4, r3
 80029ce:	bf08      	it	eq
 80029d0:	68ec      	ldreq	r4, [r5, #12]
 80029d2:	e7da      	b.n	800298a <_fflush_r+0x22>
 80029d4:	08002c60 	.word	0x08002c60
 80029d8:	08002c80 	.word	0x08002c80
 80029dc:	08002c40 	.word	0x08002c40

080029e0 <_lseek_r>:
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	4d07      	ldr	r5, [pc, #28]	; (8002a00 <_lseek_r+0x20>)
 80029e4:	4604      	mov	r4, r0
 80029e6:	4608      	mov	r0, r1
 80029e8:	4611      	mov	r1, r2
 80029ea:	2200      	movs	r2, #0
 80029ec:	602a      	str	r2, [r5, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f7ff f85b 	bl	8001aaa <_lseek>
 80029f4:	1c43      	adds	r3, r0, #1
 80029f6:	d102      	bne.n	80029fe <_lseek_r+0x1e>
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	b103      	cbz	r3, 80029fe <_lseek_r+0x1e>
 80029fc:	6023      	str	r3, [r4, #0]
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
 8002a00:	200000e0 	.word	0x200000e0

08002a04 <__swhatbuf_r>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	460e      	mov	r6, r1
 8002a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	b096      	sub	sp, #88	; 0x58
 8002a10:	4614      	mov	r4, r2
 8002a12:	461d      	mov	r5, r3
 8002a14:	da08      	bge.n	8002a28 <__swhatbuf_r+0x24>
 8002a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	602a      	str	r2, [r5, #0]
 8002a1e:	061a      	lsls	r2, r3, #24
 8002a20:	d410      	bmi.n	8002a44 <__swhatbuf_r+0x40>
 8002a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a26:	e00e      	b.n	8002a46 <__swhatbuf_r+0x42>
 8002a28:	466a      	mov	r2, sp
 8002a2a:	f000 f8bb 	bl	8002ba4 <_fstat_r>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	dbf1      	blt.n	8002a16 <__swhatbuf_r+0x12>
 8002a32:	9a01      	ldr	r2, [sp, #4]
 8002a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a3c:	425a      	negs	r2, r3
 8002a3e:	415a      	adcs	r2, r3
 8002a40:	602a      	str	r2, [r5, #0]
 8002a42:	e7ee      	b.n	8002a22 <__swhatbuf_r+0x1e>
 8002a44:	2340      	movs	r3, #64	; 0x40
 8002a46:	2000      	movs	r0, #0
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	b016      	add	sp, #88	; 0x58
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a50 <__smakebuf_r>:
 8002a50:	898b      	ldrh	r3, [r1, #12]
 8002a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a54:	079d      	lsls	r5, r3, #30
 8002a56:	4606      	mov	r6, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	d507      	bpl.n	8002a6c <__smakebuf_r+0x1c>
 8002a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	6123      	str	r3, [r4, #16]
 8002a64:	2301      	movs	r3, #1
 8002a66:	6163      	str	r3, [r4, #20]
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	ab01      	add	r3, sp, #4
 8002a6e:	466a      	mov	r2, sp
 8002a70:	f7ff ffc8 	bl	8002a04 <__swhatbuf_r>
 8002a74:	9900      	ldr	r1, [sp, #0]
 8002a76:	4605      	mov	r5, r0
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f7ff fa57 	bl	8001f2c <_malloc_r>
 8002a7e:	b948      	cbnz	r0, 8002a94 <__smakebuf_r+0x44>
 8002a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a84:	059a      	lsls	r2, r3, #22
 8002a86:	d4ef      	bmi.n	8002a68 <__smakebuf_r+0x18>
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	81a3      	strh	r3, [r4, #12]
 8002a92:	e7e3      	b.n	8002a5c <__smakebuf_r+0xc>
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <__smakebuf_r+0x7c>)
 8002a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	6020      	str	r0, [r4, #0]
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	9b00      	ldr	r3, [sp, #0]
 8002aa4:	6163      	str	r3, [r4, #20]
 8002aa6:	9b01      	ldr	r3, [sp, #4]
 8002aa8:	6120      	str	r0, [r4, #16]
 8002aaa:	b15b      	cbz	r3, 8002ac4 <__smakebuf_r+0x74>
 8002aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f000 f889 	bl	8002bc8 <_isatty_r>
 8002ab6:	b128      	cbz	r0, 8002ac4 <__smakebuf_r+0x74>
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	89a0      	ldrh	r0, [r4, #12]
 8002ac6:	4305      	orrs	r5, r0
 8002ac8:	81a5      	strh	r5, [r4, #12]
 8002aca:	e7cd      	b.n	8002a68 <__smakebuf_r+0x18>
 8002acc:	08001d45 	.word	0x08001d45

08002ad0 <__malloc_lock>:
 8002ad0:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <__malloc_lock+0x8>)
 8002ad2:	f7ff ba09 	b.w	8001ee8 <__retarget_lock_acquire_recursive>
 8002ad6:	bf00      	nop
 8002ad8:	200000d4 	.word	0x200000d4

08002adc <__malloc_unlock>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__malloc_unlock+0x8>)
 8002ade:	f7ff ba04 	b.w	8001eea <__retarget_lock_release_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	200000d4 	.word	0x200000d4

08002ae8 <_free_r>:
 8002ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002aea:	2900      	cmp	r1, #0
 8002aec:	d044      	beq.n	8002b78 <_free_r+0x90>
 8002aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af2:	9001      	str	r0, [sp, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f1a1 0404 	sub.w	r4, r1, #4
 8002afa:	bfb8      	it	lt
 8002afc:	18e4      	addlt	r4, r4, r3
 8002afe:	f7ff ffe7 	bl	8002ad0 <__malloc_lock>
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <_free_r+0x94>)
 8002b04:	9801      	ldr	r0, [sp, #4]
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	b933      	cbnz	r3, 8002b18 <_free_r+0x30>
 8002b0a:	6063      	str	r3, [r4, #4]
 8002b0c:	6014      	str	r4, [r2, #0]
 8002b0e:	b003      	add	sp, #12
 8002b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b14:	f7ff bfe2 	b.w	8002adc <__malloc_unlock>
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d908      	bls.n	8002b2e <_free_r+0x46>
 8002b1c:	6825      	ldr	r5, [r4, #0]
 8002b1e:	1961      	adds	r1, r4, r5
 8002b20:	428b      	cmp	r3, r1
 8002b22:	bf01      	itttt	eq
 8002b24:	6819      	ldreq	r1, [r3, #0]
 8002b26:	685b      	ldreq	r3, [r3, #4]
 8002b28:	1949      	addeq	r1, r1, r5
 8002b2a:	6021      	streq	r1, [r4, #0]
 8002b2c:	e7ed      	b.n	8002b0a <_free_r+0x22>
 8002b2e:	461a      	mov	r2, r3
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	b10b      	cbz	r3, 8002b38 <_free_r+0x50>
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	d9fa      	bls.n	8002b2e <_free_r+0x46>
 8002b38:	6811      	ldr	r1, [r2, #0]
 8002b3a:	1855      	adds	r5, r2, r1
 8002b3c:	42a5      	cmp	r5, r4
 8002b3e:	d10b      	bne.n	8002b58 <_free_r+0x70>
 8002b40:	6824      	ldr	r4, [r4, #0]
 8002b42:	4421      	add	r1, r4
 8002b44:	1854      	adds	r4, r2, r1
 8002b46:	42a3      	cmp	r3, r4
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	d1e0      	bne.n	8002b0e <_free_r+0x26>
 8002b4c:	681c      	ldr	r4, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	6053      	str	r3, [r2, #4]
 8002b52:	4421      	add	r1, r4
 8002b54:	6011      	str	r1, [r2, #0]
 8002b56:	e7da      	b.n	8002b0e <_free_r+0x26>
 8002b58:	d902      	bls.n	8002b60 <_free_r+0x78>
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	6003      	str	r3, [r0, #0]
 8002b5e:	e7d6      	b.n	8002b0e <_free_r+0x26>
 8002b60:	6825      	ldr	r5, [r4, #0]
 8002b62:	1961      	adds	r1, r4, r5
 8002b64:	428b      	cmp	r3, r1
 8002b66:	bf04      	itt	eq
 8002b68:	6819      	ldreq	r1, [r3, #0]
 8002b6a:	685b      	ldreq	r3, [r3, #4]
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	bf04      	itt	eq
 8002b70:	1949      	addeq	r1, r1, r5
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	6054      	str	r4, [r2, #4]
 8002b76:	e7ca      	b.n	8002b0e <_free_r+0x26>
 8002b78:	b003      	add	sp, #12
 8002b7a:	bd30      	pop	{r4, r5, pc}
 8002b7c:	200000d8 	.word	0x200000d8

08002b80 <_read_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4d07      	ldr	r5, [pc, #28]	; (8002ba0 <_read_r+0x20>)
 8002b84:	4604      	mov	r4, r0
 8002b86:	4608      	mov	r0, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	602a      	str	r2, [r5, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7fe ff2b 	bl	80019ea <_read>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_read_r+0x1e>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_read_r+0x1e>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	200000e0 	.word	0x200000e0

08002ba4 <_fstat_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4d07      	ldr	r5, [pc, #28]	; (8002bc4 <_fstat_r+0x20>)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4604      	mov	r4, r0
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	f7fe ff5f 	bl	8001a74 <_fstat>
 8002bb6:	1c43      	adds	r3, r0, #1
 8002bb8:	d102      	bne.n	8002bc0 <_fstat_r+0x1c>
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	b103      	cbz	r3, 8002bc0 <_fstat_r+0x1c>
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	bd38      	pop	{r3, r4, r5, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000e0 	.word	0x200000e0

08002bc8 <_isatty_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4d06      	ldr	r5, [pc, #24]	; (8002be4 <_isatty_r+0x1c>)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	602b      	str	r3, [r5, #0]
 8002bd4:	f7fe ff5e 	bl	8001a94 <_isatty>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d102      	bne.n	8002be2 <_isatty_r+0x1a>
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	b103      	cbz	r3, 8002be2 <_isatty_r+0x1a>
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	200000e0 	.word	0x200000e0

08002be8 <_init>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr

08002bf4 <_fini>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr
