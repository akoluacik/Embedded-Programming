
9_Uart_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bdc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001d74  08001d74  00011d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d7c  08001d7c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d84  08001d84  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d88  08001d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000018  08001da4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001da4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000517a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001110  00000000  00000000  000251c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  000262d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  000268a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014629  00000000  00000000  00026de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067e2  00000000  00000000  0003b411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825ba  00000000  00000000  00041bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c41ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001744  00000000  00000000  000c4200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001d5c 	.word	0x08001d5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08001d5c 	.word	0x08001d5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_Init+0x40>)
 80004e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0a      	ldr	r2, [pc, #40]	; (800051c <HAL_Init+0x40>)
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_Init+0x40>)
 80004fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f927 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	200f      	movs	r0, #15
 800050c:	f000 f810 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f000 f806 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40023c00 	.word	0x40023c00

08000520 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f937 	bl	80007c2 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f8ff 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000014 	.word	0x20000014
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000034 	.word	0x20000034

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff3e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff31 	bl	800061c <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d004      	beq.n	80007f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e00c      	b.n	8000812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2205      	movs	r2, #5
 80007fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 0201 	bic.w	r2, r2, #1
 800080e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e159      	b.n	8000af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800083c:	2201      	movs	r2, #1
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 8148 	bne.w	8000aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <HAL_GPIO_Init+0x5a>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d007      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	2b11      	cmp	r3, #17
 8000870:	d003      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b12      	cmp	r3, #18
 8000878:	d130      	bne.n	80008dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0xfc>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b12      	cmp	r3, #18
 800091a:	d123      	bne.n	8000964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	220f      	movs	r2, #15
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	69b9      	ldr	r1, [r7, #24]
 8000960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0203 	and.w	r2, r3, #3
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4313      	orrs	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80a2 	beq.w	8000aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a56      	ldr	r2, [pc, #344]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c2:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <HAL_GPIO_Init+0x2ec>)
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <HAL_GPIO_Init+0x2f0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x202>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x2f4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x1fe>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a47      	ldr	r2, [pc, #284]	; (8000b18 <HAL_GPIO_Init+0x2f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x1fa>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a46      	ldr	r2, [pc, #280]	; (8000b1c <HAL_GPIO_Init+0x2fc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x1f6>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a45      	ldr	r2, [pc, #276]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x1f2>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e008      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a16:	2303      	movs	r3, #3
 8000a18:	e004      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	e002      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a22:	2300      	movs	r3, #0
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	f002 0203 	and.w	r2, r2, #3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a34:	4935      	ldr	r1, [pc, #212]	; (8000b0c <HAL_GPIO_Init+0x2ec>)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a66:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a90:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	f67f aea2 	bls.w	800083c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40013c00 	.word	0x40013c00

08000b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000014 	.word	0x20000014

08000b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_RCC_GetHCLKFreq>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	0a9b      	lsrs	r3, r3, #10
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	4903      	ldr	r1, [pc, #12]	; (8000b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	08001d74 	.word	0x08001d74

08000b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b6c:	f7ff ffdc 	bl	8000b28 <HAL_RCC_GetHCLKFreq>
 8000b70:	4602      	mov	r2, r0
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	0b5b      	lsrs	r3, r3, #13
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	4903      	ldr	r1, [pc, #12]	; (8000b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b7e:	5ccb      	ldrb	r3, [r1, r3]
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	08001d74 	.word	0x08001d74

08000b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e03f      	b.n	8000c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d106      	bne.n	8000bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f837 	bl	8000c2a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2224      	movs	r2, #36	; 0x24
 8000bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fb03 	bl	80011e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2220      	movs	r2, #32
 8000c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b20      	cmp	r3, #32
 8000c56:	d130      	bne.n	8000cba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_UART_Transmit_IT+0x26>
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e029      	b.n	8000cbc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d101      	bne.n	8000c76 <HAL_UART_Transmit_IT+0x38>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e022      	b.n	8000cbc <HAL_UART_Transmit_IT+0x7e>
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2221      	movs	r2, #33	; 0x21
 8000c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cb4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8000cba:	2302      	movs	r3, #2
  }
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d140      	bne.n	8000d64 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_UART_Receive_IT+0x26>
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e039      	b.n	8000d66 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_UART_Receive_IT+0x38>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e032      	b.n	8000d66 <HAL_UART_Receive_IT+0x9e>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	88fa      	ldrh	r2, [r7, #6]
 8000d18:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2222      	movs	r2, #34	; 0x22
 8000d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e000      	b.n	8000d66 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8000d64:	2302      	movs	r3, #2
  }
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10d      	bne.n	8000dc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_UART_IRQHandler+0x52>
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f98c 	bl	80010dc <UART_Receive_IT>
      return;
 8000dc4:	e0d0      	b.n	8000f68 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80b0 	beq.w	8000f2e <HAL_UART_IRQHandler+0x1ba>
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <HAL_UART_IRQHandler+0x70>
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80a5 	beq.w	8000f2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00a      	beq.n	8000e04 <HAL_UART_IRQHandler+0x90>
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00a      	beq.n	8000e24 <HAL_UART_IRQHandler+0xb0>
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	f043 0202 	orr.w	r2, r3, #2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00a      	beq.n	8000e44 <HAL_UART_IRQHandler+0xd0>
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3c:	f043 0204 	orr.w	r2, r3, #4
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00f      	beq.n	8000e6e <HAL_UART_IRQHandler+0xfa>
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <HAL_UART_IRQHandler+0xee>
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e66:	f043 0208 	orr.w	r2, r3, #8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d077      	beq.n	8000f66 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <HAL_UART_IRQHandler+0x11c>
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f926 	bl	80010dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <HAL_UART_IRQHandler+0x144>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d031      	beq.n	8000f1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f86f 	bl	8000f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d123      	bne.n	8000f14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <HAL_UART_IRQHandler+0x1fc>)
 8000eea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fc72 	bl	80007da <HAL_DMA_Abort_IT>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d016      	beq.n	8000f2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f06:	4610      	mov	r0, r2
 8000f08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f0a:	e00e      	b.n	8000f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f83b 	bl	8000f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f12:	e00a      	b.n	8000f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f837 	bl	8000f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f1a:	e006      	b.n	8000f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f833 	bl	8000f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8000f28:	e01d      	b.n	8000f66 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f2a:	bf00      	nop
    return;
 8000f2c:	e01b      	b.n	8000f66 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d008      	beq.n	8000f4a <HAL_UART_IRQHandler+0x1d6>
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f85c 	bl	8001000 <UART_Transmit_IT>
    return;
 8000f48:	e00e      	b.n	8000f68 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <HAL_UART_IRQHandler+0x1f4>
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f8a4 	bl	80010ac <UART_EndTransmit_IT>
    return;
 8000f64:	e000      	b.n	8000f68 <HAL_UART_IRQHandler+0x1f4>
    return;
 8000f66:	bf00      	nop
  }
}
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08000fd9 	.word	0x08000fd9

08000f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000fb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f7ff ffc8 	bl	8000f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b21      	cmp	r3, #33	; 0x21
 8001012:	d144      	bne.n	800109e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800101c:	d11a      	bne.n	8001054 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001032:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	1c9a      	adds	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	621a      	str	r2, [r3, #32]
 8001046:	e00e      	b.n	8001066 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	621a      	str	r2, [r3, #32]
 8001052:	e008      	b.n	8001066 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6211      	str	r1, [r2, #32]
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4619      	mov	r1, r3
 8001074:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10f      	bne.n	800109a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001088:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001098:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800109e:	2302      	movs	r3, #2
  }
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff51 	bl	8000f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b22      	cmp	r3, #34	; 0x22
 80010ee:	d171      	bne.n	80011d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010f8:	d123      	bne.n	8001142 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10e      	bne.n	8001126 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	b29b      	uxth	r3, r3
 8001110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	1c9a      	adds	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
 8001124:	e029      	b.n	800117a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
 8001140:	e01b      	b.n	800117a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6858      	ldr	r0, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6291      	str	r1, [r2, #40]	; 0x28
 800115a:	b2c2      	uxtb	r2, r0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e00c      	b.n	800117a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	1c58      	adds	r0, r3, #1
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	6288      	str	r0, [r1, #40]	; 0x28
 8001172:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800117e:	b29b      	uxth	r3, r3
 8001180:	3b01      	subs	r3, #1
 8001182:	b29b      	uxth	r3, r3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800118a:	2b00      	cmp	r3, #0
 800118c:	d120      	bne.n	80011d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0220 	bic.w	r2, r2, #32
 800119c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0201 	bic.w	r2, r2, #1
 80011bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fd5e 	bl	8001c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e002      	b.n	80011d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e000      	b.n	80011d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80011d4:	2302      	movs	r3, #2
  }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80011fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011fe:	68d9      	ldr	r1, [r3, #12]
 8001200:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	ea40 0301 	orr.w	r3, r0, r1
 800120a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800120c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	431a      	orrs	r2, r3
 800121a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	431a      	orrs	r2, r3
 8001222:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4313      	orrs	r3, r2
 800122a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800122e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800123a:	f021 010c 	bic.w	r1, r1, #12
 800123e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001248:	430b      	orrs	r3, r1
 800124a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800124c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800125c:	6999      	ldr	r1, [r3, #24]
 800125e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	ea40 0301 	orr.w	r3, r0, r1
 8001268:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800126a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001274:	f040 824a 	bne.w	800170c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <UART_SetConfig+0x2f8>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d006      	beq.n	8001292 <UART_SetConfig+0xb2>
 8001284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b94      	ldr	r3, [pc, #592]	; (80014dc <UART_SetConfig+0x2fc>)
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8129 	bne.w	80014e4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001292:	f7ff fc69 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 8001296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800129a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80012a4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80012a8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80012ac:	4622      	mov	r2, r4
 80012ae:	462b      	mov	r3, r5
 80012b0:	1891      	adds	r1, r2, r2
 80012b2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80012b6:	415b      	adcs	r3, r3
 80012b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80012bc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80012c0:	4621      	mov	r1, r4
 80012c2:	1851      	adds	r1, r2, r1
 80012c4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80012c8:	4629      	mov	r1, r5
 80012ca:	414b      	adcs	r3, r1
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80012dc:	4649      	mov	r1, r9
 80012de:	00cb      	lsls	r3, r1, #3
 80012e0:	4641      	mov	r1, r8
 80012e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012e6:	4641      	mov	r1, r8
 80012e8:	00ca      	lsls	r2, r1, #3
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	4622      	mov	r2, r4
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012f8:	462b      	mov	r3, r5
 80012fa:	460a      	mov	r2, r1
 80012fc:	eb42 0303 	adc.w	r3, r2, r3
 8001300:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001310:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001314:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001318:	460b      	mov	r3, r1
 800131a:	18db      	adds	r3, r3, r3
 800131c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001320:	4613      	mov	r3, r2
 8001322:	eb42 0303 	adc.w	r3, r2, r3
 8001326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800132a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800132e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001332:	f7fe ff51 	bl	80001d8 <__aeabi_uldivmod>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4b69      	ldr	r3, [pc, #420]	; (80014e0 <UART_SetConfig+0x300>)
 800133c:	fba3 2302 	umull	r2, r3, r3, r2
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	011c      	lsls	r4, r3, #4
 8001344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001348:	2200      	movs	r2, #0
 800134a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800134e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001352:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8001356:	4642      	mov	r2, r8
 8001358:	464b      	mov	r3, r9
 800135a:	1891      	adds	r1, r2, r2
 800135c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001360:	415b      	adcs	r3, r3
 8001362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001366:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800136a:	4641      	mov	r1, r8
 800136c:	1851      	adds	r1, r2, r1
 800136e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001372:	4649      	mov	r1, r9
 8001374:	414b      	adcs	r3, r1
 8001376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001386:	4659      	mov	r1, fp
 8001388:	00cb      	lsls	r3, r1, #3
 800138a:	4651      	mov	r1, sl
 800138c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001390:	4651      	mov	r1, sl
 8001392:	00ca      	lsls	r2, r1, #3
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	4603      	mov	r3, r0
 800139a:	4642      	mov	r2, r8
 800139c:	189b      	adds	r3, r3, r2
 800139e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80013a2:	464b      	mov	r3, r9
 80013a4:	460a      	mov	r2, r1
 80013a6:	eb42 0303 	adc.w	r3, r2, r3
 80013aa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80013ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013ba:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80013be:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80013c2:	460b      	mov	r3, r1
 80013c4:	18db      	adds	r3, r3, r3
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013ca:	4613      	mov	r3, r2
 80013cc:	eb42 0303 	adc.w	r3, r2, r3
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80013d4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80013d8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80013dc:	f7fe fefc 	bl	80001d8 <__aeabi_uldivmod>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <UART_SetConfig+0x300>)
 80013e8:	fba3 2301 	umull	r2, r3, r3, r1
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	1acb      	subs	r3, r1, r3
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <UART_SetConfig+0x300>)
 80013fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800140a:	441c      	add	r4, r3
 800140c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001410:	2200      	movs	r2, #0
 8001412:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001416:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800141a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800141e:	4642      	mov	r2, r8
 8001420:	464b      	mov	r3, r9
 8001422:	1891      	adds	r1, r2, r2
 8001424:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001428:	415b      	adcs	r3, r3
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800142e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001432:	4641      	mov	r1, r8
 8001434:	1851      	adds	r1, r2, r1
 8001436:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800143a:	4649      	mov	r1, r9
 800143c:	414b      	adcs	r3, r1
 800143e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800144e:	4659      	mov	r1, fp
 8001450:	00cb      	lsls	r3, r1, #3
 8001452:	4651      	mov	r1, sl
 8001454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001458:	4651      	mov	r1, sl
 800145a:	00ca      	lsls	r2, r1, #3
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	4603      	mov	r3, r0
 8001462:	4642      	mov	r2, r8
 8001464:	189b      	adds	r3, r3, r2
 8001466:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800146a:	464b      	mov	r3, r9
 800146c:	460a      	mov	r2, r1
 800146e:	eb42 0303 	adc.w	r3, r2, r3
 8001472:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001476:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001482:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001486:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800148a:	460b      	mov	r3, r1
 800148c:	18db      	adds	r3, r3, r3
 800148e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001492:	4613      	mov	r3, r2
 8001494:	eb42 0303 	adc.w	r3, r2, r3
 8001498:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800149c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80014a0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80014a4:	f7fe fe98 	bl	80001d8 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <UART_SetConfig+0x300>)
 80014ae:	fba3 1302 	umull	r1, r3, r3, r2
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2164      	movs	r1, #100	; 0x64
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	3332      	adds	r3, #50	; 0x32
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <UART_SetConfig+0x300>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	f003 0207 	and.w	r2, r3, #7
 80014cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4422      	add	r2, r4
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	e349      	b.n	8001b6c <UART_SetConfig+0x98c>
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40011400 	.word	0x40011400
 80014e0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80014e4:	f7ff fb2c 	bl	8000b40 <HAL_RCC_GetPCLK1Freq>
 80014e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f0:	2200      	movs	r2, #0
 80014f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014f6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80014fa:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80014fe:	4622      	mov	r2, r4
 8001500:	462b      	mov	r3, r5
 8001502:	1891      	adds	r1, r2, r2
 8001504:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001508:	415b      	adcs	r3, r3
 800150a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800150e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001512:	4621      	mov	r1, r4
 8001514:	eb12 0a01 	adds.w	sl, r2, r1
 8001518:	4629      	mov	r1, r5
 800151a:	eb43 0b01 	adc.w	fp, r3, r1
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800152a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800152e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001532:	4692      	mov	sl, r2
 8001534:	469b      	mov	fp, r3
 8001536:	4623      	mov	r3, r4
 8001538:	eb1a 0303 	adds.w	r3, sl, r3
 800153c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001540:	462b      	mov	r3, r5
 8001542:	eb4b 0303 	adc.w	r3, fp, r3
 8001546:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800154a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001556:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800155a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800155e:	460b      	mov	r3, r1
 8001560:	18db      	adds	r3, r3, r3
 8001562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001566:	4613      	mov	r3, r2
 8001568:	eb42 0303 	adc.w	r3, r2, r3
 800156c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001570:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001574:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001578:	f7fe fe2e 	bl	80001d8 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <UART_SetConfig+0x528>)
 8001582:	fba3 2302 	umull	r2, r3, r3, r2
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	011c      	lsls	r4, r3, #4
 800158a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800158e:	2200      	movs	r2, #0
 8001590:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001594:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001598:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800159c:	4642      	mov	r2, r8
 800159e:	464b      	mov	r3, r9
 80015a0:	1891      	adds	r1, r2, r2
 80015a2:	67b9      	str	r1, [r7, #120]	; 0x78
 80015a4:	415b      	adcs	r3, r3
 80015a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015ac:	4641      	mov	r1, r8
 80015ae:	1851      	adds	r1, r2, r1
 80015b0:	6739      	str	r1, [r7, #112]	; 0x70
 80015b2:	4649      	mov	r1, r9
 80015b4:	414b      	adcs	r3, r1
 80015b6:	677b      	str	r3, [r7, #116]	; 0x74
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80015c4:	4659      	mov	r1, fp
 80015c6:	00cb      	lsls	r3, r1, #3
 80015c8:	4651      	mov	r1, sl
 80015ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ce:	4651      	mov	r1, sl
 80015d0:	00ca      	lsls	r2, r1, #3
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	4642      	mov	r2, r8
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015e0:	464b      	mov	r3, r9
 80015e2:	460a      	mov	r2, r1
 80015e4:	eb42 0303 	adc.w	r3, r2, r3
 80015e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80015ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015f8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80015fc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001600:	460b      	mov	r3, r1
 8001602:	18db      	adds	r3, r3, r3
 8001604:	66bb      	str	r3, [r7, #104]	; 0x68
 8001606:	4613      	mov	r3, r2
 8001608:	eb42 0303 	adc.w	r3, r2, r3
 800160c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800160e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001612:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001616:	f7fe fddf 	bl	80001d8 <__aeabi_uldivmod>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4611      	mov	r1, r2
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <UART_SetConfig+0x528>)
 8001622:	fba3 2301 	umull	r2, r3, r3, r1
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2264      	movs	r2, #100	; 0x64
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <UART_SetConfig+0x528>)
 8001638:	fba3 2302 	umull	r2, r3, r3, r2
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001644:	441c      	add	r4, r3
 8001646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800164a:	2200      	movs	r2, #0
 800164c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001650:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001654:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001658:	4642      	mov	r2, r8
 800165a:	464b      	mov	r3, r9
 800165c:	1891      	adds	r1, r2, r2
 800165e:	6639      	str	r1, [r7, #96]	; 0x60
 8001660:	415b      	adcs	r3, r3
 8001662:	667b      	str	r3, [r7, #100]	; 0x64
 8001664:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001668:	4641      	mov	r1, r8
 800166a:	1851      	adds	r1, r2, r1
 800166c:	65b9      	str	r1, [r7, #88]	; 0x58
 800166e:	4649      	mov	r1, r9
 8001670:	414b      	adcs	r3, r1
 8001672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001680:	4659      	mov	r1, fp
 8001682:	00cb      	lsls	r3, r1, #3
 8001684:	4651      	mov	r1, sl
 8001686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800168a:	4651      	mov	r1, sl
 800168c:	00ca      	lsls	r2, r1, #3
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	4603      	mov	r3, r0
 8001694:	4642      	mov	r2, r8
 8001696:	189b      	adds	r3, r3, r2
 8001698:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800169c:	464b      	mov	r3, r9
 800169e:	460a      	mov	r2, r1
 80016a0:	eb42 0303 	adc.w	r3, r2, r3
 80016a4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80016a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80016b4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80016b8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80016bc:	460b      	mov	r3, r1
 80016be:	18db      	adds	r3, r3, r3
 80016c0:	653b      	str	r3, [r7, #80]	; 0x50
 80016c2:	4613      	mov	r3, r2
 80016c4:	eb42 0303 	adc.w	r3, r2, r3
 80016c8:	657b      	str	r3, [r7, #84]	; 0x54
 80016ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016ce:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016d2:	f7fe fd81 	bl	80001d8 <__aeabi_uldivmod>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <UART_SetConfig+0x528>)
 80016dc:	fba3 1302 	umull	r1, r3, r3, r2
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	2164      	movs	r1, #100	; 0x64
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	3332      	adds	r3, #50	; 0x32
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <UART_SetConfig+0x528>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	f003 0207 	and.w	r2, r3, #7
 80016fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4422      	add	r2, r4
 8001702:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001704:	e232      	b.n	8001b6c <UART_SetConfig+0x98c>
 8001706:	bf00      	nop
 8001708:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800170c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b8d      	ldr	r3, [pc, #564]	; (8001948 <UART_SetConfig+0x768>)
 8001714:	429a      	cmp	r2, r3
 8001716:	d006      	beq.n	8001726 <UART_SetConfig+0x546>
 8001718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <UART_SetConfig+0x76c>)
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8117 	bne.w	8001954 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001726:	f7ff fa1f 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 800172a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800172e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001732:	2200      	movs	r2, #0
 8001734:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001738:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800173c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001740:	4622      	mov	r2, r4
 8001742:	462b      	mov	r3, r5
 8001744:	1891      	adds	r1, r2, r2
 8001746:	64b9      	str	r1, [r7, #72]	; 0x48
 8001748:	415b      	adcs	r3, r3
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001750:	4621      	mov	r1, r4
 8001752:	eb12 0801 	adds.w	r8, r2, r1
 8001756:	4629      	mov	r1, r5
 8001758:	eb43 0901 	adc.w	r9, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001770:	4690      	mov	r8, r2
 8001772:	4699      	mov	r9, r3
 8001774:	4623      	mov	r3, r4
 8001776:	eb18 0303 	adds.w	r3, r8, r3
 800177a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800177e:	462b      	mov	r3, r5
 8001780:	eb49 0303 	adc.w	r3, r9, r3
 8001784:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001794:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80017a4:	4629      	mov	r1, r5
 80017a6:	008b      	lsls	r3, r1, #2
 80017a8:	4621      	mov	r1, r4
 80017aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ae:	4621      	mov	r1, r4
 80017b0:	008a      	lsls	r2, r1, #2
 80017b2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80017b6:	f7fe fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4b64      	ldr	r3, [pc, #400]	; (8001950 <UART_SetConfig+0x770>)
 80017c0:	fba3 2302 	umull	r2, r3, r3, r2
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	011c      	lsls	r4, r3, #4
 80017c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80017d2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017d6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80017da:	4642      	mov	r2, r8
 80017dc:	464b      	mov	r3, r9
 80017de:	1891      	adds	r1, r2, r2
 80017e0:	6439      	str	r1, [r7, #64]	; 0x40
 80017e2:	415b      	adcs	r3, r3
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
 80017e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017ea:	4641      	mov	r1, r8
 80017ec:	1851      	adds	r1, r2, r1
 80017ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80017f0:	4649      	mov	r1, r9
 80017f2:	414b      	adcs	r3, r1
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001802:	4659      	mov	r1, fp
 8001804:	00cb      	lsls	r3, r1, #3
 8001806:	4651      	mov	r1, sl
 8001808:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800180c:	4651      	mov	r1, sl
 800180e:	00ca      	lsls	r2, r1, #3
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	4603      	mov	r3, r0
 8001816:	4642      	mov	r2, r8
 8001818:	189b      	adds	r3, r3, r2
 800181a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800181e:	464b      	mov	r3, r9
 8001820:	460a      	mov	r2, r1
 8001822:	eb42 0303 	adc.w	r3, r2, r3
 8001826:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800182a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001836:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001846:	4649      	mov	r1, r9
 8001848:	008b      	lsls	r3, r1, #2
 800184a:	4641      	mov	r1, r8
 800184c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001850:	4641      	mov	r1, r8
 8001852:	008a      	lsls	r2, r1, #2
 8001854:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001858:	f7fe fcbe 	bl	80001d8 <__aeabi_uldivmod>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <UART_SetConfig+0x770>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2164      	movs	r1, #100	; 0x64
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	3332      	adds	r3, #50	; 0x32
 8001874:	4a36      	ldr	r2, [pc, #216]	; (8001950 <UART_SetConfig+0x770>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001880:	441c      	add	r4, r3
 8001882:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001886:	2200      	movs	r2, #0
 8001888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800188c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001890:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001894:	4642      	mov	r2, r8
 8001896:	464b      	mov	r3, r9
 8001898:	1891      	adds	r1, r2, r2
 800189a:	6339      	str	r1, [r7, #48]	; 0x30
 800189c:	415b      	adcs	r3, r3
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
 80018a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018a4:	4641      	mov	r1, r8
 80018a6:	1851      	adds	r1, r2, r1
 80018a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80018aa:	4649      	mov	r1, r9
 80018ac:	414b      	adcs	r3, r1
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80018bc:	4659      	mov	r1, fp
 80018be:	00cb      	lsls	r3, r1, #3
 80018c0:	4651      	mov	r1, sl
 80018c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018c6:	4651      	mov	r1, sl
 80018c8:	00ca      	lsls	r2, r1, #3
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	4642      	mov	r2, r8
 80018d2:	189b      	adds	r3, r3, r2
 80018d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018d8:	464b      	mov	r3, r9
 80018da:	460a      	mov	r2, r1
 80018dc:	eb42 0303 	adc.w	r3, r2, r3
 80018e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018f0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001900:	4649      	mov	r1, r9
 8001902:	008b      	lsls	r3, r1, #2
 8001904:	4641      	mov	r1, r8
 8001906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800190a:	4641      	mov	r1, r8
 800190c:	008a      	lsls	r2, r1, #2
 800190e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001912:	f7fe fc61 	bl	80001d8 <__aeabi_uldivmod>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <UART_SetConfig+0x770>)
 800191c:	fba3 1302 	umull	r1, r3, r3, r2
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	2164      	movs	r1, #100	; 0x64
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	3332      	adds	r3, #50	; 0x32
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <UART_SetConfig+0x770>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	f003 020f 	and.w	r2, r3, #15
 800193a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4422      	add	r2, r4
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e112      	b.n	8001b6c <UART_SetConfig+0x98c>
 8001946:	bf00      	nop
 8001948:	40011000 	.word	0x40011000
 800194c:	40011400 	.word	0x40011400
 8001950:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001954:	f7ff f8f4 	bl	8000b40 <HAL_RCC_GetPCLK1Freq>
 8001958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800195c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001960:	2200      	movs	r2, #0
 8001962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001966:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800196a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800196e:	4642      	mov	r2, r8
 8001970:	464b      	mov	r3, r9
 8001972:	1891      	adds	r1, r2, r2
 8001974:	6239      	str	r1, [r7, #32]
 8001976:	415b      	adcs	r3, r3
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800197e:	4641      	mov	r1, r8
 8001980:	1854      	adds	r4, r2, r1
 8001982:	4649      	mov	r1, r9
 8001984:	eb43 0501 	adc.w	r5, r3, r1
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	00eb      	lsls	r3, r5, #3
 8001992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001996:	00e2      	lsls	r2, r4, #3
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
 800199c:	4643      	mov	r3, r8
 800199e:	18e3      	adds	r3, r4, r3
 80019a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80019a4:	464b      	mov	r3, r9
 80019a6:	eb45 0303 	adc.w	r3, r5, r3
 80019aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019ba:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80019ca:	4629      	mov	r1, r5
 80019cc:	008b      	lsls	r3, r1, #2
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019d4:	4621      	mov	r1, r4
 80019d6:	008a      	lsls	r2, r1, #2
 80019d8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019dc:	f7fe fbfc 	bl	80001d8 <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <UART_SetConfig+0x998>)
 80019e6:	fba3 2302 	umull	r2, r3, r3, r2
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	011c      	lsls	r4, r3, #4
 80019ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019f2:	2200      	movs	r2, #0
 80019f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019f8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80019fc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001a00:	4642      	mov	r2, r8
 8001a02:	464b      	mov	r3, r9
 8001a04:	1891      	adds	r1, r2, r2
 8001a06:	61b9      	str	r1, [r7, #24]
 8001a08:	415b      	adcs	r3, r3
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	4641      	mov	r1, r8
 8001a12:	1851      	adds	r1, r2, r1
 8001a14:	6139      	str	r1, [r7, #16]
 8001a16:	4649      	mov	r1, r9
 8001a18:	414b      	adcs	r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	00cb      	lsls	r3, r1, #3
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a32:	4651      	mov	r1, sl
 8001a34:	00ca      	lsls	r2, r1, #3
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a44:	464b      	mov	r3, r9
 8001a46:	460a      	mov	r2, r1
 8001a48:	eb42 0303 	adc.w	r3, r2, r3
 8001a4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a5c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	008b      	lsls	r3, r1, #2
 8001a70:	4641      	mov	r1, r8
 8001a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a76:	4641      	mov	r1, r8
 8001a78:	008a      	lsls	r2, r1, #2
 8001a7a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001a7e:	f7fe fbab 	bl	80001d8 <__aeabi_uldivmod>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <UART_SetConfig+0x998>)
 8001a88:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	2164      	movs	r1, #100	; 0x64
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	3332      	adds	r3, #50	; 0x32
 8001a9a:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <UART_SetConfig+0x998>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	095b      	lsrs	r3, r3, #5
 8001aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa6:	441c      	add	r4, r3
 8001aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aac:	2200      	movs	r2, #0
 8001aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ab6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001aba:	4642      	mov	r2, r8
 8001abc:	464b      	mov	r3, r9
 8001abe:	1891      	adds	r1, r2, r2
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	415b      	adcs	r3, r3
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aca:	4641      	mov	r1, r8
 8001acc:	1851      	adds	r1, r2, r1
 8001ace:	6039      	str	r1, [r7, #0]
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	414b      	adcs	r3, r1
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ae2:	4659      	mov	r1, fp
 8001ae4:	00cb      	lsls	r3, r1, #3
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001aec:	4651      	mov	r1, sl
 8001aee:	00ca      	lsls	r2, r1, #3
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	4603      	mov	r3, r0
 8001af6:	4642      	mov	r2, r8
 8001af8:	189b      	adds	r3, r3, r2
 8001afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001afe:	464b      	mov	r3, r9
 8001b00:	460a      	mov	r2, r1
 8001b02:	eb42 0303 	adc.w	r3, r2, r3
 8001b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001b26:	4649      	mov	r1, r9
 8001b28:	008b      	lsls	r3, r1, #2
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b30:	4641      	mov	r1, r8
 8001b32:	008a      	lsls	r2, r1, #2
 8001b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b38:	f7fe fb4e 	bl	80001d8 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <UART_SetConfig+0x998>)
 8001b42:	fba3 1302 	umull	r1, r3, r3, r2
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2164      	movs	r1, #100	; 0x64
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	3332      	adds	r3, #50	; 0x32
 8001b54:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <UART_SetConfig+0x998>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	f003 020f 	and.w	r2, r3, #15
 8001b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4422      	add	r2, r4
 8001b68:	609a      	str	r2, [r3, #8]
}
 8001b6a:	e7ff      	b.n	8001b6c <UART_SetConfig+0x98c>
 8001b6c:	bf00      	nop
 8001b6e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b72:	46bd      	mov	sp, r7
 8001b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b78:	51eb851f 	.word	0x51eb851f

08001b7c <main>:

uint8_t txBuffer[] = {10,20,30,40,50,60,70,80,90};
uint8_t rxBuffer[BUFFER_SIZE];

int main()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  HAL_Init();
 8001b80:	f7fe fcac 	bl	80004dc <HAL_Init>
  uart_init();
 8001b84:	f000 f818 	bl	8001bb8 <uart_init>

  HAL_UART_Transmit_IT(&huart1, txBuffer, BUFFER_SIZE);
 8001b88:	220a      	movs	r2, #10
 8001b8a:	4905      	ldr	r1, [pc, #20]	; (8001ba0 <main+0x24>)
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <main+0x28>)
 8001b8e:	f7ff f856 	bl	8000c3e <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart1, rxBuffer, BUFFER_SIZE);
 8001b92:	220a      	movs	r2, #10
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <main+0x2c>)
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <main+0x28>)
 8001b98:	f7ff f896 	bl	8000cc8 <HAL_UART_Receive_IT>


  while(1)
 8001b9c:	e7fe      	b.n	8001b9c <main+0x20>
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000038 	.word	0x20000038
 8001ba8:	2000007c 	.word	0x2000007c

08001bac <SysTick_Handler>:
}



void  SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001bb0:	f7fe fcee 	bl	8000590 <HAL_IncTick>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <uart_init>:


void uart_init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

    //Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <uart_init+0xc0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <uart_init+0xc0>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <uart_init+0xc0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <uart_init+0xc0>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <uart_init+0xc0>)
 8001bf4:	f043 0310 	orr.w	r3, r3, #16
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <uart_init+0xc0>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]


	//Configure pins to act as alternate func pins(UART)

     GPIO_InitStruct.Pin  = GPIO_PIN_9|GPIO_PIN_10;
 8001c06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c0a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c10:	2307      	movs	r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	61bb      	str	r3, [r7, #24]

     HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	4816      	ldr	r0, [pc, #88]	; (8001c7c <uart_init+0xc4>)
 8001c24:	f7fe fdfc 	bl	8000820 <HAL_GPIO_Init>

     //Configure UART module
     huart1.Instance = USART1;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <uart_init+0xc8>)
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <uart_init+0xcc>)
 8001c2c:	601a      	str	r2, [r3, #0]
     huart1.Init.BaudRate = 115200;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <uart_init+0xc8>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <uart_init+0xc8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <uart_init+0xc8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
     huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <uart_init+0xc8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
     huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <uart_init+0xc8>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <uart_init+0xc8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <uart_init+0xc8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]

     HAL_UART_Init(&huart1);
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <uart_init+0xc8>)
 8001c5c:	f7fe ff98 	bl	8000b90 <HAL_UART_Init>

     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2025      	movs	r0, #37	; 0x25
 8001c66:	f7fe fd82 	bl	800076e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6a:	2025      	movs	r0, #37	; 0x25
 8001c6c:	f7fe fd9b 	bl	80007a6 <HAL_NVIC_EnableIRQ>

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	20000038 	.word	0x20000038
 8001c84:	40011000 	.word	0x40011000

08001c88 <HAL_UART_RxCpltCallback>:
	++tx_counter;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	++rx_counter;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_UART_RxCpltCallback+0x20>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_UART_RxCpltCallback+0x20>)
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000078 	.word	0x20000078

08001cac <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <USART1_IRQHandler+0x10>)
 8001cb2:	f7ff f85f 	bl	8000d74 <HAL_UART_IRQHandler>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000038 	.word	0x20000038

08001cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001cc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001cca:	490d      	ldr	r1, [pc, #52]	; (8001d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <LoopForever+0xe>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	; (8001d0c <LoopForever+0x16>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cee:	f000 f811 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf2:	f7ff ff43 	bl	8001b7c <main>

08001cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf6:	e7fe      	b.n	8001cf6 <LoopForever>
  ldr   r0, =_estack
 8001cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001d04:	08001d8c 	.word	0x08001d8c
  ldr r2, =_sbss
 8001d08:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001d0c:	20000088 	.word	0x20000088

08001d10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4d0d      	ldr	r5, [pc, #52]	; (8001d4c <__libc_init_array+0x38>)
 8001d18:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1a:	1b64      	subs	r4, r4, r5
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	2600      	movs	r6, #0
 8001d20:	42a6      	cmp	r6, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	4d0b      	ldr	r5, [pc, #44]	; (8001d54 <__libc_init_array+0x40>)
 8001d26:	4c0c      	ldr	r4, [pc, #48]	; (8001d58 <__libc_init_array+0x44>)
 8001d28:	f000 f818 	bl	8001d5c <_init>
 8001d2c:	1b64      	subs	r4, r4, r5
 8001d2e:	10a4      	asrs	r4, r4, #2
 8001d30:	2600      	movs	r6, #0
 8001d32:	42a6      	cmp	r6, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3c:	4798      	blx	r3
 8001d3e:	3601      	adds	r6, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d46:	4798      	blx	r3
 8001d48:	3601      	adds	r6, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08001d84 	.word	0x08001d84
 8001d50:	08001d84 	.word	0x08001d84
 8001d54:	08001d84 	.word	0x08001d84
 8001d58:	08001d88 	.word	0x08001d88

08001d5c <_init>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr

08001d68 <_fini>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	bf00      	nop
 8001d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6e:	bc08      	pop	{r3}
 8001d70:	469e      	mov	lr, r3
 8001d72:	4770      	bx	lr
